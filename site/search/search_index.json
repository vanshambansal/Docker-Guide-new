{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83d\ude80 Welcome to Docker Beginner Guide","text":""},{"location":"#what-is-docker","title":"\ud83d\udc33 What is Docker?","text":"<p>Docker is a platform that lets you build, ship, and run applications in containers. Containers are like tiny, portable computers that carry your app and everything it needs to run.</p>"},{"location":"#whats-in-this-guide","title":"\ud83d\udcda What's in this guide?","text":"<p>This guide is designed to take you from zero to hero with Docker \u2014 even if you've never used it before.</p> <p>You will learn:</p> <ul> <li>\u2705 What Docker is and why it's useful</li> <li>\u2705 How to install Docker</li> <li>\u2705 How to run your first container</li> <li>\u2705 How to build custom Docker images</li> <li>\u2705 Docker Compose for multi-container apps</li> <li>\u2705 Volumes, networking, and more!</li> </ul>"},{"location":"#roadmap","title":"\ud83d\uddfa Roadmap","text":"<p>Here\u2019s the journey ahead:</p> <ol> <li>Installation \u2013 Get Docker running on your machine</li> <li>Basics \u2013 Learn the core Docker commands</li> <li>Images &amp; Containers \u2013 Understand how they work</li> <li>Dockerfile &amp; Build \u2013 Create your own images</li> <li>Docker Compose \u2013 Run multi-container apps</li> <li>Volumes &amp; Networking \u2013 Manage data &amp; connectivity</li> <li>Best Practices \u2013 Do Docker the right way</li> <li>Fun Examples \u2013 Hands-on, cool projects</li> <li>Advanced \u2013 Extra tips for power users</li> </ol>"},{"location":"#who-is-this-for","title":"\ud83c\udfaf Who is this for?","text":"<ul> <li>Beginners who want a clear, fun guide</li> <li>Developers curious about containers</li> <li>Anyone tired of \u201cit works on my machine\u201d issues \ud83d\ude09</li> </ul>"},{"location":"#ready-lets-start-with-installation","title":"\u2705 Ready? Let's start with Installation!","text":""},{"location":"advanced/","title":"Advanced Docker Topics","text":"<p>Take your Docker skills to the next level with these advanced concepts!</p>"},{"location":"advanced/#1-multi-stage-builds","title":"1. Multi-Stage Builds","text":"<p>Build smaller, more secure images by using multiple <code>FROM</code> statements in your Dockerfile.</p>"},{"location":"advanced/#2-health-checks","title":"2. Health Checks","text":"<p>Add a <code>HEALTHCHECK</code> instruction to your Dockerfile to monitor container health.</p>"},{"location":"advanced/#3-networking","title":"3. Networking","text":"<ul> <li>Custom Docker networks for container communication</li> <li>Bridge, host, and overlay networks</li> </ul>"},{"location":"advanced/#4-docker-compose-advanced-features","title":"4. Docker Compose Advanced Features","text":"<ul> <li>Use <code>depends_on</code>, environment variables, and secrets</li> <li>Override settings with multiple compose files</li> </ul>"},{"location":"advanced/#5-buildkit","title":"5. BuildKit","text":"<p>Enable BuildKit for faster and more powerful builds.</p>"},{"location":"advanced/#6-docker-swarm-orchestration","title":"6. Docker Swarm &amp; Orchestration","text":"<ul> <li>Scale containers across multiple machines</li> <li>Use <code>docker swarm</code> for clustering and service management</li> </ul>"},{"location":"advanced/#7-security-best-practices","title":"7. Security Best Practices","text":"<ul> <li>Scan images for vulnerabilities</li> <li>Use trusted base images</li> <li>Limit container capabilities</li> </ul>"},{"location":"advanced/#conclusion","title":"Conclusion","text":"<p>Congratulations! \ud83c\udf89 You've completed the Docker guide\u2014from the basics to advanced topics.</p> <p>You now know how to:</p> <ul> <li>Work with images, containers, Dockerfiles, Compose, and volumes</li> <li>Apply best practices and try fun examples</li> <li>Explore advanced features for real-world projects</li> </ul> <p>Keep experimenting and building with Docker. Happy containerizing! \ud83d\ude80</p>"},{"location":"basics/","title":"Docker Basics","text":"<p>Welcome! Now that Docker is installed, let's understand what it actually is and how to use it. Think of this as your first day at Docker school! \ud83c\udf93</p>"},{"location":"basics/#what-is-docker-in-simple-terms","title":"What is Docker? (In Simple Terms)","text":"<p>Imagine you're moving to a new apartment. Instead of packing everything separately and hoping it fits, you use shipping containers - standardized boxes that fit anywhere and contain everything you need.</p> <p>Docker does the same thing for software:</p> <ul> <li>Traditional way: \"It works on my machine!\" \ud83d\ude05 (but breaks on yours)</li> <li>Docker way: \"It works in this container!\" \u2705 (and runs anywhere)</li> </ul> <p>!!! example \"Real-world analogy\"     Without Docker: Like giving someone a recipe and hoping they have the right ingredients, kitchen tools, and oven temperature.</p> <pre><code>**With Docker:** Like giving someone a food truck that already has everything prepared and ready to serve!\n</code></pre>"},{"location":"basics/#how-docker-works-the-simple-picture","title":"How Docker Works (The Simple Picture)","text":"<pre><code>You type commands \u2192 Docker Client \u2192 Docker Daemon \u2192 Magic happens! \u2192 Container runs\n</code></pre> <p>Let's break this down:</p> <ol> <li>You type <code>docker run nginx</code> in your terminal</li> <li>Docker Client receives your command</li> <li>Docker Daemon (the engine) finds the nginx image and creates a container</li> <li>Container starts running with nginx web server inside</li> </ol> <p>!!! info \"Think of it like this\"     - Docker Client = Your TV remote     - Docker Daemon = Your TV     - Images = Netflix shows available to watch     - Containers = The show actually playing on your screen</p>"},{"location":"basics/#key-concepts-you-need-to-know","title":"Key Concepts You Need to Know","text":""},{"location":"basics/#images-vs-containers","title":"Images vs Containers","text":"<p>This is the #1 thing beginners get confused about:</p> Docker Image Docker Container \ud83d\udcc4 Blueprint/Recipe \ud83c\udfe0 Actual running thing Like a photo Like a printed copy Stored on disk Running in memory <code>docker images</code> <code>docker ps</code> <p>Example: - <code>nginx</code> image = The recipe for a web server - <code>nginx</code> container = An actual web server running and serving web pages</p>"},{"location":"basics/#volumes-data-storage","title":"Volumes (Data Storage)","text":"<p>Containers are temporary - when they stop, everything inside disappears! </p> <p>Volumes are like external hard drives for containers:</p> <ul> <li>Container stops \u2192 Data in volume stays safe</li> <li>New container starts \u2192 Can access the same data</li> </ul>"},{"location":"basics/#networks","title":"Networks","text":"<p>Networks let containers talk to each other, like phones connected to the same WiFi network.</p>"},{"location":"basics/#essential-commands-with-examples","title":"Essential Commands (With Examples)","text":""},{"location":"basics/#check-whats-running","title":"Check What's Running","text":"<pre><code>docker ps\n</code></pre> <p>Output example:</p> <pre><code>CONTAINER ID   IMAGE     COMMAND                  CREATED         STATUS         PORTS     NAMES\na1b2c3d4e5f6   nginx     \"/docker-entrypoint.\u2026\"   2 minutes ago   Up 2 minutes   80/tcp    wonderful_tesla\n</code></pre> <p>What this tells you: - Container ID: <code>a1b2c3d4e5f6</code> (unique identifier) - Image: <code>nginx</code> (what it's running) - Status: <code>Up 2 minutes</code> (it's been running for 2 minutes) - Name: <code>wonderful_tesla</code> (Docker gives random names)</p>"},{"location":"basics/#see-all-containers-including-stopped-ones","title":"See All Containers (Including Stopped Ones)","text":"<pre><code>docker ps -a\n</code></pre>"},{"location":"basics/#run-a-container","title":"Run a Container","text":"<pre><code>docker run nginx\n</code></pre> <p>What happens: 1. Docker looks for <code>nginx</code> image locally 2. If not found, downloads it from Docker Hub 3. Creates and starts a container 4. Nginx web server starts running</p>"},{"location":"basics/#run-a-container-in-the-background","title":"Run a Container in the Background","text":"<pre><code>docker run -d nginx\n</code></pre> <p>The <code>-d</code> flag means \"detached\" (runs in background).</p>"},{"location":"basics/#run-a-container-with-a-custom-name","title":"Run a Container with a Custom Name","text":"<pre><code>docker run -d --name my-web-server nginx\n</code></pre> <p>Now instead of a random name like \"wonderful_tesla\", it's called \"my-web-server\".</p>"},{"location":"basics/#stop-a-container","title":"Stop a Container","text":"<pre><code>docker stop my-web-server\n</code></pre> <p>Or use the container ID:</p> <pre><code>docker stop a1b2c3d4e5f6\n</code></pre>"},{"location":"basics/#start-a-stopped-container","title":"Start a Stopped Container","text":"<pre><code>docker start my-web-server\n</code></pre>"},{"location":"basics/#remove-a-container","title":"Remove a Container","text":"<pre><code>docker rm my-web-server\n</code></pre> <p>!!! warning \"Container must be stopped first\"     You can't remove a running container. Stop it first with <code>docker stop</code>, then remove it.</p>"},{"location":"basics/#list-all-images","title":"List All Images","text":"<pre><code>docker images\n</code></pre> <p>Output example:</p> <pre><code>REPOSITORY   TAG       IMAGE ID       CREATED        SIZE\nnginx        latest    a6bd71f48f68   2 weeks ago    187MB\nhello-world  latest    d2c94e258dcb   10 months ago  13.3kB\n</code></pre>"},{"location":"basics/#remove-an-image","title":"Remove an Image","text":"<pre><code>docker rmi nginx\n</code></pre> <p>!!! warning \"Remove containers first\"     You can't remove an image if containers are using it. Remove all containers using that image first.</p>"},{"location":"basics/#your-first-hands-on-practice","title":"Your First Hands-On Practice","text":"<p>Let's do a complete example together! Follow these steps exactly:</p>"},{"location":"basics/#step-1-run-a-web-server","title":"Step 1: Run a Web Server","text":"<pre><code>docker run -d -p 8080:80 --name my-first-server nginx\n</code></pre> <p>What each part means: - <code>-d</code> = Run in background - <code>-p 8080:80</code> = Connect your computer's port 8080 to container's port 80 - <code>--name my-first-server</code> = Give it a friendly name - <code>nginx</code> = The image to use</p>"},{"location":"basics/#step-2-check-its-running","title":"Step 2: Check It's Running","text":"<pre><code>docker ps\n</code></pre> <p>You should see your container listed!</p>"},{"location":"basics/#step-3-visit-your-web-server","title":"Step 3: Visit Your Web Server","text":"<p>Open your web browser and go to: <code>http://localhost:8080</code></p> <p>You should see the \"Welcome to nginx!\" page! \ud83c\udf89</p>"},{"location":"basics/#step-4-check-the-logs","title":"Step 4: Check the Logs","text":"<pre><code>docker logs my-first-server\n</code></pre> <p>You'll see nginx's access logs showing your visit!</p>"},{"location":"basics/#step-5-stop-and-clean-up","title":"Step 5: Stop and Clean Up","text":"<pre><code># Stop the container\ndocker stop my-first-server\n\n# Remove the container\ndocker rm my-first-server\n\n# Check it's gone\ndocker ps -a\n</code></pre>"},{"location":"basics/#understanding-the-docker-workflow","title":"Understanding the Docker Workflow","text":"<p>Here's the typical workflow you'll use:</p> <ol> <li>Find an image (on Docker Hub or build your own)</li> <li>Run a container from that image</li> <li>Interact with the container (web browser, terminal, etc.)</li> <li>Stop the container when done</li> <li>Remove the container to clean up</li> </ol>"},{"location":"basics/#common-beginner-questions","title":"Common Beginner Questions","text":""},{"location":"basics/#why-do-containers-stop-when-i-close-the-terminal","title":"\"Why do containers stop when I close the terminal?\"","text":"<p>Some containers (like <code>hello-world</code>) run a command and then exit naturally. Others (like <code>nginx</code>) keep running until you stop them.</p>"},{"location":"basics/#where-do-images-come-from","title":"\"Where do images come from?\"","text":"<ul> <li>Docker Hub - Like an app store for Docker images</li> <li>You build them - Create your own using Dockerfiles</li> <li>Other registries - Companies often have private image stores</li> </ul>"},{"location":"basics/#whats-the-difference-between-docker-run-and-docker-start","title":"\"What's the difference between <code>docker run</code> and <code>docker start</code>?\"","text":"<ul> <li><code>docker run</code> = Create a NEW container from an image and start it</li> <li><code>docker start</code> = Start an EXISTING container that was stopped</li> </ul>"},{"location":"basics/#why-use-d-flag","title":"\"Why use <code>-d</code> flag?\"","text":"<p>Without <code>-d</code>, the container runs in \"foreground\" mode - your terminal is stuck showing the container's output. With <code>-d</code>, it runs in the background and gives you your terminal back.</p>"},{"location":"basics/#quick-reference-cheat-sheet","title":"Quick Reference Cheat Sheet","text":"Task Command Example Run new container <code>docker run &lt;image&gt;</code> <code>docker run nginx</code> Run in background <code>docker run -d &lt;image&gt;</code> <code>docker run -d nginx</code> List running containers <code>docker ps</code> - List all containers <code>docker ps -a</code> - Stop container <code>docker stop &lt;name/id&gt;</code> <code>docker stop my-server</code> Start container <code>docker start &lt;name/id&gt;</code> <code>docker start my-server</code> Remove container <code>docker rm &lt;name/id&gt;</code> <code>docker rm my-server</code> List images <code>docker images</code> - Remove image <code>docker rmi &lt;image&gt;</code> <code>docker rmi nginx</code> View logs <code>docker logs &lt;name/id&gt;</code> <code>docker logs my-server</code>"},{"location":"basics/#whats-next","title":"What's Next?","text":"<p>Now that you understand the basics, let's dive deeper:</p> <ul> <li>Understanding Images - How to find, pull, and manage images</li> <li>Working with Containers - Learn advanced container management</li> <li>Creating Dockerfiles - Build your own custom images</li> </ul> <p>!!! tip \"Practice Makes Perfect\"     The best way to learn Docker is by doing! Try running different images like <code>redis</code>, <code>postgres</code>, or <code>python</code> and see what happens. Don't worry about breaking anything - containers are isolated and safe to experiment with!</p>"},{"location":"best-practices/","title":"Docker Best Practices","text":"<p>Follow these tips to use Docker safely and efficiently in real projects!</p>"},{"location":"best-practices/#1-use-specific-image-versions","title":"1. Use Specific Image Versions","text":"<p>Avoid using <code>latest</code>\u2014always specify a version tag (e.g., <code>python:3.9</code>).</p>"},{"location":"best-practices/#2-keep-images-small","title":"2. Keep Images Small","text":"<ul> <li>Use slim or alpine images if possible.</li> <li>Clean up unnecessary files in your Dockerfile.</li> </ul>"},{"location":"best-practices/#3-use-dockerignore","title":"3. Use .dockerignore","text":"<p>Add a <code>.dockerignore</code> file to avoid copying unnecessary files into your image.</p>"},{"location":"best-practices/#4-minimize-layers","title":"4. Minimize Layers","text":"<p>Combine commands in your Dockerfile to reduce the number of layers.</p>"},{"location":"best-practices/#5-use-volumes-for-data","title":"5. Use Volumes for Data","text":"<p>Never store important data inside containers\u2014use volumes for persistence.</p>"},{"location":"best-practices/#6-dont-run-as-root","title":"6. Don't Run as Root","text":"<p>Set a non-root user in your Dockerfile for better security.</p>"},{"location":"best-practices/#7-clean-up-unused-resources","title":"7. Clean Up Unused Resources","text":"<p>Regularly remove unused containers, images, and volumes:</p> <pre><code>docker system prune\n</code></pre>"},{"location":"best-practices/#8-keep-secrets-out-of-images","title":"8. Keep Secrets Out of Images","text":"<p>Never store passwords or secrets in your Dockerfile or images.</p>"},{"location":"best-practices/#9-monitor-and-log-containers","title":"9. Monitor and Log Containers","text":"<p>Use <code>docker logs</code> and monitoring tools to keep track of your containers.</p>"},{"location":"best-practices/#10-document-everything","title":"10. Document Everything","text":"<p>Keep your Dockerfiles and compose files well-commented and easy to understand.</p>"},{"location":"best-practices/#whats-next","title":"What's Next?","text":"<p>Ready to go deeper? Check out some advanced Docker topics!</p> <ul> <li>Advanced Topics</li> </ul>"},{"location":"compose/","title":"Docker Compose","text":"<p>Docker Compose lets you define and run multi-container Docker applications easily. Instead of starting each container manually, you describe your whole app in a single file and run everything with one command!</p>"},{"location":"compose/#why-use-docker-compose","title":"Why Use Docker Compose?","text":"<ul> <li>Manage multiple containers as one application</li> <li>Define services, networks, and volumes in one place</li> <li>Easy to start, stop, and manage complex setups</li> </ul>"},{"location":"compose/#what-is-a-docker-composeyml-file","title":"What Is a docker-compose.yml File?","text":"<p>It's a YAML file where you describe all your app's services (containers), networks, and volumes.</p> <p>Example:</p> <pre><code>version: \"3\"\nservices:\n  web:\n    image: nginx\n    ports:\n      - \"8080:80\"\n  redis:\n    image: redis\n</code></pre> <p>This file defines two services: a web server (nginx) and a redis database.</p>"},{"location":"compose/#basic-commands","title":"Basic Commands","text":"<ul> <li>Start everything: <code>bash   docker compose up</code></li> <li>Stop everything: <code>bash   docker compose down</code></li> <li>Run in background: <code>bash   docker compose up -d</code></li> </ul>"},{"location":"compose/#hands-on-try-docker-compose","title":"Hands-On: Try Docker Compose","text":"<ol> <li> <p>Create a <code>docker-compose.yml</code> file: <code>yaml     version: \"3\"     services:       web:         image: nginx         ports:           - \"8080:80\"       redis:         image: redis</code></p> </li> <li> <p>Start your app: <code>bash     docker compose up</code></p> </li> <li> <p>Visit <code>http://localhost:8080</code> to see nginx running.</p> </li> <li> <p>Stop everything: <code>bash     docker compose down</code></p> </li> </ol>"},{"location":"compose/#common-compose-file-options","title":"Common Compose File Options","text":"<ul> <li><code>image</code>: Which image to use</li> <li><code>build</code>: Build from a Dockerfile</li> <li><code>ports</code>: Map ports (<code>host:container</code>)</li> <li><code>volumes</code>: Attach storage</li> <li><code>environment</code>: Set environment variables</li> <li><code>depends_on</code>: Control startup order</li> </ul>"},{"location":"compose/#quick-reference","title":"Quick Reference","text":"Task Command Start services <code>docker compose up</code> Stop services <code>docker compose down</code> Run in background <code>docker compose up -d</code> View logs <code>docker compose logs</code>"},{"location":"compose/#key-takeaways","title":"Key Takeaways","text":"<p>\ud83c\udfaf Compose makes multi-container apps easy \ud83c\udfaf Define everything in one file \ud83c\udfaf Start and stop your whole app with one command</p>"},{"location":"compose/#whats-next","title":"What's Next?","text":"<p>Next, you'll learn how to store and share data between containers using Docker Volumes.</p> <ul> <li>Docker Volumes - Persist and manage your data</li> </ul> <p>Keep going\u2014you're almost a Docker pro! \ud83d\ude80</p>"},{"location":"containers/","title":"Docker Containers","text":"<p>If Docker images are like recipe cards, then containers are the actual dishes you cook and eat! \ud83c\udf72</p>"},{"location":"containers/#what-is-a-docker-container","title":"What Is a Docker Container?","text":"<p>A Docker container is a running instance of an image. Think of it as baking a pizza from a frozen pizza image:</p> <ul> <li>The image is the frozen pizza (unchanging)</li> <li>The container is the hot, ready-to-eat pizza (running app)</li> <li>You can make many pizzas (containers) from one image!</li> </ul> <p>!!! info \"Key Point\"     Containers are temporary and disposable. You can start, stop, delete, and create new ones anytime!</p>"},{"location":"containers/#how-containers-work","title":"How Containers Work","text":"<pre><code>Image (Recipe) \u2192 docker run \u2192 Container (Running App)\n</code></pre> <ul> <li>Image = Instructions and ingredients</li> <li>Container = The actual running application</li> </ul>"},{"location":"containers/#why-use-containers","title":"Why Use Containers?","text":"<ul> <li>Isolation: Each container runs separately (like apps on your phone)</li> <li>Consistency: Runs the same everywhere (your laptop, server, cloud)</li> <li>Portability: Move containers between computers easily</li> </ul>"},{"location":"containers/#working-with-containers","title":"Working with Containers","text":""},{"location":"containers/#see-what-containers-are-running","title":"See What Containers Are Running","text":"<pre><code>docker ps\n</code></pre> <p>Example output:</p> <pre><code>CONTAINER ID   IMAGE     COMMAND                  STATUS         PORTS                  NAMES\ne3f1c1a2b3c4   nginx     \"/docker-entrypoint.\u2026\"   Up 2 minutes   0.0.0.0:8080-&gt;80/tcp   web\n</code></pre>"},{"location":"containers/#see-all-containers-including-stopped","title":"See All Containers (Including Stopped)","text":"<pre><code>docker ps -a\n</code></pre>"},{"location":"containers/#start-a-new-container","title":"Start a New Container","text":"<pre><code>docker run -d --name web -p 8080:80 nginx\n</code></pre> <ul> <li><code>-d</code> = Run in background (detached)</li> <li><code>--name web</code> = Name your container \"web\"</li> <li><code>-p 8080:80</code> = Map port 8080 on your computer to port 80 in the container</li> </ul>"},{"location":"containers/#stop-a-running-container","title":"Stop a Running Container","text":"<pre><code>docker stop web\n</code></pre>"},{"location":"containers/#start-a-stopped-container","title":"Start a Stopped Container","text":"<pre><code>docker start web\n</code></pre>"},{"location":"containers/#remove-a-container","title":"Remove a Container","text":"<pre><code>docker rm web\n</code></pre> <p>!!! warning \"Can't remove running containers\"     Stop the container before removing it!</p>"},{"location":"containers/#see-container-logs-output","title":"See Container Logs (Output)","text":"<pre><code>docker logs web\n</code></pre>"},{"location":"containers/#run-a-command-inside-a-container","title":"Run a Command Inside a Container","text":"<pre><code>docker exec -it web bash\n</code></pre> <ul> <li><code>-it</code> = Interactive terminal</li> <li><code>bash</code> = Start a shell inside the container</li> </ul> <p>Type <code>exit</code> to leave the shell.</p>"},{"location":"containers/#hands-on-practice-exercise","title":"Hands-On Practice Exercise","text":"<p>Let's try it out step by step!</p>"},{"location":"containers/#step-1-run-a-web-server","title":"Step 1: Run a Web Server","text":"<pre><code>docker run -d --name my-nginx -p 8080:80 nginx\n</code></pre> <p>Visit <code>http://localhost:8080</code> in your browser.</p>"},{"location":"containers/#step-2-see-running-containers","title":"Step 2: See Running Containers","text":"<pre><code>docker ps\n</code></pre>"},{"location":"containers/#step-3-view-logs","title":"Step 3: View Logs","text":"<pre><code>docker logs my-nginx\n</code></pre>"},{"location":"containers/#step-4-enter-the-container","title":"Step 4: Enter the Container","text":"<pre><code>docker exec -it my-nginx bash\n</code></pre> <p>Look around, then type <code>exit</code> to leave.</p>"},{"location":"containers/#step-5-stop-and-remove-the-container","title":"Step 5: Stop and Remove the Container","text":"<pre><code>docker stop my-nginx\ndocker rm my-nginx\n</code></pre>"},{"location":"containers/#common-mistakes-beginners-make","title":"Common Mistakes Beginners Make","text":""},{"location":"containers/#mistake-1-forgetting-to-stop-before-removing","title":"Mistake 1: Forgetting to Stop Before Removing","text":"<p>\u274c <code>docker rm my-nginx</code> (fails if running) \u2705 <code>docker stop my-nginx</code> then <code>docker rm my-nginx</code></p>"},{"location":"containers/#mistake-2-losing-data","title":"Mistake 2: Losing Data","text":"<p>Containers are temporary. If you delete a container, its data is gone unless you use volumes (covered later).</p>"},{"location":"containers/#mistake-3-confusing-images-and-containers","title":"Mistake 3: Confusing Images and Containers","text":"<ul> <li>Image = Blueprint (unchanging)</li> <li>Container = Running app (can be started/stopped/deleted)</li> </ul>"},{"location":"containers/#quick-reference","title":"Quick Reference","text":"Task Command Example List running containers <code>docker ps</code> - List all containers <code>docker ps -a</code> - Run new container <code>docker run ...</code> <code>docker run -d --name web nginx</code> Stop container <code>docker stop &lt;name&gt;</code> <code>docker stop web</code> Start container <code>docker start &lt;name&gt;</code> <code>docker start web</code> Remove container <code>docker rm &lt;name&gt;</code> <code>docker rm web</code> View logs <code>docker logs &lt;name&gt;</code> <code>docker logs web</code> Enter container shell <code>docker exec -it &lt;name&gt; bash</code> <code>docker exec -it web bash</code>"},{"location":"containers/#key-takeaways","title":"Key Takeaways","text":"<p>\ud83c\udfaf Containers are running apps created from images \ud83c\udfaf You can start, stop, and remove containers anytime \ud83c\udfaf Containers are isolated and portable \ud83c\udfaf Images are blueprints, containers are the real thing</p>"},{"location":"containers/#conclusion","title":"Conclusion","text":"<p>Awesome! Now you know how to run, manage, and explore Docker containers. Containers are the heart of Docker\u2014they let you run any app, anywhere, with just a few commands.</p>"},{"location":"containers/#whats-next","title":"What's Next?","text":"<p>Ready to build your own images? Next, you'll learn about Dockerfiles\u2014the recipes for creating custom images!</p> <ul> <li>Creating Dockerfiles - Build your own images step by step</li> </ul> <p>Let's keep going and become a Docker pro! \ud83d\ude80</p>"},{"location":"dockerfile/","title":"Creating Dockerfiles","text":"<p>A Dockerfile is like a recipe for building your own Docker images. It tells Docker exactly how to set up your application, step by step.</p>"},{"location":"dockerfile/#what-is-a-dockerfile","title":"What Is a Dockerfile?","text":"<p>A Dockerfile is a plain text file with instructions for building a Docker image. Each line in the Dockerfile is a command that adds something to your image.</p> <p>Example:</p> <pre><code>FROM python:3.9\nWORKDIR /app\nCOPY . .\nRUN pip install -r requirements.txt\nCMD [\"python\", \"app.py\"]\n</code></pre>"},{"location":"dockerfile/#basic-dockerfile-instructions","title":"Basic Dockerfile Instructions","text":"<ul> <li>FROM: Start from an existing image (base image)</li> <li>WORKDIR: Set the working directory inside the image</li> <li>COPY: Copy files from your computer into the image</li> <li>RUN: Run a command (like installing packages)</li> <li>CMD: Set the default command to run when the container starts</li> </ul>"},{"location":"dockerfile/#step-by-step-build-your-own-image","title":"Step-by-Step: Build Your Own Image","text":"<p>Let's create a simple Python app and Dockerize it!</p>"},{"location":"dockerfile/#1-create-your-app","title":"1. Create Your App","text":"<p>Make a file called <code>app.py</code>:</p> <pre><code>print(\"Hello from Docker!\")\n</code></pre>"},{"location":"dockerfile/#2-write-a-dockerfile","title":"2. Write a Dockerfile","text":"<pre><code>FROM python:3.9\nWORKDIR /app\nCOPY . .\nCMD [\"python\", \"app.py\"]\n</code></pre>"},{"location":"dockerfile/#3-build-the-image","title":"3. Build the Image","text":"<pre><code>docker build -t my-python-app .\n</code></pre>"},{"location":"dockerfile/#4-run-a-container-from-your-image","title":"4. Run a Container from Your Image","text":"<pre><code>docker run my-python-app\n</code></pre> <p>You should see:  </p> <pre><code>Hello from Docker!\n</code></pre>"},{"location":"dockerfile/#more-useful-dockerfile-instructions","title":"More Useful Dockerfile Instructions","text":"<ul> <li>EXPOSE: Document which ports the app uses (e.g., <code>EXPOSE 80</code>)</li> <li>ENV: Set environment variables (e.g., <code>ENV DEBUG=true</code>)</li> <li>ARG: Define build-time variables</li> </ul>"},{"location":"dockerfile/#tips-for-writing-dockerfiles","title":"Tips for Writing Dockerfiles","text":"<ul> <li>Start with an official base image (like <code>python</code>, <code>node</code>, <code>nginx</code>)</li> <li>Only copy the files you need</li> <li>Use specific versions for base images (avoid <code>latest</code>)</li> <li>Keep your Dockerfile simple and readable</li> </ul>"},{"location":"dockerfile/#common-mistakes","title":"Common Mistakes","text":"<ul> <li>Forgetting to set the working directory (<code>WORKDIR</code>)</li> <li>Not copying all required files</li> <li>Using <code>latest</code> tag for base images (can cause surprises)</li> <li>Not cleaning up temporary files (can make images large)</li> </ul>"},{"location":"dockerfile/#quick-reference","title":"Quick Reference","text":"Instruction What It Does Example FROM Base image <code>FROM node:18</code> WORKDIR Set working directory <code>WORKDIR /app</code> COPY Copy files into image <code>COPY . .</code> RUN Run command during build <code>RUN pip install -r req.txt</code> CMD Default command for container <code>CMD [\"node\", \"index.js\"]</code> EXPOSE Document port <code>EXPOSE 8080</code> ENV Set environment variable <code>ENV NODE_ENV=production</code>"},{"location":"dockerfile/#key-takeaways","title":"Key Takeaways","text":"<p>\ud83c\udfaf Dockerfiles let you create your own images \ud83c\udfaf Each instruction adds a layer to your image \ud83c\udfaf Keep Dockerfiles simple and use official base images \ud83c\udfaf Build and run your images with <code>docker build</code> and <code>docker run</code></p>"},{"location":"dockerfile/#conclusion","title":"Conclusion","text":"<p>Now you know how to write Dockerfiles and build your own images! This is a key skill for packaging and sharing your applications.</p>"},{"location":"dockerfile/#whats-next","title":"What's Next?","text":"<p>Next, you'll learn how to run multi-container applications using Docker Compose. After that, you'll discover how to persist data using Docker Volumes.</p> <ul> <li>Docker Compose - Manage multi-container apps easily</li> <li>Docker Volumes - Store and share data between containers</li> </ul> <p>Keep going\u2014you're becoming a Docker expert! \ud83d\ude80</p>"},{"location":"fun-examples/","title":"Fun Docker Examples","text":"<p>Let's try some cool and fun things you can do with Docker!</p>"},{"location":"fun-examples/#1-run-a-tiny-web-server-in-one-command","title":"1. Run a Tiny Web Server in One Command","text":"<pre><code>docker run -d -p 8080:80 --name hello-web nginx\n</code></pre> <p>Visit http://localhost:8080 and you'll see the nginx welcome page.</p>"},{"location":"fun-examples/#2-try-the-hello-world-container","title":"2. Try the \"Hello World\" Container","text":"<pre><code>docker run hello-world\n</code></pre> <p>Docker will print a welcome message to show everything is working.</p>"},{"location":"fun-examples/#3-launch-an-interactive-python-shell","title":"3. Launch an Interactive Python Shell","text":"<pre><code>docker run -it python:3.9\n</code></pre> <p>You can use Python right inside the container. Type <code>exit()</code> to leave.</p>"},{"location":"fun-examples/#4-run-a-temporary-alpine-linux-shell","title":"4. Run a Temporary Alpine Linux Shell","text":"<pre><code>docker run -it --rm alpine sh\n</code></pre> <p>Try out Linux commands in a super lightweight container.</p>"},{"location":"fun-examples/#5-play-with-fortune-and-cowsay","title":"5. Play With Fortune and Cowsay","text":"<pre><code>docker run --rm docker/whalesay cowsay \"Docker is fun!\"\n</code></pre> <p>See a talking whale in your terminal!</p>"},{"location":"fun-examples/#6-serve-your-current-folder-with-python","title":"6. Serve Your Current Folder With Python","text":"<pre><code>docker run -d -p 8000:8000 -v ${PWD}:/usr/src/app -w /usr/src/app python:3.9 python -m http.server\n</code></pre> <p>Visit http://localhost:8000 to browse your files.</p>"},{"location":"fun-examples/#whats-next","title":"What's Next?","text":"<p>Now that you've had some fun, let's look at advanced Docker topics and best practices to level up your skills!</p> <ul> <li>Best Practices</li> <li>Advanced Topics</li> </ul>"},{"location":"images/","title":"Docker Images","text":"<p>Think of Docker images like recipe cards \ud83d\udccb - they contain all the instructions and ingredients needed to create something delicious (in this case, a running application)!</p>"},{"location":"images/#what-exactly-is-a-docker-image","title":"What Exactly Is a Docker Image?","text":"<p>A Docker image is like a frozen pizza \ud83c\udf55:</p> <ul> <li>It's pre-made with all ingredients included</li> <li>It's packaged and ready to use</li> <li>You can store many in your freezer</li> <li>When you want pizza, you cook it (run it as a container)</li> <li>The original frozen pizza stays unchanged - you can make many pizzas from it!</li> </ul> <p>!!! info \"Key Point\"     Images are templates - they don't do anything by themselves. You need to run them to create containers that actually work!</p>"},{"location":"images/#how-images-work","title":"How Images Work","text":"<pre><code>Image (Recipe) \u2192 docker run \u2192 Container (Actual Running App)\n</code></pre> <p>Example: - <code>nginx</code> image = Instructions for building a web server - <code>nginx</code> container = An actual web server running and serving websites</p>"},{"location":"images/#where-do-images-come-from","title":"Where Do Images Come From?","text":""},{"location":"images/#1-docker-hub-the-app-store-for-docker","title":"1. Docker Hub (The App Store for Docker)","text":"<p>Docker Hub is like Google Play Store, but for Docker images. It has thousands of ready-made images:</p> <ul> <li>nginx - Web server</li> <li>mysql - Database</li> <li>python - Python programming environment</li> <li>wordpress - Website builder</li> <li>redis - Fast database for caching</li> </ul> <p>Visit hub.docker.com to browse!</p>"},{"location":"images/#2-you-build-them-yourself","title":"2. You Build Them Yourself","text":"<p>Later, you'll learn to create your own images using Dockerfiles (like writing your own recipe).</p>"},{"location":"images/#3-private-registries","title":"3. Private Registries","text":"<p>Companies often store their private images in secure registries.</p>"},{"location":"images/#working-with-images","title":"Working with Images","text":""},{"location":"images/#see-what-images-you-have","title":"See What Images You Have","text":"<pre><code>docker images\n</code></pre> <p>Example output:</p> <pre><code>REPOSITORY   TAG       IMAGE ID       CREATED        SIZE\nnginx        latest    a6bd71f48f68   2 weeks ago    187MB\nhello-world  latest    d2c94e258dcb   10 months ago  13.3kB\npython       3.9       1b33c72fae8d   1 month ago    915MB\n</code></pre> <p>What each column means: - REPOSITORY - The image name (like <code>nginx</code>) - TAG - The version (like <code>latest</code>, <code>3.9</code>, <code>v1.2</code>) - IMAGE ID - Unique identifier for this image - CREATED - When this image was built - SIZE - How much space it takes</p>"},{"location":"images/#download-an-image-without-running-it","title":"Download an Image (Without Running It)","text":"<pre><code>docker pull nginx\n</code></pre> <p>This downloads the nginx image but doesn't run it yet. It's like buying a frozen pizza but not cooking it.</p>"},{"location":"images/#download-a-specific-version","title":"Download a Specific Version","text":"<pre><code>docker pull python:3.9\n</code></pre> <p>The <code>:3.9</code> part is called a tag - it specifies which version you want.</p> <p>!!! tip \"Image Tags Explained\"     - <code>nginx:latest</code> = The newest version (default)     - <code>python:3.9</code> = Python version 3.9 specifically     - <code>mysql:8.0</code> = MySQL version 8.0     - If you don't specify a tag, Docker assumes <code>:latest</code></p>"},{"location":"images/#remove-an-image","title":"Remove an Image","text":"<pre><code>docker rmi nginx\n</code></pre> <p>Or using the image ID:</p> <pre><code>docker rmi a6bd71f48f68\n</code></pre> <p>!!! warning \"Can't remove images being used\"     If any containers are using an image, you can't remove it. Stop and remove those containers first!</p>"},{"location":"images/#lets-practice-with-real-examples","title":"Let's Practice with Real Examples","text":""},{"location":"images/#example-1-running-different-web-servers","title":"Example 1: Running Different Web Servers","text":"<p>Try Apache web server:</p> <pre><code>docker run -d -p 8080:80 --name apache-server httpd\n</code></pre> <p>Visit <code>http://localhost:8080</code> - you'll see \"It works!\" page.</p> <p>Try nginx web server:</p> <pre><code>docker run -d -p 8081:80 --name nginx-server nginx\n</code></pre> <p>Visit <code>http://localhost:8081</code> - you'll see nginx welcome page.</p> <p>Now you have TWO web servers running from different images!</p>"},{"location":"images/#example-2-running-a-database","title":"Example 2: Running a Database","text":"<pre><code>docker run -d --name my-database -e MYSQL_ROOT_PASSWORD=mypassword mysql\n</code></pre> <p>What's happening: - <code>mysql</code> image contains a complete MySQL database - <code>-e MYSQL_ROOT_PASSWORD=mypassword</code> sets up the database password - The database is now running in the background!</p>"},{"location":"images/#example-3-interactive-python-environment","title":"Example 3: Interactive Python Environment","text":"<pre><code>docker run -it python:3.9\n</code></pre> <p>What's happening: - <code>-it</code> means \"interactive terminal\" - You get a Python prompt inside the container - Type <code>exit()</code> to leave</p>"},{"location":"images/#understanding-image-names-and-tags","title":"Understanding Image Names and Tags","text":""},{"location":"images/#full-image-name-format","title":"Full Image Name Format","text":"<pre><code>registry/username/repository:tag\n</code></pre> <p>Examples: - <code>nginx:latest</code> = <code>docker.io/library/nginx:latest</code> (full name) - <code>mysql:8.0</code> = Official MySQL version 8.0 - <code>node:16-alpine</code> = Node.js version 16 on Alpine Linux (smaller size)</p>"},{"location":"images/#common-tags-youll-see","title":"Common Tags You'll See","text":"<ul> <li>latest - The newest stable version</li> <li>alpine - Smaller, lightweight version (based on Alpine Linux)</li> <li>slim - Smaller version with fewer features</li> <li>Version numbers - <code>3.9</code>, <code>8.0</code>, <code>v1.2.3</code> (specific versions)</li> </ul> <p>!!! tip \"Pro Tip: Avoid 'latest' in production\"     For real projects, always use specific version tags like <code>nginx:1.21</code> instead of <code>nginx:latest</code>. This prevents surprises when newer versions come out!</p>"},{"location":"images/#image-management-commands","title":"Image Management Commands","text":""},{"location":"images/#see-detailed-information-about-an-image","title":"See Detailed Information About an Image","text":"<pre><code>docker inspect nginx\n</code></pre> <p>This shows you everything about the image - like reading the nutrition label on food!</p>"},{"location":"images/#search-for-images-on-docker-hub","title":"Search for Images on Docker Hub","text":"<pre><code>docker search python\n</code></pre>"},{"location":"images/#see-image-history-how-it-was-built","title":"See Image History (How It Was Built)","text":"<pre><code>docker history nginx\n</code></pre> <p>Shows all the layers that make up the image.</p>"},{"location":"images/#clean-up-unused-images","title":"Clean Up Unused Images","text":"<pre><code># Remove unused images\ndocker image prune\n\n# Remove ALL unused images (be careful!)\ndocker image prune -a\n</code></pre>"},{"location":"images/#hands-on-practice-exercise","title":"Hands-On Practice Exercise","text":"<p>Let's put it all together! Follow these steps:</p>"},{"location":"images/#step-1-download-multiple-images","title":"Step 1: Download Multiple Images","text":"<pre><code>docker pull nginx\ndocker pull python:3.9\ndocker pull redis\n</code></pre>"},{"location":"images/#step-2-check-what-you-downloaded","title":"Step 2: Check What You Downloaded","text":"<pre><code>docker images\n</code></pre> <p>You should see all three images listed.</p>"},{"location":"images/#step-3-run-containers-from-each-image","title":"Step 3: Run Containers from Each Image","text":"<pre><code># Web server\ndocker run -d -p 8080:80 --name web nginx\n\n# Python environment (interactive)\ndocker run -it --name python-env python:3.9\n\n# (Type exit() to leave Python, then continue)\n\n# Redis database\ndocker run -d --name cache redis\n</code></pre>"},{"location":"images/#step-4-see-everything-running","title":"Step 4: See Everything Running","text":"<pre><code>docker ps\n</code></pre>"},{"location":"images/#step-5-clean-up","title":"Step 5: Clean Up","text":"<pre><code># Stop all containers\ndocker stop web python-env cache\n\n# Remove all containers\ndocker rm web python-env cache\n\n# Remove images if you want\ndocker rmi nginx python:3.9 redis\n</code></pre>"},{"location":"images/#common-mistakes-beginners-make","title":"Common Mistakes Beginners Make","text":""},{"location":"images/#mistake-1-confusing-images-and-containers","title":"Mistake 1: Confusing Images and Containers","text":"<p>\u274c Wrong thinking: \"I deleted the nginx container, now nginx is gone\" \u2705 Correct: The nginx image is still there, you can create new containers anytime</p>"},{"location":"images/#mistake-2-using-latest-tag-everywhere","title":"Mistake 2: Using 'latest' Tag Everywhere","text":"<p>\u274c Risky: <code>docker run mysql</code> (gets whatever version is \"latest\") \u2705 Better: <code>docker run mysql:8.0</code> (gets specific version you tested)</p>"},{"location":"images/#mistake-3-not-understanding-layers","title":"Mistake 3: Not Understanding Layers","text":"<p>Images are built in layers like a cake: - Base layer (operating system) - App layer (your application) - Config layer (settings)</p> <p>This makes images efficient - multiple images can share the same base layers!</p>"},{"location":"images/#quick-reference","title":"Quick Reference","text":"Task Command Example List images <code>docker images</code> - Download image <code>docker pull &lt;image&gt;</code> <code>docker pull nginx</code> Download specific version <code>docker pull &lt;image&gt;:&lt;tag&gt;</code> <code>docker pull python:3.9</code> Remove image <code>docker rmi &lt;image&gt;</code> <code>docker rmi nginx</code> Search images <code>docker search &lt;term&gt;</code> <code>docker search python</code> Image details <code>docker inspect &lt;image&gt;</code> <code>docker inspect nginx</code> Image history <code>docker history &lt;image&gt;</code> <code>docker history nginx</code> Clean unused images <code>docker image prune</code> -"},{"location":"images/#key-takeaways","title":"Key Takeaways","text":"<p>\ud83c\udfaf Images are blueprints - they contain everything needed to run an application</p> <p>\ud83c\udfaf Containers are instances - running copies created from images</p> <p>\ud83c\udfaf One image, many containers - you can run multiple containers from the same image</p> <p>\ud83c\udfaf Images have versions - use specific tags for predictable results</p> <p>\ud83c\udfaf Docker Hub is your friend - thousands of pre-built images available</p>"},{"location":"images/#conclusion","title":"Conclusion","text":"<p>Congratulations! You now understand Docker images - the building blocks of everything in Docker. You've learned how to find, download, run, and manage images. </p> <p>Think of images as your toolkit - once you understand how to use them, you can run almost any application without worrying about installation headaches!</p>"},{"location":"images/#whats-next","title":"What's Next?","text":"<p>Now that you're comfortable with images, it's time to dive deeper into containers - the running instances of your images. You'll learn:</p> <ul> <li>Working with Containers - Advanced container management, connecting to running containers, environment variables, and networking</li> <li>Creating Dockerfiles - How to build your own custom images from scratch</li> </ul> <p>Ready to become a container master? Let's keep going! \ud83d\ude80</p>"},{"location":"installation/","title":"Installing Docker","text":"<p>Welcome! Before we start playing with containers, we need Docker installed on your machine. Don't worry - it's easier than you think!</p>"},{"location":"installation/#quick-check-is-docker-already-installed","title":"Quick Check: Is Docker Already Installed?","text":"<p>First, let's see if Docker is already on your computer. Open your terminal and type:</p> <p>!!! tip \"Opening Terminal\"     - Windows: Press <code>Win + R</code>, type <code>cmd</code>, and press Enter     - Mac: Press <code>Cmd + Space</code>, type <code>terminal</code>, and press Enter     - Linux: Press <code>Ctrl + Alt + T</code></p> <pre><code>docker --version\n</code></pre> <p>If you see something like this:</p> <pre><code>Docker version 27.3.1, build ce12230\n</code></pre> <p>\ud83c\udf89 Great! Docker is already installed. Skip to Test Your Installation.</p> <p>If you get an error like <code>command not found</code>, keep reading!</p>"},{"location":"installation/#installing-docker-desktop","title":"Installing Docker Desktop","text":""},{"location":"installation/#for-windows-1011","title":"For Windows 10/11","text":"<p>Requirements:</p> <ul> <li>Windows 10 64-bit (Pro, Enterprise, or Education) Build 19041 or higher</li> <li>OR Windows 11 64-bit (any edition)</li> <li>WSL 2 feature enabled</li> <li>Virtualization enabled in BIOS</li> </ul> <p>Step-by-step:</p> <ol> <li>Download Docker Desktop:</li> <li>Go to docker.com/products/docker-desktop</li> <li> <p>Click \"Download for Windows\"</p> </li> <li> <p>Run the installer:</p> </li> <li>Double-click the downloaded <code>.exe</code> file</li> <li>Check \"Enable WSL 2 Windows Features\" during installation</li> <li> <p>Check \"Add shortcut to desktop\" (optional)</p> </li> <li> <p>Restart your computer when prompted</p> </li> <li> <p>Start Docker Desktop:</p> </li> <li>Look for the Docker whale icon in your system tray</li> <li> <p>If it's not running, search for \"Docker Desktop\" and open it</p> </li> <li> <p>Accept the license agreement when it appears</p> </li> </ol> <p>!!! warning \"Windows Troubleshooting\"     If you get a \"WSL 2 installation is incomplete\" error, run this in PowerShell as Administrator:     <code>powershell     wsl --install</code>     Then restart and try again.</p>"},{"location":"installation/#for-mac","title":"For Mac","text":"<p>Requirements:</p> <ul> <li>macOS 10.15 or newer</li> <li>At least 4GB RAM</li> </ul> <p>Step-by-step:</p> <ol> <li>Download Docker Desktop:</li> <li>Go to docker.com/products/docker-desktop</li> <li> <p>Choose your Mac type:</p> <ul> <li>Intel Mac: Download \"Mac with Intel chip\"</li> <li>Apple Silicon (M1/M2/M3): Download \"Mac with Apple chip\"</li> </ul> </li> <li> <p>Install Docker:</p> </li> <li>Open the downloaded <code>.dmg</code> file</li> <li> <p>Drag the Docker icon to your Applications folder</p> </li> <li> <p>Launch Docker Desktop:</p> </li> <li>Go to Applications and double-click Docker</li> <li> <p>You'll see a whale icon in your menu bar when it's running</p> </li> <li> <p>Grant permissions when macOS asks (Docker needs system access)</p> </li> </ol> <p>!!! note \"Mac Note\"     The first time you run Docker, it might take a few minutes to start up. Be patient!</p>"},{"location":"installation/#for-linux-ubuntudebian","title":"For Linux (Ubuntu/Debian)","text":"<p>Option 1: Easy Script (Recommended for beginners)</p> <pre><code>curl -fsSL https://get.docker.com -o get-docker.sh\nsudo sh get-docker.sh\n</code></pre> <p>Option 2: Manual Installation</p> <pre><code># Update package list\nsudo apt update\n\n# Install prerequisites\nsudo apt install apt-transport-https ca-certificates curl gnupg lsb-release\n\n# Add Docker's official GPG key\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg\n\n# Add Docker repository\necho \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null\n\n# Update package list again\nsudo apt update\n\n# Install Docker\nsudo apt install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n</code></pre> <p>Start Docker service:</p> <pre><code>sudo systemctl start docker\nsudo systemctl enable docker\n</code></pre> <p>Add your user to docker group (so you don't need sudo):</p> <pre><code>sudo usermod -aG docker $USER\n</code></pre> <p>!!! important \"Linux Important\"     After adding yourself to the docker group, log out and log back in for this to take effect!</p>"},{"location":"installation/#test-your-installation","title":"Test Your Installation","text":"<p>Now let's make sure everything works! Run this command:</p> <pre><code>docker --version\n</code></pre> <p>You should see something like:</p> <pre><code>Docker version 27.3.1, build ce12230\n</code></pre> <p>Next, let's run your first container:</p> <pre><code>docker run hello-world\n</code></pre> <p>If everything is working, you'll see a message like this:</p> <pre><code>Hello from Docker!\nThis message shows that your installation appears to be working correctly.\n\nTo generate this message, Docker took the following steps:\n 1. The Docker client contacted the Docker daemon.\n 2. The Docker daemon pulled the \"hello-world\" image from the Docker Hub.\n 3. The Docker daemon created a new container from that image which runs the\n    executable that produces the output you are currently reading.\n 4. The Docker daemon streamed that output to the Docker client, which sent it\n    to your terminal.\n\nTo try something more ambitious, you can run an Ubuntu container with:\n $ docker run -it ubuntu bash\n</code></pre> <p>\ud83c\udf89 Congratulations! Docker is working perfectly!</p>"},{"location":"installation/#common-issues-solutions","title":"Common Issues &amp; Solutions","text":""},{"location":"installation/#docker-daemon-is-not-running","title":"\"Docker daemon is not running\"","text":"<p>Windows/Mac: Make sure Docker Desktop is running (look for the whale icon in system tray/menu bar)</p> <p>Linux: Start the service:</p> <pre><code>sudo systemctl start docker\n</code></pre>"},{"location":"installation/#permission-denied-linux-only","title":"\"Permission denied\" (Linux only)","text":"<p>Make sure you added your user to the docker group:</p> <pre><code>sudo usermod -aG docker $USER\n</code></pre> <p>Then log out and log back in, or use <code>sudo</code> before docker commands.</p>"},{"location":"installation/#wsl-2-installation-incomplete-windows","title":"\"WSL 2 installation incomplete\" (Windows)","text":"<p>Open PowerShell as Administrator and run:</p> <pre><code>wsl --install\n</code></pre> <p>Then restart your computer.</p>"},{"location":"installation/#docker-desktop-wont-start-mac","title":"Docker Desktop won't start (Mac)","text":"<ul> <li>Check if you have enough disk space (Docker needs at least 2GB)</li> <li>Try restarting your Mac</li> <li>Make sure you're running a supported macOS version (10.15+)</li> </ul>"},{"location":"installation/#virtualization-not-enabled-windows","title":"\"Virtualization not enabled\" (Windows)","text":"<p>You need to enable virtualization in your BIOS/UEFI settings:</p> <ol> <li>Restart your computer</li> <li>Enter BIOS (usually F2, F12, or Del during startup)</li> <li>Look for \"Virtualization Technology\" or \"Intel VT-x/AMD-V\"</li> <li>Enable it and save changes</li> </ol>"},{"location":"installation/#understanding-what-you-just-installed","title":"Understanding What You Just Installed","text":"<p>When you installed Docker, you actually got several components:</p> <ul> <li>Docker Engine: The core that runs containers</li> <li>Docker CLI: The command-line interface you'll use</li> <li>Docker Desktop: The graphical interface (Windows/Mac only)</li> <li>Docker Compose: Tool for running multi-container applications</li> </ul> <p>!!! info \"Docker Desktop vs Docker Engine\"     - Docker Desktop = Easy GUI + Docker Engine (Windows/Mac)     - Docker Engine = Just the core Docker (Linux)     - Both work the same way from the command line!</p>"},{"location":"installation/#resource-usage","title":"Resource Usage","text":"<p>Docker will use some of your computer's resources:</p> <ul> <li>RAM: Usually 2-4GB by default</li> <li>Disk: Space for images and containers (starts small, grows as needed)</li> <li>CPU: Only when containers are running</li> </ul> <p>You can adjust these settings in Docker Desktop preferences if needed.</p>"},{"location":"installation/#whats-next","title":"What's Next?","text":"<p>Now that Docker is installed, you're ready to start learning! Here's what we'll cover:</p> <ol> <li>Docker Basics - Understanding images and containers</li> <li>Building Images - Creating your own Docker images</li> <li>Your First Container - Running and managing containers</li> </ol> <p>!!! success \"You're Ready!\"     Docker is now installed and working on your machine. Let's move on to learning the basics!</p>"},{"location":"volumes/","title":"Docker Volumes","text":"<p>Docker volumes let you store data outside your containers. This means your data stays safe even if you delete or recreate containers!</p>"},{"location":"volumes/#why-use-volumes","title":"Why Use Volumes?","text":"<ul> <li>Persist data (like databases, uploads, logs)</li> <li>Share data between containers</li> <li>Keep your data safe when containers are removed or updated</li> </ul>"},{"location":"volumes/#how-to-use-volumes","title":"How to Use Volumes","text":""},{"location":"volumes/#1-named-volumes","title":"1. Named Volumes","text":"<p>Docker manages these for you.</p> <pre><code>docker run -d --name db -v mydata:/var/lib/mysql mysql\n</code></pre> <ul> <li><code>mydata</code> is the volume name</li> <li><code>/var/lib/mysql</code> is the path inside the container</li> </ul>"},{"location":"volumes/#2-bind-mounts","title":"2. Bind Mounts","text":"<p>Use a specific folder on your computer.</p> <pre><code>docker run -d -v /path/on/host:/data busybox\n</code></pre>"},{"location":"volumes/#hands-on-try-volumes","title":"Hands-On: Try Volumes","text":"<ol> <li> <p>Start a container with a volume: <code>bash     docker run -d --name my-redis -v redisdata:/data redis</code></p> </li> <li> <p>Write some data (from inside the container): <code>bash     docker exec -it my-redis redis-cli     set mykey hello     exit</code></p> </li> <li> <p>Remove the container: <code>bash     docker rm -f my-redis</code></p> </li> <li> <p>Start a new container with the same volume: <code>bash     docker run -d --name new-redis -v redisdata:/data redis</code></p> </li> <li> <p>Check your data is still there!</p> </li> </ol>"},{"location":"volumes/#useful-volume-commands","title":"Useful Volume Commands","text":"<ul> <li>List volumes: <code>bash   docker volume ls</code></li> <li>Inspect a volume: <code>bash   docker volume inspect mydata</code></li> <li>Remove a volume: <code>bash   docker volume rm mydata</code></li> </ul>"},{"location":"volumes/#common-mistakes","title":"Common Mistakes","text":"<ul> <li>Not using volumes for important data (risk of data loss)</li> <li>Confusing named volumes and bind mounts</li> <li>Forgetting to clean up unused volumes</li> </ul>"},{"location":"volumes/#quick-reference","title":"Quick Reference","text":"Task Command Create volume <code>docker volume create mydata</code> Use volume <code>-v mydata:/path/in/container</code> List volumes <code>docker volume ls</code> Remove volume <code>docker volume rm mydata</code>"},{"location":"volumes/#key-takeaways","title":"Key Takeaways","text":"<p>\ud83c\udfaf Volumes keep your data safe \ud83c\udfaf Use volumes for databases and important files \ud83c\udfaf You can share volumes between containers</p>"},{"location":"volumes/#whats-next","title":"What's Next?","text":"<p>Next, you'll learn about best practices for working with Docker, and see some fun examples to try out!</p> <ul> <li>Best Practices - Tips for real-world Docker use</li> <li>Fun Examples - Cool things you can do with Docker</li> </ul> <p>You're almost at the finish line! \ud83d\ude80</p>"}]}
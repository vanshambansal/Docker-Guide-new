{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Docker Beginner Guide \ud83d\udc33","text":"<p>Learn Docker from zero to hero with hands-on examples, beginner-friendly explanations, and real-world projects that make sense!</p>"},{"location":"#why-learn-docker","title":"Why Learn Docker?","text":"<p>Imagine you're a chef who creates the perfect recipe at home. It tastes amazing! But when you try to make it at your friend's kitchen, it tastes completely different. Different oven, different ingredients, different results.</p> <p>Docker solves this once and for all.</p> <p>Docker is like having a portable kitchen that you can take anywhere. Your recipe (code) will work the same whether you're cooking at home, at your friend's place, or in a restaurant kitchen.</p> <p>Real-World Example: The Pizza Shop Problem</p> <p>Without Docker: - Your Node.js app works on your laptop - Teammate has different Node.js version - App crashes, takes 3 hours to debug</p> <p>With Docker: - Package everything in a container - Teammate runs: <code>docker run your-pizza-app</code> - Works instantly, exactly like your machine</p>"},{"location":"#what-actually-is-a-container","title":"What Actually IS a Container?","text":"<p>Think of containers like shipping containers for software:</p> <p>\ud83c\udfe0 Traditional Development - Furniture scattered everywhere - Hard to move at once - Different layouts - Messy and unpredictable</p> <p>\ud83d\udce6 Docker Container - Everything neatly packed - Moves anywhere instantly - Standard size and shape - Predictable and reliable</p>"},{"location":"#mind-blowing-example","title":"Mind-Blowing Example","text":"<p>Want a complete WordPress website?</p> Without DockerWith Docker <pre><code># 2+ hours of setup\nInstall PHP (20 minutes)\nInstall MySQL (15 minutes)\nConfigure Apache (30 minutes)\nDownload WordPress (5 minutes)\nConfigure everything (60+ minutes)\nDebug issues (\u221e minutes)\n</code></pre> <pre><code># 30 seconds\ndocker run -p 8080:80 wordpress\n</code></pre> <p>Website running at http://localhost:8080 \u2728</p>"},{"location":"#your-learning-journey","title":"Your Learning Journey","text":"<ul> <li> <p>\ud83d\ude80 Getting Started</p> <p>Build: Your first \"Hello World\" container</p> <p>Learn: Why developers are obsessed with Docker</p> <p>Example: Run Python web server without installing Python</p> <p>\u23f1\ufe0f Time: 30 minutes</p> </li> <li> <p>\ud83c\udfd7\ufe0f Core Concepts</p> <p>Build: Custom web application in container</p> <p>Learn: Create your own container images</p> <p>Example: Package your portfolio website</p> <p>\u23f1\ufe0f Time: 2-3 hours</p> </li> <li> <p>\ud83d\udee0\ufe0f Working with Docker</p> <p>Build: Complete blog with database and caching</p> <p>Learn: Connect multiple containers together</p> <p>Example: Twitter-like app with separate services</p> <p>\u23f1\ufe0f Time: 1 weekend</p> </li> <li> <p>\ud83d\udcda Practical Guides</p> <p>Build: Production-ready applications</p> <p>Learn: Best practices and security secrets</p> <p>Example: App handling 1000+ users</p> <p>\u23f1\ufe0f Time: 1 week</p> </li> </ul>"},{"location":"#choose-your-path","title":"Choose Your Path","text":"I Just Want to Understand DockerI Want to Use Docker for ProjectsI Need This for Work <p>\ud83c\udfaf Goal: Stop being confused when people mention containers</p> <p>\ud83d\udccb What you'll do:</p> <ul> <li> Install Docker (10 minutes)</li> <li> Run someone else's container (5 minutes)  </li> <li> See a web application appear instantly</li> <li> Understand basic concepts</li> </ul> <p>\ud83d\udee4\ufe0f Path: Installation \u2192 First Steps</p> <p>\u23f1\ufe0f Time: 30 minutes \ud83d\udcad Result: \"Oh wow, I get it now!\"</p> <p>\ud83c\udfaf Goal: Make your development life easier</p> <p>\ud83d\udccb What you'll do:</p> <ul> <li> Build containers for your own code</li> <li> Never worry about \"works on my machine\" again</li> <li> Set up databases instantly</li> <li> Share projects easily</li> </ul> <p>\ud83d\udee4\ufe0f Path: Understanding + Basics \u2192 Build Images \u2192 Multi-container Apps</p> <p>\u23f1\ufe0f Time: 1 weekend \ud83d\udcad Result: \"This saves me hours every week!\"</p> <p>\ud83c\udfaf Goal: Deploy real applications people use</p> <p>\ud83d\udccb What you'll do:</p> <ul> <li> Build production-ready containers</li> <li> Handle databases and persistent data  </li> <li> Deploy applications that don't crash</li> <li> Learn senior engineer secrets</li> </ul> <p>\ud83d\udee4\ufe0f Path: Projects + Best Practices \u2192 Production</p> <p>\u23f1\ufe0f Time: 2-3 weeks \ud83d\udcad Result: \"I'm confident deploying anything!\"</p>"},{"location":"#quick-demo-see-docker-magic-in-2-minutes","title":"Quick Demo: See Docker Magic in 2 Minutes","text":"<p>Mind-Blowing Database Example</p> <p>Let's run a complete database server without installing anything:</p> <p>Step 1: Open your terminal</p> <p>Step 2: Run this magic command: <pre><code>docker run -p 5432:5432 -e POSTGRES_PASSWORD=mysecret postgres\n</code></pre></p> <p>What just happened? - \u2705 Downloaded complete PostgreSQL database server - \u2705 Started it on your computer - \u2705 Made it accessible on port 5432 - \u2705 Set password to \"mysecret\"</p> <p>Step 3: You now have enterprise-grade database software running!</p> <p>Step 4: Stop when done: <code>Ctrl+C</code></p>"},{"location":"#why-developers-love-docker","title":"Why Developers Love Docker","text":"<p>Real Developer Testimonials</p> <p>\"It Solved My Biggest Pain Point\" \"I used to spend 2-3 hours helping new team members set up development environments. Now they run one Docker command and code in 5 minutes.\" \u2014 Sarah, Senior Developer</p> <p>\"My Apps Actually Work in Production\" \"Before Docker, my code worked locally but broke when deployed. Now I develop in the exact same environment that runs in production.\" \u2014 Mike, Full-Stack Developer</p>"},{"location":"#what-makes-this-guide-different","title":"What Makes This Guide Different","text":""},{"location":"#built-for-your-brain","title":"\ud83e\udde0 Built for Your Brain","text":"<ul> <li>Start with \"why\" before \"how\"</li> <li>Use analogies that click instantly</li> <li>Show real results immediately</li> </ul>"},{"location":"#practical-focus","title":"\ud83c\udfaf Practical Focus","text":"<ul> <li>Every example solves real problems</li> <li>Copy-paste friendly commands</li> <li>Build things you'll actually use</li> </ul>"},{"location":"#learn-by-building","title":"\ud83d\udd27 Learn by Building","text":"<ul> <li>Start simple, build complexity</li> <li>Create portfolio-worthy projects</li> <li>Get job-ready skills</li> </ul>"},{"location":"#real-world-ready","title":"\ud83d\udea8 Real-World Ready","text":"<ul> <li>Learn from production mistakes</li> <li>Security and best practices</li> <li>Interview preparation</li> </ul>"},{"location":"#success-stories","title":"Success Stories","text":"<ul> <li> <p>Emma (Marketing)</p> <p>Built a blog with Docker containers for WordPress. Can move between hosting providers in minutes.</p> </li> <li> <p>James (Startup Founder)</p> <p>Used Docker to launch startup MVP quickly. Packages entire app and deploys to any cloud provider.</p> </li> <li> <p>Lisa (Student)</p> <p>Created containers for all coding projects. Shows them to employers without setup hassles.</p> </li> </ul>"},{"location":"#are-you-ready","title":"Are You Ready?","text":""},{"location":"#youre-ready-if","title":"\u2705 You're Ready If:","text":"<ul> <li>Can open terminal/command prompt</li> <li>Willing to experiment and learn from mistakes</li> <li>Want to solve real development problems</li> </ul>"},{"location":"#dont-worry-if","title":"\ud83d\udca1 Don't Worry If:","text":"<ul> <li>Never used containers before (that's why you're here!)</li> <li>Think Docker sounds complicated (it's simpler than you think)</li> <li>Haven't deployed to production yet</li> </ul>"},{"location":"#start-your-journey","title":"Start Your Journey","text":"<ul> <li> <p>\ud83d\ude80 Show Me the Magic</p> <p>Skip theory. Run containers and see Docker work immediately.</p> <p>Quick Demo \u2192</p> </li> <li> <p>\ud83d\udcda I Want to Understand First</p> <p>Start with concepts and understand containers.</p> <p>Learn Basics \u2192</p> </li> <li> <p>\ud83d\udee0\ufe0f I Have a Project</p> <p>Jump to practical examples and build something real.</p> <p>Build Something \u2192</p> </li> <li> <p>\u26a1 I Need This for Work</p> <p>Focus on production-ready skills and best practices.</p> <p>Professional Skills \u2192</p> </li> </ul>"},{"location":"#complete-learning-roadmap","title":"Complete Learning Roadmap","text":"Section What You'll Build Time Outcome \ud83d\ude80 Getting Started First \"Hello World\" container 1-2 hours Understand basics, see results \ud83e\uddf1 Core Concepts Custom web app container 3-4 hours Package your own applications \ud83d\udd27 Working with Docker Multi-container blog 6-8 hours Build connected systems \ud83c\udfaf Practical Guides Production applications 4-6 hours Professional practices \ud83c\udfc6 Advanced Topics Enterprise systems 8-12 hours Master advanced techniques"},{"location":"#frequently-asked-questions","title":"Frequently Asked Questions","text":"How long does it really take to learn Docker? <p>Basic competency: 1-2 days of focused learning Professional skills: 1-2 weeks with our structured approach Advanced mastery: 1-2 months of regular practice</p> <p>Most developers see immediate benefits within hours of starting.</p> Do I need programming experience? <p>Basic command-line comfort helps, but we teach everything from scratch. If you can copy-paste commands and follow instructions, you can master Docker.</p> Will this prepare me for job interviews? <p>Absolutely. Our curriculum covers real-world scenarios and industry best practices. Many students land DevOps and senior developer roles after completing this guide.</p> Is Docker just a trend or here to stay? <p>Docker containers are the foundation of modern software. Major cloud platforms, CI/CD systems, and development workflows are built around containers. This skill will remain valuable for decades.</p> What if I get stuck or need help? <p>Every section includes troubleshooting guides, and our community resources connect you with thousands of helpful developers.</p> <p>Transform How You Build Software</p> <p>Total time: 2-3 weeks casual learning End result: Become the Docker expert your team relies on</p> <p>Ready to join millions of happy developers? Let's dive in! \ud83d\ude80</p>"},{"location":"advanced/","title":"Advanced Docker Topics","text":"<p>You've mastered the fundamentals - now it's time to take your Docker skills to the next level. This section covers production-ready techniques, optimization strategies, and advanced patterns used by experienced developers and DevOps teams.</p>"},{"location":"advanced/#prerequisites","title":"Prerequisites","text":"<p>Before diving into advanced topics, ensure you're comfortable with:</p> <ul> <li>Creating and managing containers</li> <li>Writing Dockerfiles for custom images</li> <li>Using Docker Compose for multi-container applications</li> <li>Understanding volumes and networks</li> <li>Basic Docker debugging and troubleshooting</li> </ul> <p>If you need to review any of these concepts, check our Core Concepts and Working with Docker sections.</p>"},{"location":"advanced/#what-youll-learn","title":"What You'll Learn","text":"<p>This section focuses on production-ready Docker skills that separate beginners from professionals:</p>"},{"location":"advanced/#build-optimization","title":"Build Optimization","text":"<ul> <li>Multi-stage builds for smaller, more secure images</li> <li>Layer caching strategies</li> <li>Build contexts and .dockerignore best practices</li> </ul>"},{"location":"advanced/#production-deployment","title":"Production Deployment","text":"<ul> <li>Security hardening techniques</li> <li>Health checks and monitoring</li> <li>Logging and debugging in production environments</li> </ul>"},{"location":"advanced/#performance-optimization","title":"Performance Optimization","text":"<ul> <li>Container resource management</li> <li>Image size reduction techniques</li> <li>Runtime performance tuning</li> </ul>"},{"location":"advanced/#learning-path","title":"Learning Path","text":"<p>These topics build on each other, so following the suggested order will give you the best learning experience:</p>"},{"location":"advanced/#1-multi-stage-builds","title":"1. Multi-stage Builds","text":"<p>Focus: Creating optimized Docker images</p> <p>You'll learn: - Why multi-stage builds matter for production - How to separate build and runtime environments - Techniques for minimizing image size - Real-world examples with different programming languages</p> <p>Time: 30-45 minutes</p>"},{"location":"advanced/#2-production-deployment","title":"2. Production Deployment","text":"<p>Focus: Running Docker containers safely in production</p> <p>You'll learn: - Security best practices and container hardening - Health checks and monitoring strategies - Logging and debugging techniques - Environment-specific configurations</p> <p>Time: 45-60 minutes</p>"},{"location":"advanced/#3-performance-optimization","title":"3. Performance Optimization","text":"<p>Focus: Making your containers run efficiently</p> <p>You'll learn: - Resource constraints and limits - Image optimization techniques - Runtime performance tuning - Monitoring and profiling containers</p> <p>Time: 30-45 minutes</p>"},{"location":"advanced/#when-to-apply-advanced-techniques","title":"When to Apply Advanced Techniques","text":""},{"location":"advanced/#multi-stage-builds","title":"Multi-stage Builds","text":"<p>Use when: - Building applications with large build dependencies - Creating production images from source code - Need to minimize final image size - Security requires removing build tools from final image</p>"},{"location":"advanced/#production-hardening","title":"Production Hardening","text":"<p>Use when: - Deploying to production environments - Handling sensitive data or credentials - Need reliable monitoring and logging - Scaling beyond single-host deployments</p>"},{"location":"advanced/#performance-optimization_1","title":"Performance Optimization","text":"<p>Use when: - Containers are resource-constrained - Application performance is critical - Running at scale with many containers - Optimizing costs in cloud environments</p>"},{"location":"advanced/#advanced-topics-overview","title":"Advanced Topics Overview","text":""},{"location":"advanced/#security-considerations","title":"Security Considerations","text":"<p>Production Docker deployments require careful attention to: - Running containers as non-root users - Scanning images for vulnerabilities - Managing secrets securely - Network security and isolation</p>"},{"location":"advanced/#monitoring-and-observability","title":"Monitoring and Observability","text":"<p>Professional Docker deployments include: - Container health checks - Application and infrastructure monitoring - Centralized logging - Performance metrics collection</p>"},{"location":"advanced/#scalability-patterns","title":"Scalability Patterns","text":"<p>Advanced container orchestration involves: - Resource management and limits - Auto-scaling based on demand - Load balancing across containers - Service discovery mechanisms</p>"},{"location":"advanced/#real-world-application","title":"Real-World Application","text":"<p>The techniques in this section address common production challenges:</p> <p>Challenge: \"Our Docker images are too large and slow to deploy\" Solution: Multi-stage builds and image optimization</p> <p>Challenge: \"We can't debug issues in production containers\" Solution: Proper logging, monitoring, and debugging practices</p> <p>Challenge: \"Our containers use too many resources\" Solution: Resource limits, performance tuning, and optimization</p> <p>Challenge: \"We're worried about container security\" Solution: Security hardening and best practices</p>"},{"location":"advanced/#tools-and-technologies","title":"Tools and Technologies","text":"<p>Throughout this section, you'll work with:</p> <ul> <li>Docker BuildKit - Advanced build engine</li> <li>Docker Scout - Security scanning</li> <li>Health check mechanisms - Container monitoring</li> <li>Multi-platform builds - Cross-architecture images</li> <li>Production registries - Secure image distribution</li> </ul>"},{"location":"advanced/#success-metrics","title":"Success Metrics","text":"<p>After completing this section, you should be able to:</p> <ul> <li>Build production-ready Docker images under 100MB for typical applications</li> <li>Implement comprehensive health checking and monitoring</li> <li>Debug container issues in production environments</li> <li>Optimize container resource usage by 30-50%</li> <li>Follow security best practices for container deployment</li> </ul>"},{"location":"advanced/#getting-started","title":"Getting Started","text":"<p>Ready to level up your Docker skills? Choose your starting point:</p> <ul> <li> <p>\ud83c\udfd7\ufe0f Optimize Your Builds</p> <p>Learn multi-stage builds for faster, smaller images.</p> <p>Multi-stage Builds \u2192</p> </li> <li> <p>\ud83d\udd12 Production Ready</p> <p>Secure and monitor your containers for production.</p> <p>Production Tips \u2192</p> </li> <li> <p>\u26a1 Performance Focus</p> <p>Optimize containers for speed and efficiency.</p> <p>Performance \u2192</p> </li> </ul>"},{"location":"advanced/#community-resources","title":"Community Resources","text":"<p>For advanced Docker topics, these resources are invaluable:</p> <ul> <li>Docker Documentation - Official advanced guides</li> <li>Docker Blog - Latest features and best practices</li> <li>Container security tools - Vulnerability scanning</li> <li>Monitoring solutions - Production observability</li> </ul> <p>Remember: advanced techniques should solve real problems, not add complexity for its own sake. Apply these patterns when they provide clear value to your specific use case.</p>"},{"location":"advanced/multi-stage/","title":"Multi-stage Docker Builds","text":"<p>Multi-stage builds are one of the most impactful techniques for creating production-ready Docker images. They allow you to separate your build environment from your runtime environment, resulting in smaller, more secure, and faster-deploying containers.</p>"},{"location":"advanced/multi-stage/#the-problem-multi-stage-builds-solve","title":"The Problem Multi-stage Builds Solve","text":""},{"location":"advanced/multi-stage/#traditional-single-stage-build-issues","title":"Traditional Single-stage Build Issues","text":"<p>Consider a typical Node.js application Dockerfile:</p> <pre><code>FROM node:18\nWORKDIR /app\nCOPY package*.json ./\nRUN npm install\nCOPY . .\nRUN npm run build\nEXPOSE 3000\nCMD [\"npm\", \"start\"]\n</code></pre> <p>Problems with this approach: - Final image includes build tools (npm, build dependencies) - Larger image size (often 500MB+ for Node.js apps) - Security risk from unnecessary tools in production - Slower deployments due to image size</p>"},{"location":"advanced/multi-stage/#multi-stage-build-solution","title":"Multi-stage Build Solution","text":"<p>The same application with multi-stage builds:</p> <pre><code># Build stage\nFROM node:18 AS builder\nWORKDIR /app\nCOPY package*.json ./\nRUN npm install\nCOPY . .\nRUN npm run build\n\n# Production stage\nFROM node:18-alpine\nWORKDIR /app\nCOPY package*.json ./\nRUN npm install --production\nCOPY --from=builder /app/dist ./dist\nEXPOSE 3000\nCMD [\"npm\", \"start\"]\n</code></pre> <p>Benefits: - Final image excludes build tools and dev dependencies - Smaller image size (often 50-70% reduction) - More secure production environment - Faster deployments and scaling</p>"},{"location":"advanced/multi-stage/#understanding-multi-stage-syntax","title":"Understanding Multi-stage Syntax","text":""},{"location":"advanced/multi-stage/#basic-structure","title":"Basic Structure","text":"<pre><code># First stage\nFROM base-image AS stage-name\n# Build commands here\n\n# Second stage  \nFROM runtime-image\nCOPY --from=stage-name /source/path /destination/path\n# Runtime commands here\n</code></pre>"},{"location":"advanced/multi-stage/#key-components","title":"Key Components","text":"<p>Stage Naming: <code>AS stage-name</code> - Names allow referencing stages in later <code>COPY --from</code> commands - Stages can be referenced by name or index (0, 1, 2...)</p> <p>Cross-stage Copying: <code>COPY --from=stage-name</code> - Copies files from previous stages - Only brings necessary artifacts to final stage</p>"},{"location":"advanced/multi-stage/#practical-examples","title":"Practical Examples","text":""},{"location":"advanced/multi-stage/#nodejs-application","title":"Node.js Application","text":"<pre><code># Stage 1: Build\nFROM node:18 AS build\nWORKDIR /app\nCOPY package*.json ./\nRUN npm ci --only=production &amp;&amp; npm cache clean --force\nCOPY . .\nRUN npm run build\n\n# Stage 2: Production\nFROM node:18-alpine\nRUN addgroup -g 1001 -S nodejs &amp;&amp; adduser -S nextjs -u 1001\nWORKDIR /app\nCOPY --from=build --chown=nextjs:nodejs /app/dist ./dist\nCOPY --from=build --chown=nextjs:nodejs /app/node_modules ./node_modules\nCOPY --from=build --chown=nextjs:nodejs /app/package.json ./package.json\n\nUSER nextjs\nEXPOSE 3000\nCMD [\"node\", \"dist/server.js\"]\n</code></pre> <p>Size comparison: - Single-stage: ~850MB - Multi-stage: ~200MB</p>"},{"location":"advanced/multi-stage/#go-application","title":"Go Application","text":"<pre><code># Build stage\nFROM golang:1.21 AS builder\nWORKDIR /app\nCOPY go.mod go.sum ./\nRUN go mod download\nCOPY . .\nRUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o main .\n\n# Production stage\nFROM alpine:3.18\nRUN apk --no-cache add ca-certificates\nWORKDIR /root/\nCOPY --from=builder /app/main .\nCMD [\"./main\"]\n</code></pre> <p>Size comparison: - Single-stage with Go tools: ~900MB - Multi-stage with Alpine: ~15MB</p>"},{"location":"advanced/multi-stage/#python-application","title":"Python Application","text":"<pre><code># Build stage\nFROM python:3.11 AS builder\nWORKDIR /app\nCOPY requirements.txt .\nRUN pip install --user -r requirements.txt\n\n# Production stage\nFROM python:3.11-slim\nWORKDIR /app\nCOPY --from=builder /root/.local /root/.local\nCOPY . .\nENV PATH=/root/.local/bin:$PATH\nCMD [\"python\", \"app.py\"]\n</code></pre>"},{"location":"advanced/multi-stage/#java-spring-boot-application","title":"Java Spring Boot Application","text":"<pre><code># Build stage\nFROM maven:3.9-openjdk-17 AS build\nWORKDIR /app\nCOPY pom.xml .\nRUN mvn dependency:go-offline\nCOPY src ./src\nRUN mvn clean package -DskipTests\n\n# Production stage\nFROM openjdk:17-jre-slim\nWORKDIR /app\nCOPY --from=build /app/target/*.jar app.jar\nEXPOSE 8080\nENTRYPOINT [\"java\", \"-jar\", \"app.jar\"]\n</code></pre>"},{"location":"advanced/multi-stage/#advanced-multi-stage-patterns","title":"Advanced Multi-stage Patterns","text":""},{"location":"advanced/multi-stage/#build-artifact-caching","title":"Build Artifact Caching","text":"<pre><code># Dependencies stage (cached separately)\nFROM node:18 AS deps\nWORKDIR /app\nCOPY package*.json ./\nRUN npm ci --only=production\n\n# Build stage\nFROM node:18 AS build\nWORKDIR /app\nCOPY package*.json ./\nRUN npm ci\nCOPY . .\nRUN npm run build\n\n# Production stage\nFROM node:18-alpine AS production\nWORKDIR /app\nCOPY --from=deps /app/node_modules ./node_modules\nCOPY --from=build /app/dist ./dist\nCOPY package*.json ./\nCMD [\"npm\", \"start\"]\n</code></pre>"},{"location":"advanced/multi-stage/#development-vs-production-stages","title":"Development vs Production Stages","text":"<pre><code>FROM node:18 AS base\nWORKDIR /app\nCOPY package*.json ./\n\n# Development stage\nFROM base AS development\nRUN npm install\nCOPY . .\nCMD [\"npm\", \"run\", \"dev\"]\n\n# Build stage\nFROM base AS build\nRUN npm ci\nCOPY . .\nRUN npm run build\n\n# Production stage\nFROM node:18-alpine AS production\nWORKDIR /app\nRUN npm ci --only=production &amp;&amp; npm cache clean --force\nCOPY --from=build /app/dist ./dist\nCMD [\"npm\", \"start\"]\n</code></pre> <p>Usage: <pre><code># Build for development\ndocker build --target development -t myapp:dev .\n\n# Build for production\ndocker build --target production -t myapp:prod .\n</code></pre></p>"},{"location":"advanced/multi-stage/#multi-platform-builds","title":"Multi-platform Builds","text":"<pre><code>FROM --platform=$BUILDPLATFORM golang:1.21 AS builder\nARG TARGETPLATFORM\nARG BUILDPLATFORM\nARG TARGETOS\nARG TARGETARCH\n\nWORKDIR /app\nCOPY . .\nRUN CGO_ENABLED=0 GOOS=$TARGETOS GOARCH=$TARGETARCH go build -o app\n\nFROM alpine:3.18\nCOPY --from=builder /app/app /usr/local/bin/app\nCMD [\"app\"]\n</code></pre>"},{"location":"advanced/multi-stage/#optimization-techniques","title":"Optimization Techniques","text":""},{"location":"advanced/multi-stage/#layer-caching-strategy","title":"Layer Caching Strategy","text":"<pre><code># Optimize for layer caching\nFROM node:18 AS build\n\n# Copy dependency files first (changes less frequently)\nWORKDIR /app\nCOPY package*.json ./\nRUN npm ci\n\n# Copy source code last (changes more frequently)\nCOPY . .\nRUN npm run build\n\nFROM node:18-alpine\nWORKDIR /app\nCOPY --from=build /app/dist ./dist\n# ... rest of production stage\n</code></pre>"},{"location":"advanced/multi-stage/#using-dockerignore","title":"Using .dockerignore","text":"<p>Create <code>.dockerignore</code> to exclude unnecessary files from build context:</p> <pre><code>node_modules\nnpm-debug.log\n.git\n.gitignore\nREADME.md\n.env\n.nyc_output\ncoverage\n.nyc_output\nDockerfile\n.dockerignore\n</code></pre>"},{"location":"advanced/multi-stage/#minimizing-final-image","title":"Minimizing Final Image","text":"<pre><code># Use minimal base images for production\nFROM node:18 AS build\n# ... build steps\n\n# Use distroless or alpine for minimal attack surface\nFROM gcr.io/distroless/nodejs18\nWORKDIR /app\nCOPY --from=build /app/dist ./dist\nCOPY --from=build /app/node_modules ./node_modules\nCMD [\"dist/server.js\"]\n</code></pre>"},{"location":"advanced/multi-stage/#security-benefits","title":"Security Benefits","text":""},{"location":"advanced/multi-stage/#reduced-attack-surface","title":"Reduced Attack Surface","text":"<p>Single-stage image includes: - Build tools (compilers, package managers) - Development dependencies - Source code - Build cache and temporary files</p> <p>Multi-stage image includes only: - Runtime dependencies - Compiled application - Minimal base OS</p>"},{"location":"advanced/multi-stage/#non-root-user-implementation","title":"Non-root User Implementation","text":"<pre><code>FROM node:18 AS build\nWORKDIR /app\nCOPY package*.json ./\nRUN npm ci\nCOPY . .\nRUN npm run build\n\nFROM node:18-alpine\nRUN addgroup -g 1001 -S nodejs &amp;&amp; adduser -S appuser -u 1001 -G nodejs\nWORKDIR /app\nCOPY --from=build --chown=appuser:nodejs /app/dist ./dist\nCOPY --from=build --chown=appuser:nodejs /app/node_modules ./node_modules\n\nUSER appuser\nCMD [\"node\", \"dist/server.js\"]\n</code></pre>"},{"location":"advanced/multi-stage/#build-performance-optimization","title":"Build Performance Optimization","text":""},{"location":"advanced/multi-stage/#parallel-builds","title":"Parallel Builds","text":"<pre><code>FROM alpine AS base\n\n# These stages can build in parallel\nFROM base AS build-frontend\nCOPY frontend/ /src\nRUN cd /src &amp;&amp; npm run build\n\nFROM base AS build-backend  \nCOPY backend/ /src\nRUN cd /src &amp;&amp; go build -o app\n\n# Combine results\nFROM alpine\nCOPY --from=build-frontend /src/dist /var/www\nCOPY --from=build-backend /src/app /usr/local/bin/\n</code></pre>"},{"location":"advanced/multi-stage/#buildkit-features","title":"BuildKit Features","text":"<p>Enable BuildKit for advanced features:</p> <pre><code>export DOCKER_BUILDKIT=1\ndocker build .\n</code></pre> <p>Or use buildx:</p> <pre><code>docker buildx build --platform linux/amd64,linux/arm64 -t myapp .\n</code></pre>"},{"location":"advanced/multi-stage/#common-patterns-and-use-cases","title":"Common Patterns and Use Cases","text":""},{"location":"advanced/multi-stage/#static-site-generation","title":"Static Site Generation","text":"<pre><code># Build stage\nFROM node:18 AS build\nWORKDIR /app\nCOPY package*.json ./\nRUN npm ci\nCOPY . .\nRUN npm run build\n\n# Production stage with nginx\nFROM nginx:alpine\nCOPY --from=build /app/build /usr/share/nginx/html\nCOPY nginx.conf /etc/nginx/nginx.conf\nEXPOSE 80\nCMD [\"nginx\", \"-g\", \"daemon off;\"]\n</code></pre>"},{"location":"advanced/multi-stage/#database-migration","title":"Database Migration","text":"<pre><code># Build application\nFROM golang:1.21 AS app-build\nWORKDIR /app\nCOPY . .\nRUN go build -o app\n\n# Build migration tool\nFROM migrate/migrate AS migrate\n\n# Final image\nFROM alpine:3.18\nRUN apk add --no-cache ca-certificates\nCOPY --from=app-build /app/app /usr/local/bin/\nCOPY --from=migrate /usr/local/bin/migrate /usr/local/bin/\nCOPY migrations/ /migrations/\n</code></pre>"},{"location":"advanced/multi-stage/#best-practices","title":"Best Practices","text":""},{"location":"advanced/multi-stage/#stage-organization","title":"Stage Organization","text":"<pre><code># 1. Base stage with common dependencies\nFROM ubuntu:22.04 AS base\nRUN apt-get update &amp;&amp; apt-get install -y \\\n    curl \\\n    ca-certificates\n\n# 2. Development dependencies\nFROM base AS dev-deps\nRUN apt-get install -y \\\n    build-essential \\\n    git\n\n# 3. Build stage\nFROM dev-deps AS build\nWORKDIR /app\nCOPY . .\nRUN make build\n\n# 4. Production stage\nFROM base\nCOPY --from=build /app/bin/app /usr/local/bin/\nCMD [\"app\"]\n</code></pre>"},{"location":"advanced/multi-stage/#naming-conventions","title":"Naming Conventions","text":"<p>Use descriptive stage names: - <code>dependencies</code> - Installing dependencies - <code>build</code> - Compilation/build steps - <code>test</code> - Running tests - <code>production</code> - Final runtime stage</p>"},{"location":"advanced/multi-stage/#resource-management","title":"Resource Management","text":"<pre><code>FROM golang:1.21 AS build\n# Limit build resources if needed\nRUN go build -ldflags=\"-s -w\" -o app\n\nFROM scratch\n# Minimal final image\nCOPY --from=build /app/app /app\nENTRYPOINT [\"/app\"]\n</code></pre>"},{"location":"advanced/multi-stage/#troubleshooting-multi-stage-builds","title":"Troubleshooting Multi-stage Builds","text":""},{"location":"advanced/multi-stage/#common-issues","title":"Common Issues","text":"<p>Stage not found: <pre><code>Error: failed to solve: stage name not found: builder\n</code></pre> Solution: Check stage naming with <code>AS</code> keyword</p> <p>File not found in COPY --from: <pre><code>Error: failed to compute cache key: file not found\n</code></pre> Solution: Verify file paths exist in source stage</p> <p>Permission issues: <pre><code>Error: permission denied\n</code></pre> Solution: Use <code>--chown</code> in COPY commands or RUN chmod</p>"},{"location":"advanced/multi-stage/#debugging-techniques","title":"Debugging Techniques","text":"<p>Build specific stage: <pre><code>docker build --target build -t debug-build .\ndocker run -it debug-build /bin/bash\n</code></pre></p> <p>Inspect intermediate stages: <pre><code>docker build --target build .\ndocker images  # Find intermediate image\ndocker run -it &lt;image-id&gt; /bin/bash\n</code></pre></p>"},{"location":"advanced/multi-stage/#measuring-success","title":"Measuring Success","text":""},{"location":"advanced/multi-stage/#image-size-comparison","title":"Image Size Comparison","text":"<pre><code># Check image sizes\ndocker images | grep myapp\n\n# Compare layer details  \ndocker history myapp:single-stage\ndocker history myapp:multi-stage\n</code></pre>"},{"location":"advanced/multi-stage/#build-time-analysis","title":"Build Time Analysis","text":"<pre><code># Time the build process\ntime docker build -t myapp .\n\n# Use BuildKit for detailed timing\nDOCKER_BUILDKIT=1 docker build --progress=plain .\n</code></pre>"},{"location":"advanced/multi-stage/#security-scanning","title":"Security Scanning","text":"<pre><code># Scan for vulnerabilities\ndocker scout cves myapp:single-stage\ndocker scout cves myapp:multi-stage\n</code></pre> <p>Multi-stage builds represent a fundamental shift toward production-ready containerization. They reduce image size, improve security, and create cleaner separation between build and runtime environments. Master this technique to create professional-grade Docker images that deploy faster and run more securely.</p>"},{"location":"advanced/performance/","title":"Docker Performance Optimization","text":"<p>Performance optimization in Docker involves multiple layers: image efficiency, container resource management, runtime tuning, and host system optimization. This guide provides practical techniques to make your containers run faster, use fewer resources, and scale more efficiently.</p>"},{"location":"advanced/performance/#image-performance-optimization","title":"Image Performance Optimization","text":""},{"location":"advanced/performance/#base-image-selection","title":"Base Image Selection","text":"<p>Choose the right base image for your use case:</p> <pre><code># Size and performance comparison\nFROM ubuntu:22.04        # ~77MB, full OS features\nFROM alpine:3.18         # ~7MB, minimal but compatible\nFROM scratch             # ~0MB, static binaries only\nFROM gcr.io/distroless/java17-debian11  # ~200MB, secure minimal Java\n</code></pre> <p>Performance implications: - Smaller images = Faster pulls, less network transfer, quicker container starts - Alpine Linux = Minimal overhead but may have musl libc compatibility issues - Distroless = Security + performance, minimal attack surface</p>"},{"location":"advanced/performance/#layer-optimization","title":"Layer Optimization","text":"<p>Optimize Dockerfile layers for better caching and smaller images:</p> <pre><code># BAD: Each RUN creates a layer\nFROM node:18-alpine\nRUN apk add --no-cache git\nRUN apk add --no-cache python3\nRUN apk add --no-cache make\nRUN apk add --no-cache g++\n\n# GOOD: Combined into single layer\nFROM node:18-alpine\nRUN apk add --no-cache \\\n    git \\\n    python3 \\\n    make \\\n    g++ \\\n    &amp;&amp; rm -rf /var/cache/apk/*\n\n# BETTER: Multi-stage to eliminate build dependencies\nFROM node:18-alpine AS build\nRUN apk add --no-cache git python3 make g++\nCOPY package*.json ./\nRUN npm ci\nCOPY . .\nRUN npm run build\n\nFROM node:18-alpine\nCOPY --from=build /app/dist ./dist\nCOPY --from=build /app/node_modules ./node_modules\nCMD [\"node\", \"dist/server.js\"]\n</code></pre>"},{"location":"advanced/performance/#dependency-management","title":"Dependency Management","text":"<p>Optimize package installation for performance:</p> <pre><code># Node.js optimization\nFROM node:18-alpine\nWORKDIR /app\n\n# Copy dependency files first for better caching\nCOPY package*.json ./\n\n# Use npm ci for faster, reliable installs\nRUN npm ci --only=production \\\n    &amp;&amp; npm cache clean --force \\\n    &amp;&amp; rm -rf /tmp/*\n\nCOPY . .\nCMD [\"node\", \"server.js\"]\n</code></pre> <pre><code># Python optimization\nFROM python:3.11-slim\nWORKDIR /app\n\n# Install system dependencies in one layer\nRUN apt-get update \\\n    &amp;&amp; apt-get install -y --no-install-recommends \\\n        build-essential \\\n        libpq-dev \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# Copy requirements first for better caching\nCOPY requirements.txt .\n\n# Use pip cache and optimized flags\nRUN pip install --no-cache-dir \\\n    --disable-pip-version-check \\\n    --requirement requirements.txt\n\nCOPY . .\nCMD [\"python\", \"app.py\"]\n</code></pre>"},{"location":"advanced/performance/#container-resource-management","title":"Container Resource Management","text":""},{"location":"advanced/performance/#memory-optimization","title":"Memory Optimization","text":"<p>Set appropriate memory limits and understand memory usage:</p> <pre><code># Set memory limits\ndocker run -d \\\n  --memory=\"512m\" \\\n  --memory-swap=\"512m\" \\\n  --oom-kill-disable=false \\\n  myapp:latest\n\n# Monitor memory usage\ndocker stats --no-stream\ndocker exec container-name cat /sys/fs/cgroup/memory/memory.usage_in_bytes\n</code></pre> <p>Application-level memory optimization:</p> <pre><code>// Node.js memory tuning\nconst app = express();\n\n// Set appropriate heap size\nprocess.env.NODE_OPTIONS = '--max-old-space-size=400';  // 400MB heap\n\n// Memory monitoring\nsetInterval(() =&gt; {\n  const memUsage = process.memoryUsage();\n  console.log({\n    rss: Math.round(memUsage.rss / 1024 / 1024) + 'MB',\n    heapTotal: Math.round(memUsage.heapTotal / 1024 / 1024) + 'MB',\n    heapUsed: Math.round(memUsage.heapUsed / 1024 / 1024) + 'MB'\n  });\n}, 60000);\n</code></pre>"},{"location":"advanced/performance/#cpu-optimization","title":"CPU Optimization","text":"<p>Configure CPU limits and scaling:</p> <pre><code># CPU limits\ndocker run -d \\\n  --cpus=\"1.5\" \\\n  --cpu-shares=1024 \\\n  --cpuset-cpus=\"0,1\" \\\n  myapp:latest\n</code></pre> <p>Docker Compose resource management:</p> <pre><code>version: '3.8'\nservices:\n  web:\n    image: myapp:latest\n    deploy:\n      resources:\n        limits:\n          cpus: '2.0'\n          memory: 1G\n        reservations:\n          cpus: '0.5'\n          memory: 512M\n      replicas: 3\n      restart_policy:\n        condition: on-failure\n        delay: 5s\n        max_attempts: 3\n</code></pre>"},{"location":"advanced/performance/#io-performance","title":"I/O Performance","text":"<p>Optimize disk and network I/O:</p> <pre><code># Use tmpfs for temporary files\nFROM node:18-alpine\nWORKDIR /app\nCOPY . .\n\n# Configure for better I/O\nRUN npm ci --only=production\n\n# Use tmpfs mount for temporary files\nVOLUME [\"/tmp\"]\n\nCMD [\"node\", \"server.js\"]\n</code></pre> <pre><code># Run with optimized I/O\ndocker run -d \\\n  --tmpfs /tmp:noexec,nosuid,size=100m \\\n  --device-read-bps /dev/sda:50mb \\\n  --device-write-bps /dev/sda:50mb \\\n  myapp:latest\n</code></pre>"},{"location":"advanced/performance/#runtime-performance-tuning","title":"Runtime Performance Tuning","text":""},{"location":"advanced/performance/#jvm-applications","title":"JVM Applications","text":"<p>Optimize Java applications for containerized environments:</p> <pre><code>FROM openjdk:17-jre-slim\n\n# JVM tuning for containers\nENV JAVA_OPTS=\"-XX:+UseContainerSupport \\\n               -XX:MaxRAMPercentage=75.0 \\\n               -XX:+UseG1GC \\\n               -XX:+UseStringDeduplication \\\n               -XX:+ExitOnOutOfMemoryError\"\n\nCOPY app.jar /app.jar\n\n# Use exec form to ensure proper signal handling\nENTRYPOINT [\"sh\", \"-c\", \"java $JAVA_OPTS -jar /app.jar\"]\n</code></pre> <p>Advanced JVM tuning:</p> <pre><code>FROM openjdk:17-jre-slim\n\n# Container-aware JVM settings\nENV JAVA_OPTS=\"-server \\\n               -XX:+UseContainerSupport \\\n               -XX:InitialRAMPercentage=50.0 \\\n               -XX:MaxRAMPercentage=80.0 \\\n               -XX:+UseG1GC \\\n               -XX:MaxGCPauseMillis=100 \\\n               -XX:+UseStringDeduplication \\\n               -XX:+OptimizeStringConcat \\\n               -XX:+UseCompressedOops \\\n               -XX:+ExitOnOutOfMemoryError \\\n               -Djava.security.egd=file:/dev/./urandom\"\n\n# Application profiling\nENV PROFILING_OPTS=\"-XX:+FlightRecorder \\\n                   -XX:StartFlightRecording=duration=60s,filename=/tmp/flight.jfr \\\n                   -XX:+UnlockDiagnosticVMOptions \\\n                   -XX:+DebugNonSafepoints\"\n\nCOPY app.jar /app.jar\nENTRYPOINT [\"sh\", \"-c\", \"java $JAVA_OPTS $PROFILING_OPTS -jar /app.jar\"]\n</code></pre>"},{"location":"advanced/performance/#nodejs-applications","title":"Node.js Applications","text":"<p>Optimize Node.js for production performance:</p> <pre><code>FROM node:18-alpine\nWORKDIR /app\n\n# Node.js performance environment variables\nENV NODE_ENV=production\nENV NODE_OPTIONS=\"--max-old-space-size=460 --optimize-for-size\"\n\nCOPY package*.json ./\nRUN npm ci --only=production &amp;&amp; npm cache clean --force\n\nCOPY . .\n\n# Use cluster mode for CPU utilization\nCMD [\"node\", \"cluster.js\"]\n</code></pre> <p>Cluster implementation:</p> <pre><code>// cluster.js\nconst cluster = require('cluster');\nconst numCPUs = require('os').cpus().length;\n\nif (cluster.isMaster) {\n  console.log(`Master ${process.pid} is running`);\n\n  // Fork workers\n  for (let i = 0; i &lt; numCPUs; i++) {\n    cluster.fork();\n  }\n\n  cluster.on('exit', (worker, code, signal) =&gt; {\n    console.log(`Worker ${worker.process.pid} died`);\n    cluster.fork();  // Restart worker\n  });\n} else {\n  // Workers can share any TCP port\n  require('./server.js');\n  console.log(`Worker ${process.pid} started`);\n}\n</code></pre>"},{"location":"advanced/performance/#python-applications","title":"Python Applications","text":"<p>Optimize Python applications for container performance:</p> <pre><code>FROM python:3.11-slim\n\n# Python performance optimizations\nENV PYTHONUNBUFFERED=1 \\\n    PYTHONDONTWRITEBYTECODE=1 \\\n    PYTHONHASHSEED=random \\\n    PIP_NO_CACHE_DIR=1 \\\n    PIP_DISABLE_PIP_VERSION_CHECK=1\n\nWORKDIR /app\n\n# Use multiple workers\nCOPY requirements.txt .\nRUN pip install -r requirements.txt\n\nCOPY . .\n\n# Use gunicorn with multiple workers\nCMD [\"gunicorn\", \"--bind\", \"0.0.0.0:8000\", \"--workers\", \"4\", \"--worker-class\", \"gevent\", \"app:app\"]\n</code></pre>"},{"location":"advanced/performance/#build-performance-optimization","title":"Build Performance Optimization","text":""},{"location":"advanced/performance/#docker-buildkit","title":"Docker BuildKit","text":"<p>Enable BuildKit for faster builds:</p> <pre><code>export DOCKER_BUILDKIT=1\ndocker build -t myapp .\n\n# Or use buildx\ndocker buildx build --platform linux/amd64,linux/arm64 -t myapp .\n</code></pre> <p>BuildKit advanced features:</p> <pre><code># syntax=docker/dockerfile:1.4\nFROM node:18-alpine\n\n# Use cache mounts\nRUN --mount=type=cache,target=/root/.npm \\\n    npm install\n\n# Use bind mounts for build context\nRUN --mount=type=bind,source=package.json,target=package.json \\\n    --mount=type=bind,source=package-lock.json,target=package-lock.json \\\n    npm ci\n\n# Use secrets for build-time credentials\nRUN --mount=type=secret,id=npmrc,target=/root/.npmrc \\\n    npm install private-package\n</code></pre>"},{"location":"advanced/performance/#build-caching-strategies","title":"Build Caching Strategies","text":"<p>Optimize layer caching for faster builds:</p> <pre><code>FROM node:18-alpine\n\n# Install system dependencies first (rarely change)\nRUN apk add --no-cache git python3 make g++\n\nWORKDIR /app\n\n# Copy dependency files (change less frequently)\nCOPY package*.json ./\nRUN npm ci --only=production\n\n# Copy source code last (changes most frequently)\nCOPY . .\n\n# Build application\nRUN npm run build\n\nCMD [\"npm\", \"start\"]\n</code></pre>"},{"location":"advanced/performance/#multi-platform-builds","title":"Multi-platform Builds","text":"<p>Build for multiple architectures efficiently:</p> <pre><code># Create and use multi-platform builder\ndocker buildx create --name multiplatform --use\ndocker buildx inspect --bootstrap\n\n# Build for multiple platforms\ndocker buildx build \\\n  --platform linux/amd64,linux/arm64,linux/arm/v7 \\\n  --tag myapp:latest \\\n  --push .\n</code></pre>"},{"location":"advanced/performance/#monitoring-and-profiling","title":"Monitoring and Profiling","text":""},{"location":"advanced/performance/#container-metrics-collection","title":"Container Metrics Collection","text":"<p>Monitor container performance:</p> <pre><code># Real-time resource monitoring\ndocker stats\n\n# Historical data with cAdvisor\ndocker run \\\n  --volume=/:/rootfs:ro \\\n  --volume=/var/run:/var/run:rw \\\n  --volume=/sys:/sys:ro \\\n  --volume=/var/lib/docker/:/var/lib/docker:ro \\\n  --publish=8080:8080 \\\n  --detach=true \\\n  --name=cadvisor \\\n  google/cadvisor:latest\n</code></pre>"},{"location":"advanced/performance/#application-performance-monitoring","title":"Application Performance Monitoring","text":"<p>Implement application-level monitoring:</p> <pre><code>// Node.js APM with Prometheus\nconst promClient = require('prom-client');\nconst express = require('express');\nconst app = express();\n\n// Create performance metrics\nconst httpDuration = new promClient.Histogram({\n  name: 'http_request_duration_ms',\n  help: 'Duration of HTTP requests in ms',\n  labelNames: ['method', 'route', 'status']\n});\n\nconst memoryUsage = new promClient.Gauge({\n  name: 'nodejs_memory_usage_bytes',\n  help: 'Memory usage in bytes',\n  labelNames: ['type']\n});\n\n// Update memory metrics\nsetInterval(() =&gt; {\n  const usage = process.memoryUsage();\n  memoryUsage.set({ type: 'rss' }, usage.rss);\n  memoryUsage.set({ type: 'heapTotal' }, usage.heapTotal);\n  memoryUsage.set({ type: 'heapUsed' }, usage.heapUsed);\n}, 5000);\n\n// Metrics endpoint\napp.get('/metrics', (req, res) =&gt; {\n  res.set('Content-Type', promClient.register.contentType);\n  res.end(promClient.register.metrics());\n});\n</code></pre>"},{"location":"advanced/performance/#performance-testing-and-benchmarking","title":"Performance Testing and Benchmarking","text":""},{"location":"advanced/performance/#load-testing-containers","title":"Load Testing Containers","text":"<p>Test container performance under load:</p> <pre><code># Use Apache Bench for simple HTTP load testing\ndocker run --rm \\\n  --network container:myapp-container \\\n  httpd:2.4 \\\n  ab -n 10000 -c 100 http://localhost:3000/\n\n# Use wrk for more sophisticated testing\ndocker run --rm \\\n  --network container:myapp-container \\\n  williamyeh/wrk \\\n  -t12 -c400 -d30s --timeout 2s http://localhost:3000/\n</code></pre>"},{"location":"advanced/performance/#benchmark-container-startup","title":"Benchmark Container Startup","text":"<p>Measure container startup performance:</p> <pre><code>#!/bin/bash\n# benchmark-startup.sh\n\nIMAGE_NAME=\"myapp:latest\"\nITERATIONS=10\n\necho \"Benchmarking container startup for $IMAGE_NAME\"\n\ntotal_time=0\nfor i in $(seq 1 $ITERATIONS); do\n    start_time=$(date +%s.%3N)\n\n    container_id=$(docker run -d $IMAGE_NAME)\n\n    # Wait for container to be ready\n    while ! docker exec $container_id curl -f http://localhost:3000/health 2&gt;/dev/null; do\n        sleep 0.1\n    done\n\n    end_time=$(date +%s.%3N)\n    startup_time=$(echo \"$end_time - $start_time\" | bc)\n    total_time=$(echo \"$total_time + $startup_time\" | bc)\n\n    echo \"Iteration $i: ${startup_time}s\"\n\n    docker stop $container_id &gt; /dev/null\n    docker rm $container_id &gt; /dev/null\ndone\n\naverage_time=$(echo \"scale=3; $total_time / $ITERATIONS\" | bc)\necho \"Average startup time: ${average_time}s\"\n</code></pre>"},{"location":"advanced/performance/#optimization-best-practices","title":"Optimization Best Practices","text":""},{"location":"advanced/performance/#image-optimization-checklist","title":"Image Optimization Checklist","text":"<ul> <li> Use minimal base images (Alpine, distroless)</li> <li> Implement multi-stage builds</li> <li> Combine RUN commands to reduce layers</li> <li> Use .dockerignore to exclude unnecessary files</li> <li> Remove package managers and build tools from final stage</li> <li> Set appropriate USER directive</li> <li> Use COPY instead of ADD when possible</li> </ul>"},{"location":"advanced/performance/#runtime-optimization-checklist","title":"Runtime Optimization Checklist","text":"<ul> <li> Set appropriate memory and CPU limits</li> <li> Configure application for container environment</li> <li> Use read-only filesystems where possible</li> <li> Implement proper health checks</li> <li> Configure logging appropriately</li> <li> Use tmpfs for temporary files</li> <li> Enable container security features</li> </ul>"},{"location":"advanced/performance/#monitoring-and-debugging","title":"Monitoring and Debugging","text":"<ul> <li> Implement application metrics</li> <li> Set up container monitoring</li> <li> Configure structured logging</li> <li> Use debugging tools (strace, perf)</li> <li> Monitor resource utilization</li> <li> Set up alerting for performance degradation</li> </ul>"},{"location":"advanced/performance/#performance-anti-patterns","title":"Performance Anti-patterns","text":""},{"location":"advanced/performance/#common-mistakes-to-avoid","title":"Common Mistakes to Avoid","text":"<p>Running unnecessary services: <pre><code># BAD: Full operating system with services\nFROM ubuntu:22.04\nRUN apt-get update &amp;&amp; apt-get install -y \\\n    systemd \\\n    ssh \\\n    cron \\\n    syslog-ng\n\n# GOOD: Minimal runtime\nFROM node:18-alpine\nWORKDIR /app\nCOPY . .\nCMD [\"node\", \"server.js\"]\n</code></pre></p> <p>Inefficient layer caching: <pre><code># BAD: Source code copied early\nFROM node:18\nCOPY . .\nRUN npm install\n\n# GOOD: Dependencies cached separately\nFROM node:18\nCOPY package*.json ./\nRUN npm ci\nCOPY . .\n</code></pre></p> <p>Resource waste: <pre><code># BAD: No resource limits\ndocker run -d myapp:latest\n\n# GOOD: Appropriate limits\ndocker run -d \\\n  --memory=\"512m\" \\\n  --cpus=\"1.0\" \\\n  myapp:latest\n</code></pre></p> <p>Performance optimization is an iterative process. Start with the fundamentals (appropriate base images, resource limits), measure performance, and optimize based on actual bottlenecks rather than assumptions. The techniques in this guide provide a foundation for building efficient, scalable containerized applications.</p>"},{"location":"advanced/production/","title":"Production Docker Deployment","text":"<p>Moving from development to production requires careful attention to security, reliability, and maintainability. This guide covers essential practices for running Docker containers safely and effectively in production environments.</p>"},{"location":"advanced/production/#production-vs-development-key-differences","title":"Production vs Development: Key Differences","text":""},{"location":"advanced/production/#development-environment-characteristics","title":"Development Environment Characteristics","text":"<ul> <li>Rapid iteration and debugging</li> <li>Full access and root privileges</li> <li>Verbose logging and error details</li> <li>Development dependencies included</li> <li>Hot reloading and file watching</li> </ul>"},{"location":"advanced/production/#production-environment-requirements","title":"Production Environment Requirements","text":"<ul> <li>Security hardening and minimal attack surface</li> <li>Non-root execution and principle of least privilege</li> <li>Structured logging and monitoring</li> <li>Minimal dependencies and optimized images</li> <li>Stability and predictable behavior</li> </ul>"},{"location":"advanced/production/#container-security-hardening","title":"Container Security Hardening","text":""},{"location":"advanced/production/#run-as-non-root-user","title":"Run as Non-Root User","text":"<p>Problem: Running containers as root creates unnecessary security risks.</p> <p>Solution: Create and use dedicated user accounts.</p> <pre><code>FROM node:18-alpine\n\n# Create app user\nRUN addgroup -g 1001 -S nodejs &amp;&amp; \\\n    adduser -S appuser -u 1001 -G nodejs\n\n# Set up application\nWORKDIR /app\nCOPY --chown=appuser:nodejs package*.json ./\nRUN npm ci --only=production &amp;&amp; npm cache clean --force\n\nCOPY --chown=appuser:nodejs . .\n\n# Switch to non-root user\nUSER appuser\n\nEXPOSE 3000\nCMD [\"node\", \"server.js\"]\n</code></pre>"},{"location":"advanced/production/#minimal-base-images","title":"Minimal Base Images","text":"<p>Use distroless or Alpine images to reduce attack surface:</p> <pre><code># Multi-stage build with minimal production image\nFROM node:18 AS build\nWORKDIR /app\nCOPY package*.json ./\nRUN npm ci\nCOPY . .\nRUN npm run build\n\n# Use distroless for minimal attack surface\nFROM gcr.io/distroless/nodejs18-debian11\nWORKDIR /app\nCOPY --from=build /app/dist ./dist\nCOPY --from=build /app/node_modules ./node_modules\nCOPY --from=build /app/package.json ./package.json\nCMD [\"dist/server.js\"]\n</code></pre>"},{"location":"advanced/production/#image-vulnerability-scanning","title":"Image Vulnerability Scanning","text":"<p>Implement regular security scanning:</p> <pre><code># Using Docker Scout\ndocker scout cves myapp:latest\n\n# Using Trivy\ntrivy image myapp:latest\n\n# Using Snyk (requires authentication)\nsnyk container test myapp:latest\n</code></pre>"},{"location":"advanced/production/#secrets-management","title":"Secrets Management","text":"<p>Never embed secrets in images:</p> <pre><code># BAD: Secrets in environment variables\nENV API_KEY=secret123\nENV DB_PASSWORD=mypassword\n\n# GOOD: Secrets injected at runtime\nENV API_KEY_FILE=/run/secrets/api_key\nENV DB_PASSWORD_FILE=/run/secrets/db_password\n</code></pre> <p>Use Docker secrets or external secret management:</p> <pre><code># Docker Swarm secrets\ndocker service create \\\n  --secret api_key \\\n  --secret db_password \\\n  myapp:latest\n\n# External secret injection\ndocker run \\\n  -e API_KEY=\"$(kubectl get secret api-key -o jsonpath='{.data.key}' | base64 -d)\" \\\n  myapp:latest\n</code></pre>"},{"location":"advanced/production/#health-checks-and-monitoring","title":"Health Checks and Monitoring","text":""},{"location":"advanced/production/#container-health-checks","title":"Container Health Checks","text":"<p>Implement comprehensive health checking:</p> <pre><code>FROM node:18-alpine\nWORKDIR /app\nCOPY . .\nRUN npm ci --only=production\n\n# Add health check endpoint\nHEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \\\n  CMD curl -f http://localhost:3000/health || exit 1\n\nEXPOSE 3000\nCMD [\"node\", \"server.js\"]\n</code></pre> <p>Application health check endpoint:</p> <pre><code>// health.js\napp.get('/health', (req, res) =&gt; {\n  const healthcheck = {\n    uptime: process.uptime(),\n    message: 'OK',\n    timestamp: Date.now(),\n    checks: {\n      database: checkDatabase(),\n      redis: checkRedis(),\n      externalService: checkExternalService()\n    }\n  };\n\n  try {\n    res.status(200).send(healthcheck);\n  } catch (error) {\n    healthcheck.message = error;\n    res.status(503).send(healthcheck);\n  }\n});\n</code></pre>"},{"location":"advanced/production/#readiness-and-liveness-probes","title":"Readiness and Liveness Probes","text":"<p>For Kubernetes deployments:</p> <pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: myapp\nspec:\n  replicas: 3\n  template:\n    spec:\n      containers:\n      - name: myapp\n        image: myapp:latest\n        ports:\n        - containerPort: 3000\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 3000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n          timeoutSeconds: 5\n          failureThreshold: 3\n        readinessProbe:\n          httpGet:\n            path: /ready\n            port: 3000\n          initialDelaySeconds: 5\n          periodSeconds: 5\n          timeoutSeconds: 3\n          failureThreshold: 3\n</code></pre>"},{"location":"advanced/production/#logging-best-practices","title":"Logging Best Practices","text":""},{"location":"advanced/production/#structured-logging","title":"Structured Logging","text":"<p>Implement JSON-structured logging for better parsing:</p> <pre><code>// Using winston for Node.js\nconst winston = require('winston');\n\nconst logger = winston.createLogger({\n  level: process.env.LOG_LEVEL || 'info',\n  format: winston.format.combine(\n    winston.format.timestamp(),\n    winston.format.errors({ stack: true }),\n    winston.format.json()\n  ),\n  transports: [\n    new winston.transports.Console()\n  ]\n});\n\n// Usage\nlogger.info('User authenticated', {\n  userId: user.id,\n  method: 'oauth',\n  timestamp: new Date().toISOString()\n});\n</code></pre>"},{"location":"advanced/production/#log-collection-strategy","title":"Log Collection Strategy","text":"<pre><code>FROM node:18-alpine\nWORKDIR /app\n\n# Install log collection agent (if needed)\nRUN apk add --no-cache filebeat\n\nCOPY . .\nRUN npm ci --only=production\n\n# Configure logging\nENV LOG_LEVEL=info\nENV LOG_FORMAT=json\n\n# Log to stdout for container log drivers\nCMD [\"node\", \"server.js\"]\n</code></pre>"},{"location":"advanced/production/#docker-logging-configuration","title":"Docker Logging Configuration","text":"<pre><code># Configure log driver\ndocker run -d \\\n  --log-driver=fluentd \\\n  --log-opt fluentd-address=localhost:24224 \\\n  --log-opt tag=myapp \\\n  myapp:latest\n\n# Or use syslog\ndocker run -d \\\n  --log-driver=syslog \\\n  --log-opt syslog-address=tcp://log-server:514 \\\n  myapp:latest\n</code></pre>"},{"location":"advanced/production/#resource-management","title":"Resource Management","text":""},{"location":"advanced/production/#memory-and-cpu-limits","title":"Memory and CPU Limits","text":"<p>Set appropriate resource constraints:</p> <pre><code>docker run -d \\\n  --memory=\"512m\" \\\n  --cpus=\"1.0\" \\\n  --memory-swap=\"512m\" \\\n  --oom-kill-disable=false \\\n  myapp:latest\n</code></pre> <p>Docker Compose example:</p> <pre><code>version: '3.8'\nservices:\n  app:\n    image: myapp:latest\n    deploy:\n      resources:\n        limits:\n          cpus: '1.0'\n          memory: 512M\n        reservations:\n          cpus: '0.5'\n          memory: 256M\n    restart: unless-stopped\n</code></pre>"},{"location":"advanced/production/#storage-considerations","title":"Storage Considerations","text":"<pre><code>FROM node:18-alpine\nWORKDIR /app\n\n# Create non-root user\nRUN adduser -D -s /bin/sh appuser\n\n# Set up proper permissions\nCOPY --chown=appuser:appuser . .\nRUN npm ci --only=production\n\n# Use specific volume mounts for persistent data\nVOLUME [\"/app/data\", \"/app/logs\"]\n\nUSER appuser\nCMD [\"node\", \"server.js\"]\n</code></pre>"},{"location":"advanced/production/#environment-configuration","title":"Environment Configuration","text":""},{"location":"advanced/production/#configuration-management","title":"Configuration Management","text":"<p>Use environment-specific configurations:</p> <pre><code>FROM node:18-alpine\nWORKDIR /app\n\nCOPY package*.json ./\nRUN npm ci --only=production\n\nCOPY . .\n\n# Support multiple environments\nENV NODE_ENV=production\nENV CONFIG_FILE=/app/config/production.json\n\n# Allow configuration override\nCMD [\"sh\", \"-c\", \"node -r dotenv/config server.js dotenv_config_path=/app/config/${NODE_ENV}.env\"]\n</code></pre> <p>Configuration file structure:</p> <pre><code>/app/config/\n\u251c\u2500\u2500 development.env\n\u251c\u2500\u2500 staging.env\n\u251c\u2500\u2500 production.env\n\u2514\u2500\u2500 local.env\n</code></pre>"},{"location":"advanced/production/#graceful-shutdown","title":"Graceful Shutdown","text":"<p>Implement proper signal handling:</p> <pre><code>// server.js\nconst express = require('express');\nconst app = express();\nconst server = app.listen(3000);\n\n// Graceful shutdown\nprocess.on('SIGTERM', shutdown);\nprocess.on('SIGINT', shutdown);\n\nfunction shutdown() {\n  console.log('Received kill signal, shutting down gracefully');\n\n  server.close(() =&gt; {\n    console.log('Closed out remaining connections');\n\n    // Close database connections, cleanup resources\n    database.close(() =&gt; {\n      console.log('Database connection closed');\n      process.exit(0);\n    });\n  });\n\n  // Force close after 10 seconds\n  setTimeout(() =&gt; {\n    console.error('Could not close connections in time, forcefully shutting down');\n    process.exit(1);\n  }, 10000);\n}\n</code></pre>"},{"location":"advanced/production/#deployment-strategies","title":"Deployment Strategies","text":""},{"location":"advanced/production/#rolling-updates","title":"Rolling Updates","text":"<pre><code># docker-compose.yml\nversion: '3.8'\nservices:\n  app:\n    image: myapp:${VERSION:-latest}\n    deploy:\n      replicas: 3\n      update_config:\n        parallelism: 1\n        delay: 10s\n        failure_action: rollback\n        order: start-first\n      rollback_config:\n        parallelism: 1\n        delay: 10s\n        failure_action: pause\n        order: stop-first\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:3000/health\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n      start_period: 40s\n</code></pre>"},{"location":"advanced/production/#blue-green-deployment","title":"Blue-Green Deployment","text":"<pre><code>#!/bin/bash\n# deploy.sh\n\nNEW_VERSION=$1\nCURRENT_COLOR=$(docker ps --format \"table {{.Names}}\" | grep -E \"(blue|green)\" | head -1)\n\nif [[ $CURRENT_COLOR == *\"blue\"* ]]; then\n    NEW_COLOR=\"green\"\n    OLD_COLOR=\"blue\"\nelse\n    NEW_COLOR=\"blue\" \n    OLD_COLOR=\"green\"\nfi\n\n# Deploy new version\ndocker-compose -f docker-compose.${NEW_COLOR}.yml up -d\n\n# Wait for health check\nsleep 30\n\n# Check health\nif curl -f http://localhost:8080/health; then\n    # Switch traffic\n    docker-compose -f docker-compose.proxy.yml up -d --force-recreate\n\n    # Remove old version\n    docker-compose -f docker-compose.${OLD_COLOR}.yml down\n\n    echo \"Deployment successful: ${NEW_VERSION} on ${NEW_COLOR}\"\nelse\n    # Rollback\n    docker-compose -f docker-compose.${NEW_COLOR}.yml down\n    echo \"Deployment failed, keeping ${OLD_COLOR}\"\n    exit 1\nfi\n</code></pre>"},{"location":"advanced/production/#monitoring-and-observability","title":"Monitoring and Observability","text":""},{"location":"advanced/production/#application-metrics","title":"Application Metrics","text":"<pre><code>// metrics.js\nconst promClient = require('prom-client');\n\n// Create metrics\nconst httpRequestDuration = new promClient.Histogram({\n  name: 'http_request_duration_ms',\n  help: 'Duration of HTTP requests in ms',\n  labelNames: ['method', 'route', 'status']\n});\n\nconst httpRequestsTotal = new promClient.Counter({\n  name: 'http_requests_total',\n  help: 'Total number of HTTP requests',\n  labelNames: ['method', 'route', 'status']\n});\n\n// Middleware\nfunction metricsMiddleware(req, res, next) {\n  const start = Date.now();\n\n  res.on('finish', () =&gt; {\n    const duration = Date.now() - start;\n    const labels = {\n      method: req.method,\n      route: req.route?.path || req.path,\n      status: res.statusCode\n    };\n\n    httpRequestDuration.observe(labels, duration);\n    httpRequestsTotal.inc(labels);\n  });\n\n  next();\n}\n\n// Metrics endpoint\napp.get('/metrics', (req, res) =&gt; {\n  res.set('Content-Type', promClient.register.contentType);\n  res.end(promClient.register.metrics());\n});\n</code></pre>"},{"location":"advanced/production/#container-monitoring","title":"Container Monitoring","text":"<pre><code>FROM node:18-alpine\n\n# Install monitoring agent\nRUN apk add --no-cache curl\n\nWORKDIR /app\nCOPY . .\nRUN npm ci --only=production\n\n# Expose metrics port\nEXPOSE 3000 9090\n\n# Add monitoring labels\nLABEL monitoring.enabled=\"true\"\nLABEL monitoring.port=\"9090\"\nLABEL monitoring.path=\"/metrics\"\n\nCMD [\"node\", \"server.js\"]\n</code></pre>"},{"location":"advanced/production/#backup-and-disaster-recovery","title":"Backup and Disaster Recovery","text":""},{"location":"advanced/production/#data-backup-strategy","title":"Data Backup Strategy","text":"<pre><code>#!/bin/bash\n# backup.sh\n\nTIMESTAMP=$(date +%Y%m%d_%H%M%S)\nBACKUP_DIR=\"/backups\"\n\n# Database backup\ndocker exec postgres-container pg_dump -U user dbname &gt; \"${BACKUP_DIR}/db_${TIMESTAMP}.sql\"\n\n# Volume backup\ndocker run --rm \\\n  -v myapp_data:/data \\\n  -v ${BACKUP_DIR}:/backup \\\n  alpine tar czf /backup/volumes_${TIMESTAMP}.tar.gz /data\n\n# Upload to cloud storage\naws s3 cp \"${BACKUP_DIR}/db_${TIMESTAMP}.sql\" s3://my-backups/\naws s3 cp \"${BACKUP_DIR}/volumes_${TIMESTAMP}.tar.gz\" s3://my-backups/\n\n# Cleanup old backups (keep last 7 days)\nfind ${BACKUP_DIR} -name \"*.sql\" -mtime +7 -delete\nfind ${BACKUP_DIR} -name \"*.tar.gz\" -mtime +7 -delete\n</code></pre>"},{"location":"advanced/production/#disaster-recovery","title":"Disaster Recovery","text":"<pre><code># docker-compose.disaster-recovery.yml\nversion: '3.8'\nservices:\n  app:\n    image: myapp:latest\n    environment:\n      - DB_HOST=disaster-recovery-db\n      - REDIS_HOST=disaster-recovery-redis\n    deploy:\n      replicas: 2\n      placement:\n        constraints:\n          - node.labels.zone==disaster-recovery\n    volumes:\n      - disaster_recovery_data:/app/data\n\nvolumes:\n  disaster_recovery_data:\n    driver: local\n    driver_opts:\n      type: nfs\n      o: addr=backup-server,rw\n      device: \":/backup/volumes\"\n</code></pre>"},{"location":"advanced/production/#security-scanning-and-compliance","title":"Security Scanning and Compliance","text":""},{"location":"advanced/production/#automated-security-scanning","title":"Automated Security Scanning","text":"<pre><code># .github/workflows/security.yml\nname: Security Scan\non:\n  push:\n    branches: [main]\n  pull_request:\n    branches: [main]\n\njobs:\n  security-scan:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n\n    - name: Build image\n      run: docker build -t myapp:latest .\n\n    - name: Run Trivy vulnerability scanner\n      uses: aquasecurity/trivy-action@master\n      with:\n        image-ref: 'myapp:latest'\n        format: 'sarif'\n        output: 'trivy-results.sarif'\n\n    - name: Upload Trivy scan results\n      uses: github/codeql-action/upload-sarif@v2\n      with:\n        sarif_file: 'trivy-results.sarif'\n</code></pre>"},{"location":"advanced/production/#runtime-security","title":"Runtime Security","text":"<pre><code># Run with security options\ndocker run -d \\\n  --security-opt=no-new-privileges:true \\\n  --cap-drop=ALL \\\n  --cap-add=NET_BIND_SERVICE \\\n  --read-only \\\n  --tmpfs /tmp \\\n  --user 1001:1001 \\\n  myapp:latest\n</code></pre> <p>Production Docker deployment requires careful attention to security, monitoring, and reliability. These practices ensure your containers run safely and efficiently in production environments while maintaining the agility and consistency that make containers valuable.</p>"},{"location":"advanced/production/#production-checklist","title":"Production Checklist","text":"<p>Before deploying to production, verify:</p> <ul> <li> Non-root user configured</li> <li> Minimal base image used</li> <li> Secrets externalized</li> <li> Health checks implemented</li> <li> Resource limits set</li> <li> Logging configured</li> <li> Monitoring enabled</li> <li> Backup strategy defined</li> <li> Security scanning automated</li> <li> Graceful shutdown implemented</li> </ul>"},{"location":"core-concepts/","title":"Core Concepts \ud83d\udce6","text":"<p>Welcome to the most important section of your Docker journey! This is where everything starts to make sense and Docker transforms from \"magic\" to \"I totally get this!\"</p>"},{"location":"core-concepts/#what-youll-master-here","title":"What You'll Master Here","text":"<p>By the end of this section, you'll:</p> <ul> <li>\u2705 Understand Docker Images - The blueprints that make everything possible</li> <li>\u2705 Control Docker Containers - Run, stop, manage, and troubleshoot like a pro</li> <li>\u2705 Write Your Own Dockerfiles - Create custom images for any application</li> <li>\u2705 Think in \"Docker Terms\" - Images, containers, layers will be second nature</li> <li>\u2705 Debug Common Issues - Know exactly what to do when things go wrong</li> <li>\u2705 Feel confident moving to advanced topics like Docker Compose</li> </ul> <p>Time Investment</p> <p>Total time: 3-4 hours for thorough understanding</p> <p>In a hurry? Focus on Images and Containers first (2 hours), come back to Dockerfiles later!</p>"},{"location":"core-concepts/#your-learning-journey","title":"Your Learning Journey","text":"<p>These concepts build on each other like building blocks. Follow in order for the best experience:</p>"},{"location":"core-concepts/#1-docker-images","title":"1. \ud83d\uddbc\ufe0f Docker Images","text":"<p>What: The foundation - understand what images are and how they work</p> <p>Why: Images are the blueprints for everything in Docker. Get this right, and containers make perfect sense!</p> <p>Time: 60-90 minutes</p> <p>Real-world analogy: Think of images like app installers - they contain everything needed to run software, but they're not running yet.</p> <p>You'll learn: - What makes up a Docker image (layers, metadata, files) - How to find and download images from Docker Hub - The difference between base images and application images - How to inspect images and understand their contents</p> <p>Commands you'll master</p> <pre><code>docker images\ndocker pull ubuntu:22.04\ndocker inspect nginx\ndocker history python:3.9\n</code></pre>"},{"location":"core-concepts/#2-docker-containers","title":"2. \ud83d\udce6 Docker Containers","text":"<p>What: Bring images to life - create, run, and manage containers</p> <p>Why: Containers are where the magic happens! This is Docker in action.</p> <p>Time: 90-120 minutes</p> <p>Real-world analogy: If images are app installers, containers are the running applications created from those installers.</p> <p>You'll learn: - How to run containers from images (interactive and detached) - Container lifecycle: create, start, stop, restart, remove - How to get inside running containers to debug - Managing container resources and environment variables - Container networking basics</p> <p>Key breakthrough moment: When you realize you can run multiple containers from the same image - like having multiple instances of the same app!</p> <p>Commands you'll master</p> <pre><code>docker run -it ubuntu bash\ndocker ps -a\ndocker exec -it container_name bash\ndocker logs container_name\ndocker stop/start/restart container_name\n</code></pre>"},{"location":"core-concepts/#3-dockerfile","title":"3. \ud83d\udccb Dockerfile","text":"<p>What: Write recipes to build your own custom Docker images</p> <p>Why: This is where Docker becomes incredibly powerful - creating images tailored exactly to your needs!</p> <p>Time: 90-120 minutes</p> <p>Real-world analogy: Dockerfiles are like cooking recipes - step-by-step instructions to create exactly what you want.</p> <p>You'll learn: - Dockerfile syntax and best practices - How to choose the right base image - Installing software and copying files - Setting environment variables and working directories - Building efficient, secure images - Multi-stage builds (advanced but game-changing!)</p> <p>Game-changer moment: When you build your first custom image and run it as a container - you've just created your own piece of software infrastructure!</p> <p>Commands you'll master</p> <pre><code>docker build -t myapp:latest .\ndocker build --no-cache -t myapp:v2 .\ndocker tag myapp:latest myapp:production\n</code></pre>"},{"location":"core-concepts/#why-this-order-matters","title":"Why This Order Matters","text":""},{"location":"core-concepts/#the-logical-flow","title":"\ud83c\udfaf The Logical Flow:","text":"<ol> <li>Images First \u2192 Understand the foundation</li> <li>Containers Second \u2192 See images in action</li> <li>Dockerfiles Third \u2192 Create your own images</li> </ol>"},{"location":"core-concepts/#the-mental-model","title":"\ud83e\udde0 The Mental Model:","text":"<p>Think of it like learning to drive: - Images = Understanding cars (what they are, how they work) - Containers = Actually driving (starting, stopping, controlling) - Dockerfiles = Building your own custom car</p>"},{"location":"core-concepts/#the-practical-benefit","title":"\u26a1 The Practical Benefit:","text":"<p>By following this order, when you get to Dockerfiles, you'll already understand: - What you're trying to create (images) - How the end result will be used (containers) - Common problems and how to solve them</p>"},{"location":"core-concepts/#different-learning-approaches","title":"Different Learning Approaches","text":"<p>Choose what works best for your style:</p> Deep DiverPractical BuilderConcept MapperReference User <p>Perfect for you if: You want to understand every detail and become truly proficient</p> <p>Approach:  - Read each page completely with all examples - Try every command and experiment with variations - Build multiple practice projects</p> <p>Time: 4-5 hours (expert-level understanding)</p> <p>Bonus: You'll rarely need to look things up later!</p> <p>Perfect for you if: You learn best by building real things</p> <p>Approach: - Focus on examples and hands-on exercises - Skip theory sections initially, come back later - Start building your own Dockerfile early</p> <p>Time: 3-4 hours (strong practical skills)</p> <p>Bonus: You'll have working projects to show!</p> <p>Perfect for you if: You need the big picture before diving into details</p> <p>Approach: - Read all three introductions first - Focus on analogies and mental models - Practice with simple examples</p> <p>Time: 2-3 hours (solid conceptual foundation)</p> <p>Bonus: Advanced topics will make sense faster!</p> <p>Perfect for you if: You have some Docker experience but want to fill gaps</p> <p>Approach: - Jump to specific sections you need - Focus on commands and examples - Use troubleshooting sections when stuck</p> <p>Time: 1-2 hours (targeted learning)</p> <p>Bonus: Quick wins and immediate productivity!</p>"},{"location":"core-concepts/#prerequisites-check","title":"Prerequisites Check","text":"<p>Before diving in, make sure you have:</p>"},{"location":"core-concepts/#completed-requirements","title":"\u2705 Completed Requirements:","text":"<ul> <li>Getting Started section completed</li> <li>Docker installed and running</li> <li>Successfully ran <code>docker run hello-world</code></li> <li>Basic familiarity with terminal/command line</li> </ul>"},{"location":"core-concepts/#mental-prerequisites","title":"\ud83e\udde0 Mental Prerequisites:","text":"<ul> <li>Comfort with the idea that Docker is about packaging applications</li> <li>Understanding that containers are isolated environments</li> <li>Basic grasp that Docker helps with \"it works on my machine\" problems</li> </ul>"},{"location":"core-concepts/#helpful-context-not-required","title":"\ud83d\udcda Helpful Context (not required):","text":"<ul> <li>Experience with installing software</li> <li>Basic understanding of what web servers do</li> <li>Curiosity about how applications are deployed</li> </ul>"},{"location":"core-concepts/#common-aha-moments","title":"Common \"Aha!\" Moments","text":"<p>Get ready for these breakthrough realizations:</p>"},{"location":"core-concepts/#images-are-like-templates","title":"\ud83d\udca1 \"Images are like templates!\"","text":"<p>Usually happens in the Images section</p> <p>The moment you realize that one image can create many containers - like using a cookie cutter to make many cookies.</p>"},{"location":"core-concepts/#i-can-get-inside-a-running-container","title":"\ud83d\udd27 \"I can get inside a running container!\"","text":"<p>Usually happens in the Containers section</p> <p>When you first use <code>docker exec -it container bash</code> and realize you can debug and explore containers from the inside.</p>"},{"location":"core-concepts/#i-just-built-my-own-image","title":"\ud83c\udfd7\ufe0f \"I just built my own image!\"","text":"<p>Usually happens in the Dockerfile section</p> <p>The incredible feeling when you write a Dockerfile, build it, and run your custom creation.</p>"},{"location":"core-concepts/#docker-isnt-magic-its-logical","title":"\ud83c\udf1f \"Docker isn't magic - it's logical!\"","text":"<p>Usually happens by the end</p> <p>Everything clicks and Docker transforms from mysterious to methodical.</p>"},{"location":"core-concepts/#what-if-you-get-confused","title":"What If You Get Confused?","text":"<p>Don't worry - this is the section where things can feel overwhelming at first!</p>"},{"location":"core-concepts/#i-dont-understand-the-difference-between-images-and-containers","title":"\ud83e\udd14 \"I don't understand the difference between images and containers\"","text":"<ul> <li>This is normal! It's the #1 confusion point</li> <li>Focus on the analogies (templates vs instances, recipes vs meals)</li> <li>Try creating multiple containers from the same image</li> </ul>"},{"location":"core-concepts/#there-are-too-many-commands-to-remember","title":"\ud83d\ude35 \"There are too many commands to remember\"","text":"<ul> <li>Don't memorize! Focus on understanding what each command does</li> <li>Keep the Command Reference handy</li> <li>Practice with the same few commands until they stick</li> </ul>"},{"location":"core-concepts/#my-container-wont-start-keep-crashing","title":"\ud83d\udd25 \"My container won't start / keep crashing\"","text":"<ul> <li>Super common! Check our troubleshooting sections</li> <li>Use <code>docker logs container_name</code> - it tells you everything</li> <li>Start with simpler examples and build up complexity</li> </ul>"},{"location":"core-concepts/#dockerfiles-are-confusing","title":"\ud83d\udcad \"Dockerfiles are confusing\"","text":"<ul> <li>Start simple! Begin with basic examples</li> <li>Think of each line as a step you'd do manually</li> <li>Copy working examples and modify them gradually</li> </ul>"},{"location":"core-concepts/#success-milestones","title":"Success Milestones","text":"<p>Celebrate these wins as you progress:</p>"},{"location":"core-concepts/#after-images","title":"\ud83c\udfaf After Images:","text":"<ul> <li> You can explain what a Docker image contains</li> <li> You can pull images from Docker Hub</li> <li> You understand image layers and why they matter</li> <li> You can inspect images to see their details</li> </ul>"},{"location":"core-concepts/#after-containers","title":"\ud83c\udfaf After Containers:","text":"<ul> <li> You can run containers in interactive and detached modes</li> <li> You can get inside running containers to explore</li> <li> You can manage container lifecycle (start, stop, remove)</li> <li> You can read container logs to debug issues</li> </ul>"},{"location":"core-concepts/#after-dockerfiles","title":"\ud83c\udfaf After Dockerfiles:","text":"<ul> <li> You can write a basic Dockerfile from scratch</li> <li> You can build images from your Dockerfiles</li> <li> You can run containers from your custom images</li> <li> You understand best practices for efficient images</li> </ul>"},{"location":"core-concepts/#real-student-success-stories","title":"Real Student Success Stories","text":"<p>\"The images/containers distinction finally clicked when I realized it's like having a master copy (image) and making photocopies (containers) from it!\" \u2014 Alex, Backend Developer</p> <p>\"I was intimidated by Dockerfiles until I saw them as just automated installation scripts. Game changer!\" \u2014 Maria, Full Stack Developer</p> <p>\"Getting inside a running container with exec was mind-blowing. Suddenly debugging made sense!\" \u2014 David, DevOps Beginner</p> <p>\"Built my first custom image today and deployed it. I finally feel like I 'get' Docker!\" \u2014 Rachel, Software Engineer</p>"},{"location":"core-concepts/#ready-to-master-dockers-core","title":"Ready to Master Docker's Core?","text":"<p>You're about to learn the skills that will make you dangerous with Docker! These concepts are the foundation that everything else builds on.</p> <ul> <li> <p>\ud83d\uddbc\ufe0f Start with Images</p> <p>Understand the blueprints that make everything possible.</p> <p>Learn Docker Images \u2192</p> </li> <li> <p>\ud83d\udce6 Jump to Containers</p> <p>Already know images? See them in action!</p> <p>Master Containers \u2192</p> </li> <li> <p>\ud83d\udccb Create with Dockerfiles</p> <p>Ready to build your own? Start creating!</p> <p>Write Dockerfiles \u2192</p> </li> <li> <p>\ud83c\udfaf Need a Refresher?</p> <p>Quick review of Getting Started concepts.</p> <p>Review Basics \u2192</p> </li> </ul> <p>You're about to become a Docker pro!</p> <p>These core concepts are where Docker transforms from \"confusing tool\" to \"indispensable skill.\" Take your time, experiment fearlessly, and remember - every expert was once a beginner who kept practicing!</p> <p>Let's turn you into a Docker expert! \ud83d\udc33</p>"},{"location":"core-concepts/containers/","title":"Containers","text":""},{"location":"core-concepts/containers/#docker-containers","title":"Docker Containers","text":"<p>Containers are where Docker images come to life! If images are blueprints, containers are the actual running applications built from those blueprints.</p>"},{"location":"core-concepts/containers/#what-youll-learn","title":"What You'll Learn","text":"<p>By the end of this page, you'll:</p> <ul> <li>Create containers from images and manage their lifecycle</li> <li>Work with interactive and background containers</li> <li>Debug container issues using logs and inspection tools</li> <li>Understand container isolation and resource management</li> <li>Master essential container commands for daily use</li> </ul> <p>Time to Complete</p> <p>60-90 minutes including hands-on practice</p>"},{"location":"core-concepts/containers/#understanding-containers","title":"Understanding Containers","text":"<p>Think of containers like lightweight virtual machines that:</p> <ul> <li>Share the host OS but have isolated processes</li> <li>Start instantly compared to traditional VMs</li> <li>Use minimal resources while providing complete isolation</li> <li>Are portable - run identically anywhere Docker is installed</li> </ul>"},{"location":"core-concepts/containers/#container-vs-virtual-machine","title":"Container vs Virtual Machine","text":"Container Virtual Machine Shares host OS kernel Includes full guest OS Starts in seconds Takes minutes to boot Minimal resource overhead Heavy resource usage Lightweight (MBs) Heavy (GBs)"},{"location":"core-concepts/containers/#your-first-container","title":"Your First Container","text":"<p>Let's create and run your first container:</p> <pre><code>docker run hello-world\n</code></pre> <p>What happens: <pre><code>Unable to find image 'hello-world:latest' locally\nlatest: Pulling from library/hello-world\nHello from Docker!\nThis message shows that your installation appears to be working correctly.\n</code></pre></p> <p>Docker automatically: 1. Downloaded the <code>hello-world</code> image 2. Created a container from it 3. Ran the program inside the container 4. Showed you the output</p>"},{"location":"core-concepts/containers/#interactive-containers","title":"Interactive Containers","text":"<p>Get inside a container and explore:</p> <pre><code>docker run -it ubuntu:22.04 bash\n</code></pre> <p>Command breakdown: - <code>-it</code> = Interactive mode with terminal - <code>ubuntu:22.04</code> = The image to use - <code>bash</code> = Command to run inside container</p> <p>You'll see a prompt like: <pre><code>root@a1b2c3d4e5f6:/#\n</code></pre></p> <p>Try these commands inside the container:</p> <pre><code># Check the OS\ncat /etc/os-release\n\n# List files\nls -la\n\n# Install something\napt update &amp;&amp; apt install -y curl\n\n# Test it works\ncurl --version\n\n# Exit the container\nexit\n</code></pre>"},{"location":"core-concepts/containers/#background-containers","title":"Background Containers","text":"<p>Run services that keep running:</p> <pre><code># Run nginx web server in background\ndocker run -d -p 8080:80 nginx\n</code></pre> <ul> <li><code>-d</code> = Detached mode (runs in background)</li> <li><code>-p 8080:80</code> = Map port 8080 on your machine to port 80 in container</li> </ul> <p>Test it: Open your browser to <code>http://localhost:8080</code></p>"},{"location":"core-concepts/containers/#essential-commands","title":"Essential Commands","text":""},{"location":"core-concepts/containers/#list-containers","title":"List Containers","text":"<p>See running containers: <pre><code>docker ps\n</code></pre></p> <p>See all containers (including stopped): <pre><code>docker ps -a\n</code></pre></p>"},{"location":"core-concepts/containers/#startstop-containers","title":"Start/Stop Containers","text":"<pre><code># Stop a running container\ndocker stop container_name\n\n# Start a stopped container  \ndocker start container_name\n\n# Restart a container\ndocker restart container_name\n\n# Force kill a container\ndocker kill container_name\n</code></pre>"},{"location":"core-concepts/containers/#get-container-information","title":"Get Container Information","text":"<pre><code># View container logs\ndocker logs container_name\n\n# Follow logs in real-time\ndocker logs -f container_name\n\n# See resource usage\ndocker stats container_name\n\n# Get detailed container info\ndocker inspect container_name\n</code></pre>"},{"location":"core-concepts/containers/#execute-commands-in-running-containers","title":"Execute Commands in Running Containers","text":"<pre><code># Get a shell inside running container\ndocker exec -it container_name bash\n\n# Run a single command\ndocker exec container_name ls /app\n\n# Run command as specific user\ndocker exec -u root container_name whoami\n</code></pre>"},{"location":"core-concepts/containers/#container-cleanup","title":"Container Cleanup","text":"<pre><code># Remove a stopped container\ndocker rm container_name\n\n# Force remove a running container\ndocker rm -f container_name\n\n# Remove all stopped containers\ndocker container prune\n\n# Remove everything unused\ndocker system prune\n</code></pre>"},{"location":"core-concepts/containers/#hands-on-practice","title":"Hands-On Practice","text":""},{"location":"core-concepts/containers/#exercise-1-web-server-setup","title":"Exercise 1: Web Server Setup","text":"<pre><code># Step 1: Run nginx with custom name\ndocker run -d -p 8080:80 --name my-web nginx\n\n# Step 2: Check it's running\ndocker ps\n\n# Step 3: View logs\ndocker logs my-web\n\n# Step 4: Get inside the container\ndocker exec -it my-web bash\n\n# Step 5: Explore web files\nls /usr/share/nginx/html/\n\n# Step 6: Exit and cleanup\nexit\ndocker stop my-web\ndocker rm my-web\n</code></pre>"},{"location":"core-concepts/containers/#exercise-2-database-container","title":"Exercise 2: Database Container","text":"<pre><code># Run MySQL database\ndocker run -d --name my-db \\\n  -e MYSQL_ROOT_PASSWORD=secret123 \\\n  -e MYSQL_DATABASE=testdb \\\n  mysql:8.0\n\n# Wait for startup (watch logs)\ndocker logs -f my-db\n\n# Connect to database\ndocker exec -it my-db mysql -u root -psecret123\n\n# Try some SQL commands\nSHOW DATABASES;\nUSE testdb;\nCREATE TABLE users (id INT, name VARCHAR(50));\nINSERT INTO users VALUES (1, 'Alice');\nSELECT * FROM users;\nexit\n\n# Cleanup\ndocker stop my-db\ndocker rm my-db\n</code></pre>"},{"location":"core-concepts/containers/#container-options","title":"Container Options","text":""},{"location":"core-concepts/containers/#port-mapping","title":"Port Mapping","text":"<pre><code># Map single port\ndocker run -d -p 8080:80 nginx\n\n# Map multiple ports\ndocker run -d -p 8080:80 -p 8443:443 nginx\n\n# Map to specific interface\ndocker run -d -p 127.0.0.1:8080:80 nginx\n</code></pre>"},{"location":"core-concepts/containers/#volume-mounting","title":"Volume Mounting","text":"<pre><code># Mount current directory\ndocker run -it -v $(pwd):/app ubuntu bash\n\n# Mount specific folder\ndocker run -it -v /home/user/data:/data ubuntu bash\n\n# Named volume (persisted)\ndocker run -it -v mydata:/data ubuntu bash\n</code></pre>"},{"location":"core-concepts/containers/#environment-variables","title":"Environment Variables","text":"<pre><code># Set single variable\ndocker run -e API_KEY=secret123 myapp\n\n# Set multiple variables\ndocker run -e DB_HOST=localhost -e DB_PORT=5432 myapp\n\n# Load from file\ndocker run --env-file .env myapp\n</code></pre>"},{"location":"core-concepts/containers/#resource-limits","title":"Resource Limits","text":"<pre><code># Limit memory\ndocker run --memory=512m nginx\n\n# Limit CPU\ndocker run --cpus=\"1.5\" nginx\n\n# Limit both\ndocker run --memory=1g --cpus=\"2.0\" nginx\n</code></pre>"},{"location":"core-concepts/containers/#troubleshooting","title":"Troubleshooting","text":""},{"location":"core-concepts/containers/#container-wont-start","title":"Container Won't Start","text":"<p>Check the logs first: <pre><code>docker logs container_name\n</code></pre></p> <p>Common issues: - Port already in use - Missing environment variables - Wrong command or entrypoint - Insufficient permissions</p>"},{"location":"core-concepts/containers/#cant-connect-to-service","title":"Can't Connect to Service","text":"<p>Debug checklist: <pre><code># Is container running?\ndocker ps\n\n# Check port mapping\ndocker port container_name\n\n# Test from inside container\ndocker exec container_name curl localhost:80\n\n# Check if service is listening\ndocker exec container_name netstat -tlnp\n</code></pre></p>"},{"location":"core-concepts/containers/#container-exits-immediately","title":"Container Exits Immediately","text":"<p>Run in interactive mode to see errors: <pre><code>docker run -it problematic_image bash\n</code></pre></p> <p>Or check what command is being run: <pre><code>docker inspect image_name --format='{{.Config.Cmd}}'\n</code></pre></p>"},{"location":"core-concepts/containers/#best-practices","title":"Best Practices","text":""},{"location":"core-concepts/containers/#naming-and-organization","title":"Naming and Organization","text":"<pre><code># Good: Use descriptive names\ndocker run -d --name web-server nginx\ndocker run -d --name user-db mysql\n\n# Avoid: Random names\ndocker run -d nginx\n</code></pre>"},{"location":"core-concepts/containers/#resource-management","title":"Resource Management","text":"<pre><code># Good: Set resource limits\ndocker run -d --memory=512m --cpus=\"1.0\" myapp\n\n# Monitor resource usage\ndocker stats\n</code></pre>"},{"location":"core-concepts/containers/#security","title":"Security","text":"<pre><code># Good: Run as non-root user\ndocker run -d -u nginx nginx\n\n# Good: Use read-only filesystem when possible\ndocker run -d --read-only nginx\n\n# Good: Drop unnecessary capabilities\ndocker run -d --cap-drop=ALL --cap-add=NET_BIND_SERVICE nginx\n</code></pre>"},{"location":"core-concepts/containers/#cleanup","title":"Cleanup","text":"<pre><code># Regular maintenance\ndocker container prune\ndocker image prune\ndocker system prune\n</code></pre>"},{"location":"core-concepts/containers/#container-lifecycle","title":"Container Lifecycle","text":"<p>Understanding container states:</p> <ol> <li>Created - Container exists but not running</li> <li>Running - Container is actively executing</li> <li>Paused - Container processes frozen (can resume)</li> <li>Stopped - Container finished or was stopped</li> <li>Removed - Container deleted completely</li> </ol> <pre><code># See container state\ndocker ps -a\n\n# Pause/unpause containers\ndocker pause container_name\ndocker unpause container_name\n</code></pre>"},{"location":"core-concepts/containers/#whats-next","title":"What's Next?","text":"<p>Great! You now understand how to create, manage, and troubleshoot Docker containers. </p> <p>Next up: Dockerfile \u2192 - Learn to create your own custom images by writing Dockerfiles.</p>"},{"location":"core-concepts/containers/#key-takeaways","title":"Key Takeaways","text":"<ul> <li>Containers are running instances of images</li> <li>Use <code>-it</code> for interactive containers, <code>-d</code> for background services</li> <li>Always name your containers for easier management</li> <li>Use <code>docker exec</code> to get inside running containers for debugging</li> <li>Clean up unused containers regularly to save space</li> <li>Set resource limits in production environments</li> </ul>"},{"location":"core-concepts/dockerfile/","title":"Dockerfile","text":"<p>A Dockerfile is like a recipe that tells Docker exactly how to build a custom image. Instead of manually setting up an environment, you write step-by-step instructions that Docker can follow automatically.</p>"},{"location":"core-concepts/dockerfile/#what-youll-learn","title":"What You'll Learn","text":"<p>By the end of this page, you'll:</p> <ul> <li>Write your first Dockerfile from scratch</li> <li>Understand essential Dockerfile instructions</li> <li>Build custom images from your Dockerfiles</li> <li>Follow best practices for efficient images</li> <li>Debug common Dockerfile issues</li> <li>Create multi-stage builds for production</li> </ul> <p>Time to Complete</p> <p>90-120 minutes including building practice images</p>"},{"location":"core-concepts/dockerfile/#understanding-dockerfiles","title":"Understanding Dockerfiles","text":"<p>Think of a Dockerfile as:</p> <ul> <li>Cooking recipe - Step-by-step instructions to create something</li> <li>Installation script - Automated way to set up software</li> <li>Blueprint - Plan for building exactly what you need</li> </ul>"},{"location":"core-concepts/dockerfile/#dockerfile-vs-manual-setup","title":"Dockerfile vs Manual Setup","text":"Manual Setup Dockerfile Run commands one by one Write all commands in file Hard to remember steps Document everything Error-prone repetition Automated and consistent Hard to share setup Share one simple file"},{"location":"core-concepts/dockerfile/#your-first-dockerfile","title":"Your First Dockerfile","text":"<p>Let's create a simple web server:</p> <p>Create a new directory: <pre><code>mkdir my-docker-app\ncd my-docker-app\n</code></pre></p> <p>Create a simple HTML file: <pre><code>cat &gt; index.html &lt;&lt; 'EOF'\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;My Docker App&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Hello from Docker!&lt;/h1&gt;\n    &lt;p&gt;This page is served by nginx running in a Docker container.&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\nEOF\n</code></pre></p> <p>Create your first Dockerfile: <pre><code>cat &gt; Dockerfile &lt;&lt; 'EOF'\nFROM nginx:alpine\nCOPY index.html /usr/share/nginx/html/index.html\nEXPOSE 80\nEOF\n</code></pre></p> <p>Build your image: <pre><code>docker build -t my-web-app .\n</code></pre></p> <p>Run your container: <pre><code>docker run -d -p 8080:80 my-web-app\n</code></pre></p> <p>Test it: Open <code>http://localhost:8080</code> - you'll see your custom page!</p>"},{"location":"core-concepts/dockerfile/#essential-dockerfile-instructions","title":"Essential Dockerfile Instructions","text":""},{"location":"core-concepts/dockerfile/#from-choose-base-image","title":"FROM - Choose Base Image","text":"<p>Every Dockerfile starts with <code>FROM</code>:</p> <pre><code># Use official Python image\nFROM python:3.9-slim\n\n# Use specific version for consistency\nFROM ubuntu:22.04\n\n# Use minimal Alpine Linux\nFROM alpine:3.18\n</code></pre>"},{"location":"core-concepts/dockerfile/#copy-and-add-add-files","title":"COPY and ADD - Add Files","text":"<p>Copy files from your computer into the image:</p> <pre><code># Copy single file\nCOPY app.py /app/app.py\n\n# Copy entire directory\nCOPY . /app/\n\n# Copy with different name\nCOPY config.txt /app/settings.conf\n\n# ADD can also download files (use COPY when possible)\nADD https://example.com/file.tar.gz /tmp/\n</code></pre>"},{"location":"core-concepts/dockerfile/#run-execute-commands","title":"RUN - Execute Commands","text":"<p>Install software and run commands:</p> <pre><code># Install packages (Ubuntu/Debian)\nRUN apt-get update &amp;&amp; apt-get install -y \\\n    curl \\\n    git \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# Install packages (Alpine)\nRUN apk add --no-cache curl git\n\n# Install Python packages\nRUN pip install flask requests\n\n# Multiple commands in one RUN (better for image size)\nRUN apt-get update &amp;&amp; \\\n    apt-get install -y curl &amp;&amp; \\\n    curl -O https://example.com/file.tar.gz &amp;&amp; \\\n    tar -xzf file.tar.gz &amp;&amp; \\\n    rm file.tar.gz\n</code></pre>"},{"location":"core-concepts/dockerfile/#workdir-set-working-directory","title":"WORKDIR - Set Working Directory","text":"<p>Set where commands run:</p> <pre><code># Set working directory\nWORKDIR /app\n\n# Now all commands run in /app\nCOPY . .\nRUN pip install -r requirements.txt\n</code></pre>"},{"location":"core-concepts/dockerfile/#expose-document-ports","title":"EXPOSE - Document Ports","text":"<p>Tell Docker which ports your app uses:</p> <pre><code># Web application\nEXPOSE 80\nEXPOSE 443\n\n# Database\nEXPOSE 5432\n\n# Multiple ports\nEXPOSE 8000 8001 8002\n</code></pre>"},{"location":"core-concepts/dockerfile/#env-set-environment-variables","title":"ENV - Set Environment Variables","text":"<pre><code># Set single variable\nENV API_URL=https://api.example.com\n\n# Set multiple variables\nENV DEBUG=true \\\n    LOG_LEVEL=info \\\n    PORT=8000\n</code></pre>"},{"location":"core-concepts/dockerfile/#cmd-default-command","title":"CMD - Default Command","text":"<p>What runs when container starts:</p> <pre><code># Run Python app\nCMD [\"python\", \"app.py\"]\n\n# Run web server\nCMD [\"nginx\", \"-g\", \"daemon off;\"]\n\n# Shell form (less preferred)\nCMD python app.py\n</code></pre>"},{"location":"core-concepts/dockerfile/#entrypoint-fixed-command","title":"ENTRYPOINT - Fixed Command","text":"<p>Like CMD but can't be overridden:</p> <pre><code># Always run this script\nENTRYPOINT [\"./startup.sh\"]\n\n# Combine with CMD for default arguments\nENTRYPOINT [\"python\", \"app.py\"]\nCMD [\"--port\", \"8000\"]\n</code></pre>"},{"location":"core-concepts/dockerfile/#practical-examples","title":"Practical Examples","text":""},{"location":"core-concepts/dockerfile/#example-1-python-web-app","title":"Example 1: Python Web App","text":"<p>Create project structure: <pre><code>mkdir python-app\ncd python-app\n</code></pre></p> <p>Create a simple Flask app: <pre><code>cat &gt; app.py &lt;&lt; 'EOF'\nfrom flask import Flask\n\napp = Flask(__name__)\n\n@app.route('/')\ndef hello():\n    return '&lt;h1&gt;Hello from Python + Docker!&lt;/h1&gt;'\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)\nEOF\n</code></pre></p> <p>Create requirements file: <pre><code>cat &gt; requirements.txt &lt;&lt; 'EOF'\nflask==2.3.2\nEOF\n</code></pre></p> <p>Create Dockerfile: <pre><code>cat &gt; Dockerfile &lt;&lt; 'EOF'\nFROM python:3.9-slim\n\nWORKDIR /app\n\nCOPY requirements.txt .\nRUN pip install -r requirements.txt\n\nCOPY app.py .\n\nEXPOSE 5000\n\nCMD [\"python\", \"app.py\"]\nEOF\n</code></pre></p> <p>Build and run: <pre><code>docker build -t python-web .\ndocker run -d -p 5000:5000 python-web\n</code></pre></p>"},{"location":"core-concepts/dockerfile/#example-2-nodejs-application","title":"Example 2: Node.js Application","text":"<pre><code>FROM node:18-alpine\n\nWORKDIR /app\n\n# Copy package files first (better caching)\nCOPY package*.json ./\nRUN npm install\n\n# Copy application code\nCOPY . .\n\nEXPOSE 3000\n\nCMD [\"npm\", \"start\"]\n</code></pre>"},{"location":"core-concepts/dockerfile/#example-3-multi-stage-build","title":"Example 3: Multi-Stage Build","text":"<p>For smaller production images:</p> <pre><code># Stage 1: Build stage\nFROM node:18-alpine AS builder\nWORKDIR /app\nCOPY package*.json ./\nRUN npm install\nCOPY . .\nRUN npm run build\n\n# Stage 2: Production stage\nFROM nginx:alpine\nCOPY --from=builder /app/dist /usr/share/nginx/html\nEXPOSE 80\nCMD [\"nginx\", \"-g\", \"daemon off;\"]\n</code></pre>"},{"location":"core-concepts/dockerfile/#building-images","title":"Building Images","text":""},{"location":"core-concepts/dockerfile/#basic-build","title":"Basic Build","text":"<pre><code># Build with tag\ndocker build -t my-app .\n\n# Build with version tag\ndocker build -t my-app:v1.0 .\n\n# Build from specific directory\ndocker build -t my-app ./my-project/\n</code></pre>"},{"location":"core-concepts/dockerfile/#build-options","title":"Build Options","text":"<pre><code># Build without cache (clean build)\ndocker build --no-cache -t my-app .\n\n# Build with build arguments\ndocker build --build-arg API_URL=https://api.com -t my-app .\n\n# Build specific target in multi-stage\ndocker build --target builder -t my-app-dev .\n</code></pre>"},{"location":"core-concepts/dockerfile/#using-dockerignore","title":"Using .dockerignore","text":"<p>Create <code>.dockerignore</code> to exclude files:</p> <pre><code>cat &gt; .dockerignore &lt;&lt; 'EOF'\nnode_modules\nnpm-debug.log\n.git\n.gitignore\nREADME.md\n.env\n.DS_Store\nEOF\n</code></pre>"},{"location":"core-concepts/dockerfile/#best-practices","title":"Best Practices","text":""},{"location":"core-concepts/dockerfile/#layer-optimization","title":"Layer Optimization","text":"<pre><code># Bad: Creates many layers\nRUN apt-get update\nRUN apt-get install -y curl\nRUN apt-get install -y git\nRUN apt-get clean\n\n# Good: Single layer\nRUN apt-get update &amp;&amp; \\\n    apt-get install -y curl git &amp;&amp; \\\n    apt-get clean &amp;&amp; \\\n    rm -rf /var/lib/apt/lists/*\n</code></pre>"},{"location":"core-concepts/dockerfile/#caching-strategy","title":"Caching Strategy","text":"<pre><code># Bad: Changes to app code invalidate pip install\nCOPY . /app\nRUN pip install -r requirements.txt\n\n# Good: Install dependencies first\nCOPY requirements.txt /app/\nRUN pip install -r requirements.txt\nCOPY . /app\n</code></pre>"},{"location":"core-concepts/dockerfile/#security","title":"Security","text":"<pre><code># Create non-root user\nRUN addgroup -g 1001 -S nodejs &amp;&amp; \\\n    adduser -S nextjs -u 1001\n\n# Switch to non-root user\nUSER nextjs\n\n# Use specific versions\nFROM node:18.17.0-alpine\n</code></pre>"},{"location":"core-concepts/dockerfile/#size-optimization","title":"Size Optimization","text":"<pre><code># Use Alpine images\nFROM python:3.9-alpine\n\n# Remove package caches\nRUN apk add --no-cache curl &amp;&amp; \\\n    curl -O https://example.com/file &amp;&amp; \\\n    rm -rf /var/cache/apk/*\n\n# Multi-stage builds\nFROM node:18 AS builder\n# ... build steps ...\n\nFROM nginx:alpine\nCOPY --from=builder /app/dist /usr/share/nginx/html\n</code></pre>"},{"location":"core-concepts/dockerfile/#troubleshooting","title":"Troubleshooting","text":""},{"location":"core-concepts/dockerfile/#build-fails","title":"Build Fails","text":"<p>Check each step: <pre><code># Build with verbose output\ndocker build --progress=plain -t my-app .\n\n# Run specific commands interactively\ndocker run -it python:3.9-slim bash\n</code></pre></p>"},{"location":"core-concepts/dockerfile/#image-too-large","title":"Image Too Large","text":"<pre><code># Check image size\ndocker images\n\n# Analyze layers\ndocker history my-app\n\n# Use dive tool for detailed analysis\ndocker run --rm -it \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  wagoodman/dive:latest my-app\n</code></pre>"},{"location":"core-concepts/dockerfile/#container-exits-immediately","title":"Container Exits Immediately","text":"<pre><code># Check what command is running\ndocker inspect my-app --format='{{.Config.Cmd}}'\n\n# Run with different command to debug\ndocker run -it my-app bash\n\n# Check logs\ndocker logs container_name\n</code></pre>"},{"location":"core-concepts/dockerfile/#advanced-concepts","title":"Advanced Concepts","text":""},{"location":"core-concepts/dockerfile/#build-arguments","title":"Build Arguments","text":"<pre><code>ARG API_URL=https://default-api.com\nARG VERSION=latest\n\nRUN echo \"Building version $VERSION\"\nENV API_ENDPOINT=$API_URL\n</code></pre> <p>Build with arguments: <pre><code>docker build --build-arg API_URL=https://prod-api.com --build-arg VERSION=1.0 -t my-app .\n</code></pre></p>"},{"location":"core-concepts/dockerfile/#health-checks","title":"Health Checks","text":"<pre><code>HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \\\n  CMD curl -f http://localhost/ || exit 1\n</code></pre>"},{"location":"core-concepts/dockerfile/#multiple-architectures","title":"Multiple Architectures","text":"<pre><code>FROM --platform=$BUILDPLATFORM node:18-alpine\nARG TARGETPLATFORM\nARG BUILDPLATFORM\n\nRUN echo \"Building on $BUILDPLATFORM for $TARGETPLATFORM\"\n</code></pre>"},{"location":"core-concepts/dockerfile/#hands-on-exercise","title":"Hands-On Exercise","text":"<p>Create a complete web application:</p> <ol> <li> <p>Create project directory: <pre><code>mkdir full-stack-app\ncd full-stack-app\n</code></pre></p> </li> <li> <p>Create a simple API: <pre><code>cat &gt; app.py &lt;&lt; 'EOF'\nfrom flask import Flask, jsonify\nimport os\n\napp = Flask(__name__)\n\n@app.route('/')\ndef home():\n    return jsonify({\n        \"message\": \"Hello from Docker!\",\n        \"version\": os.getenv('APP_VERSION', '1.0'),\n        \"environment\": os.getenv('NODE_ENV', 'development')\n    })\n\n@app.route('/health')\ndef health():\n    return jsonify({\"status\": \"healthy\"})\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)\nEOF\n</code></pre></p> </li> <li> <p>Create requirements: <pre><code>echo \"flask==2.3.2\" &gt; requirements.txt\n</code></pre></p> </li> <li> <p>Create Dockerfile: <pre><code>cat &gt; Dockerfile &lt;&lt; 'EOF'\nFROM python:3.9-slim\n\n# Set build argument\nARG APP_VERSION=1.0\nENV APP_VERSION=$APP_VERSION\n\n# Create non-root user\nRUN useradd --create-home --shell /bin/bash app\n\n# Set working directory\nWORKDIR /home/app\n\n# Install dependencies as root\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\n# Copy app and change ownership\nCOPY app.py .\nRUN chown -R app:app /home/app\n\n# Switch to non-root user\nUSER app\n\n# Health check\nHEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \\\n  CMD curl -f http://localhost:5000/health || exit 1\n\n# Expose port\nEXPOSE 5000\n\n# Run application\nCMD [\"python\", \"app.py\"]\nEOF\n</code></pre></p> </li> <li> <p>Build and test: <pre><code># Build with version\ndocker build --build-arg APP_VERSION=2.0 -t my-api:2.0 .\n\n# Run container\ndocker run -d -p 5000:5000 --name my-api-container my-api:2.0\n\n# Test the API\ncurl http://localhost:5000\ncurl http://localhost:5000/health\n\n# Check health status\ndocker ps\n\n# Cleanup\ndocker stop my-api-container\ndocker rm my-api-container\n</code></pre></p> </li> </ol>"},{"location":"core-concepts/dockerfile/#whats-next","title":"What's Next?","text":"<p>Excellent! You now know how to create custom Docker images using Dockerfiles.</p> <p>Next up: Docker Compose \u2192 - Learn to manage multiple containers together with Docker Compose.</p>"},{"location":"core-concepts/dockerfile/#key-takeaways","title":"Key Takeaways","text":"<ul> <li>Dockerfiles are recipes for building custom images</li> <li>Start with appropriate base images (Alpine for size, Ubuntu for compatibility)</li> <li>Optimize layers by combining RUN commands and copying dependencies first  </li> <li>Use multi-stage builds for smaller production images</li> <li>Always create non-root users for security</li> <li>Include health checks for production applications</li> <li>Use .dockerignore to exclude unnecessary files</li> </ul>"},{"location":"core-concepts/images/","title":"Docker Images","text":"<p>Think of Docker images like recipe cards \ud83d\udccb - they contain all the instructions and ingredients needed to create something delicious (in this case, a running application)!</p>"},{"location":"core-concepts/images/#what-exactly-is-a-docker-image","title":"What Exactly Is a Docker Image?","text":"<p>A Docker image is like a frozen pizza \ud83c\udf55:</p> <ul> <li>It's pre-made with all ingredients included</li> <li>It's packaged and ready to use</li> <li>You can store many in your freezer</li> <li>When you want pizza, you cook it (run it as a container)</li> <li>The original frozen pizza stays unchanged - you can make many pizzas from it!</li> </ul> <p>Key Point</p> <p>Images are templates - they don't do anything by themselves. You need to run them to create containers that actually work!</p>"},{"location":"core-concepts/images/#how-images-work","title":"How Images Work","text":"<pre><code>Image (Recipe) \u2192 docker run \u2192 Container (Actual Running App)\n</code></pre> <p>Example: - <code>nginx</code> image = Instructions for building a web server - <code>nginx</code> container = An actual web server running and serving websites</p>"},{"location":"core-concepts/images/#where-do-images-come-from","title":"Where Do Images Come From?","text":""},{"location":"core-concepts/images/#1-docker-hub-the-app-store-for-docker","title":"1. Docker Hub (The App Store for Docker)","text":"<p>Docker Hub is like Google Play Store, but for Docker images. It has thousands of ready-made images:</p> <ul> <li>nginx - Web server</li> <li>mysql - Database</li> <li>python - Python programming environment</li> <li>wordpress - Website builder</li> <li>redis - Fast database for caching</li> </ul> <p>Visit hub.docker.com to browse!</p>"},{"location":"core-concepts/images/#2-you-build-them-yourself","title":"2. You Build Them Yourself","text":"<p>Later, you'll learn to create your own images using Dockerfiles (like writing your own recipe).</p>"},{"location":"core-concepts/images/#3-private-registries","title":"3. Private Registries","text":"<p>Companies often store their private images in secure registries.</p>"},{"location":"core-concepts/images/#working-with-images","title":"Working with Images","text":""},{"location":"core-concepts/images/#see-what-images-you-have","title":"See What Images You Have","text":"<pre><code>docker images\n</code></pre> <p>Example output: <pre><code>REPOSITORY   TAG       IMAGE ID       CREATED        SIZE\nnginx        latest    a6bd71f48f68   2 weeks ago    187MB\nhello-world  latest    d2c94e258dcb   10 months ago  13.3kB\npython       3.9       1b33c72fae8d   1 month ago    915MB\n</code></pre></p> <p>What each column means: - REPOSITORY - The image name (like <code>nginx</code>) - TAG - The version (like <code>latest</code>, <code>3.9</code>, <code>v1.2</code>) - IMAGE ID - Unique identifier for this image - CREATED - When this image was built - SIZE - How much space it takes</p>"},{"location":"core-concepts/images/#download-an-image-without-running-it","title":"Download an Image (Without Running It)","text":"<pre><code>docker pull nginx\n</code></pre> <p>This downloads the nginx image but doesn't run it yet. It's like buying a frozen pizza but not cooking it.</p>"},{"location":"core-concepts/images/#download-a-specific-version","title":"Download a Specific Version","text":"<pre><code>docker pull python:3.9\n</code></pre> <p>The <code>:3.9</code> part is called a tag - it specifies which version you want.</p> <p>Image Tags Explained</p> <ul> <li><code>nginx:latest</code> = The newest version (default)</li> <li><code>python:3.9</code> = Python version 3.9 specifically</li> <li><code>mysql:8.0</code> = MySQL version 8.0</li> <li>If you don't specify a tag, Docker assumes <code>:latest</code></li> </ul>"},{"location":"core-concepts/images/#remove-an-image","title":"Remove an Image","text":"<pre><code>docker rmi nginx\n</code></pre> <p>Or using the image ID: <pre><code>docker rmi a6bd71f48f68\n</code></pre></p> <p>Can't remove images being used</p> <p>If any containers are using an image, you can't remove it. Stop and remove those containers first!</p>"},{"location":"core-concepts/images/#lets-practice-with-real-examples","title":"Let's Practice with Real Examples","text":""},{"location":"core-concepts/images/#example-1-running-different-web-servers","title":"Example 1: Running Different Web Servers","text":"<p>Try Apache web server: <pre><code>docker run -d -p 8080:80 --name apache-server httpd\n</code></pre></p> <p>Visit <code>http://localhost:8080</code> - you'll see \"It works!\" page.</p> <p>Try nginx web server: <pre><code>docker run -d -p 8081:80 --name nginx-server nginx\n</code></pre></p> <p>Visit <code>http://localhost:8081</code> - you'll see nginx welcome page.</p> <p>Now you have TWO web servers running from different images!</p>"},{"location":"core-concepts/images/#example-2-running-a-database","title":"Example 2: Running a Database","text":"<pre><code>docker run -d --name my-database -e MYSQL_ROOT_PASSWORD=mypassword mysql\n</code></pre> <p>What's happening: - <code>mysql</code> image contains a complete MySQL database - <code>-e MYSQL_ROOT_PASSWORD=mypassword</code> sets up the database password - The database is now running in the background!</p>"},{"location":"core-concepts/images/#example-3-interactive-python-environment","title":"Example 3: Interactive Python Environment","text":"<pre><code>docker run -it python:3.9\n</code></pre> <p>What's happening: - <code>-it</code> means \"interactive terminal\" - You get a Python prompt inside the container - Type <code>exit()</code> to leave</p>"},{"location":"core-concepts/images/#understanding-image-names-and-tags","title":"Understanding Image Names and Tags","text":""},{"location":"core-concepts/images/#full-image-name-format","title":"Full Image Name Format","text":"<pre><code>registry/username/repository:tag\n</code></pre> <p>Examples: - <code>nginx:latest</code> = <code>docker.io/library/nginx:latest</code> (full name) - <code>mysql:8.0</code> = Official MySQL version 8.0 - <code>node:16-alpine</code> = Node.js version 16 on Alpine Linux (smaller size)</p>"},{"location":"core-concepts/images/#common-tags-youll-see","title":"Common Tags You'll See","text":"<ul> <li>latest - The newest stable version</li> <li>alpine - Smaller, lightweight version (based on Alpine Linux)</li> <li>slim - Smaller version with fewer features</li> <li>Version numbers - <code>3.9</code>, <code>8.0</code>, <code>v1.2.3</code> (specific versions)</li> </ul> <p>Pro Tip: Avoid 'latest' in production</p> <p>For real projects, always use specific version tags like <code>nginx:1.21</code> instead of <code>nginx:latest</code>. This prevents surprises when newer versions come out!</p>"},{"location":"core-concepts/images/#image-management-commands","title":"Image Management Commands","text":""},{"location":"core-concepts/images/#see-detailed-information-about-an-image","title":"See Detailed Information About an Image","text":"<pre><code>docker inspect nginx\n</code></pre> <p>This shows you everything about the image - like reading the nutrition label on food!</p>"},{"location":"core-concepts/images/#search-for-images-on-docker-hub","title":"Search for Images on Docker Hub","text":"<pre><code>docker search python\n</code></pre>"},{"location":"core-concepts/images/#see-image-history-how-it-was-built","title":"See Image History (How It Was Built)","text":"<pre><code>docker history nginx\n</code></pre> <p>Shows all the layers that make up the image.</p>"},{"location":"core-concepts/images/#clean-up-unused-images","title":"Clean Up Unused Images","text":"<pre><code># Remove unused images\ndocker image prune\n\n# Remove ALL unused images (be careful!)\ndocker image prune -a\n</code></pre>"},{"location":"core-concepts/images/#hands-on-practice-exercise","title":"Hands-On Practice Exercise","text":"<p>Let's put it all together! Follow these steps:</p>"},{"location":"core-concepts/images/#step-1-download-multiple-images","title":"Step 1: Download Multiple Images","text":"<pre><code>docker pull nginx\ndocker pull python:3.9\ndocker pull redis\n</code></pre>"},{"location":"core-concepts/images/#step-2-check-what-you-downloaded","title":"Step 2: Check What You Downloaded","text":"<pre><code>docker images\n</code></pre> <p>You should see all three images listed.</p>"},{"location":"core-concepts/images/#step-3-run-containers-from-each-image","title":"Step 3: Run Containers from Each Image","text":"<pre><code># Web server\ndocker run -d -p 8080:80 --name web nginx\n\n# Python environment (interactive)\ndocker run -it --name python-env python:3.9\n\n# (Type exit() to leave Python, then continue)\n\n# Redis database\ndocker run -d --name cache redis\n</code></pre>"},{"location":"core-concepts/images/#step-4-see-everything-running","title":"Step 4: See Everything Running","text":"<pre><code>docker ps\n</code></pre>"},{"location":"core-concepts/images/#step-5-clean-up","title":"Step 5: Clean Up","text":"<pre><code># Stop all containers\ndocker stop web python-env cache\n\n# Remove all containers\ndocker rm web python-env cache\n\n# Remove images if you want\ndocker rmi nginx python:3.9 redis\n</code></pre>"},{"location":"core-concepts/images/#common-mistakes-beginners-make","title":"Common Mistakes Beginners Make","text":""},{"location":"core-concepts/images/#mistake-1-confusing-images-and-containers","title":"Mistake 1: Confusing Images and Containers","text":"<p>\u274c Wrong thinking: \"I deleted the nginx container, now nginx is gone\" \u2705 Correct: The nginx image is still there, you can create new containers anytime</p>"},{"location":"core-concepts/images/#mistake-2-using-latest-tag-everywhere","title":"Mistake 2: Using 'latest' Tag Everywhere","text":"<p>\u274c Risky: <code>docker run mysql</code> (gets whatever version is \"latest\") \u2705 Better: <code>docker run mysql:8.0</code> (gets specific version you tested)</p>"},{"location":"core-concepts/images/#mistake-3-not-understanding-layers","title":"Mistake 3: Not Understanding Layers","text":"<p>Images are built in layers like a cake: - Base layer (operating system) - App layer (your application) - Config layer (settings)</p> <p>This makes images efficient - multiple images can share the same base layers!</p>"},{"location":"core-concepts/images/#quick-reference","title":"Quick Reference","text":"Task Command Example List images <code>docker images</code> - Download image <code>docker pull &lt;image&gt;</code> <code>docker pull nginx</code> Download specific version <code>docker pull &lt;image&gt;:&lt;tag&gt;</code> <code>docker pull python:3.9</code> Remove image <code>docker rmi &lt;image&gt;</code> <code>docker rmi nginx</code> Search images <code>docker search &lt;term&gt;</code> <code>docker search python</code> Image details <code>docker inspect &lt;image&gt;</code> <code>docker inspect nginx</code> Image history <code>docker history &lt;image&gt;</code> <code>docker history nginx</code> Clean unused images <code>docker image prune</code> -"},{"location":"core-concepts/images/#key-takeaways","title":"Key Takeaways","text":"<p>\ud83c\udfaf Images are blueprints - they contain everything needed to run an application</p> <p>\ud83c\udfaf Containers are instances - running copies created from images</p> <p>\ud83c\udfaf One image, many containers - you can run multiple containers from the same image</p> <p>\ud83c\udfaf Images have versions - use specific tags for predictable results</p> <p>\ud83c\udfaf Docker Hub is your friend - thousands of pre-built images available</p>"},{"location":"core-concepts/images/#conclusion","title":"Conclusion","text":"<p>Congratulations! You now understand Docker images - the building blocks of everything in Docker. You've learned how to find, download, run, and manage images. </p> <p>Think of images as your toolkit - once you understand how to use them, you can run almost any application without worrying about installation headaches!</p>"},{"location":"core-concepts/images/#whats-next","title":"What's Next?","text":"<p>Now that you're comfortable with images, it's time to dive deeper into containers - the running instances of your images. You'll learn:</p> <ul> <li>Working with Containers - Advanced container management, connecting to running containers, environment variables, and networking</li> <li>Creating Dockerfiles - How to build your own custom images from scratch</li> </ul> <p>Ready to become a container master? Let's keep going! \ud83d\ude80 </p>"},{"location":"getting-started/","title":"Getting Started with Docker","text":"<p>Welcome to your Docker journey! This section will take you from never hearing about Docker to running your first containers with confidence.</p>"},{"location":"getting-started/#what-youll-accomplish-here","title":"What You'll Accomplish Here","text":"<p>By the end of this section, you'll:</p> <ul> <li>\u2705 Have Docker installed and working on your computer</li> <li>\u2705 Understand what Docker actually is (in simple terms)</li> <li>\u2705 Run your first container and see it work</li> <li>\u2705 Know the basic Docker commands you'll use every day</li> <li>\u2705 Feel confident to move to more advanced topics</li> </ul> <p>Time Investment</p> <p>Total time: 2-3 hours at a comfortable pace</p> <p>Can't do it all at once? Each page builds on the previous one, so you can stop and come back anytime!</p>"},{"location":"getting-started/#your-learning-path","title":"Your Learning Path","text":"<p>Follow these pages in order for the best experience:</p>"},{"location":"getting-started/#1-installation","title":"1. \ud83d\udce5 Installation","text":"<p>What: Get Docker installed on your computer (Windows, Mac, or Linux)</p> <p>Why: You need Docker running before you can do anything else!</p> <p>Time: 20-30 minutes</p> <p>Before you start</p> <p>Make sure your computer meets the basic requirements (we'll check this together).</p>"},{"location":"getting-started/#2-first-steps","title":"2. \ud83d\udc4b First Steps","text":"<p>What: Run your very first Docker container and understand what just happened</p> <p>Why: There's nothing like seeing Docker work to understand what the fuss is about!</p> <p>Time: 15-20 minutes</p> <p>You'll run commands like: <pre><code>docker run hello-world\ndocker run -p 8080:80 nginx\n</code></pre></p>"},{"location":"getting-started/#3-docker-basics","title":"3. \ud83d\udc33 Docker Basics","text":"<p>What: Learn the core concepts - images, containers, and essential commands</p> <p>Why: These fundamentals will make everything else make sense</p> <p>Time: 45-60 minutes</p> <p>Key concepts you'll master: - What's the difference between an image and a container? - How to start, stop, and manage containers - Basic Docker commands you'll use daily</p>"},{"location":"getting-started/#quick-confidence-booster","title":"Quick Confidence Booster","text":"<p>Feeling overwhelmed? Don't worry! Here's what makes this different from other Docker tutorials:</p>"},{"location":"getting-started/#beginner-first-approach","title":"\ud83c\udfaf Beginner-First Approach","text":"<ul> <li>We assume zero prior knowledge</li> <li>Every technical term is explained in simple language</li> <li>Real-world analogies help concepts stick</li> </ul>"},{"location":"getting-started/#hands-on-learning","title":"\ud83d\udee0 Hands-On Learning","text":"<ul> <li>Every command includes the expected output</li> <li>Screenshots for important steps</li> <li>\"What if this goes wrong?\" sections</li> </ul>"},{"location":"getting-started/#progressive-difficulty","title":"\u2728 Progressive Difficulty","text":"<ul> <li>Start simple, add complexity gradually</li> <li>Each page builds naturally on the previous one</li> <li>Clear checkpoints so you know you're on track</li> </ul>"},{"location":"getting-started/#different-learning-styles","title":"Different Learning Styles","text":"<p>Choose the approach that works best for you:</p> Step-by-Step LearnerQuick ExplorerReference User <p>Perfect for you if: You like to understand everything thoroughly before moving on</p> <p>Approach:  - Read each page completely - Try every example - Don't move to the next page until you're comfortable</p> <p>Time: 3-4 hours (thorough understanding)</p> <p>Perfect for you if: You want to see results fast and learn by doing</p> <p>Approach: - Skip to First Steps after installing - Come back to Docker Basics when you want deeper understanding - Jump around based on what interests you</p> <p>Time: 1-2 hours (basic working knowledge)</p> <p>Perfect for you if: You have some experience and want specific information</p> <p>Approach: - Use the Command Reference as needed - Focus on gaps in your knowledge - Skip what you already know</p> <p>Time: 30-60 minutes (filling knowledge gaps)</p>"},{"location":"getting-started/#prerequisites","title":"Prerequisites","text":"<p>Good news: You don't need much to get started!</p>"},{"location":"getting-started/#required-dont-worry-well-help-with-these","title":"\u2705 Required (Don't worry, we'll help with these):","text":"<ul> <li>A computer running Windows 10+, macOS 10.15+, or Linux</li> <li>Administrative/admin rights to install software</li> <li>Basic comfort opening a terminal/command prompt</li> </ul>"},{"location":"getting-started/#helpful-but-not-required","title":"\ud83d\udcda Helpful but not required:","text":"<ul> <li>Some experience with command-line tools</li> <li>Understanding of what applications and servers do</li> <li>Curiosity about how software works</li> </ul>"},{"location":"getting-started/#not-required","title":"\u274c NOT Required:","text":"<ul> <li>Programming experience</li> <li>Server administration knowledge</li> <li>Previous container or virtualization experience</li> </ul>"},{"location":"getting-started/#what-if-you-get-stuck","title":"What If You Get Stuck?","text":"<p>Don't panic! Getting stuck is part of learning. Here's your support system:</p>"},{"location":"getting-started/#immediate-help","title":"\ud83c\udd98 Immediate Help:","text":"<ol> <li>Read the error message carefully - they're usually helpful</li> <li>Check our Troubleshooting Guide</li> <li>Try the command again - sometimes it just needs a retry</li> </ol>"},{"location":"getting-started/#if-youre-confused","title":"\ud83e\udd14 If You're Confused:","text":"<ol> <li>Re-read the previous section - you might have missed something</li> <li>Check if Docker is running - this fixes 80% of issues</li> <li>Look up terms in our Glossary</li> </ol>"},{"location":"getting-started/#if-something-doesnt-work","title":"\ud83d\udca1 If Something Doesn't Work:","text":"<ol> <li>Check the exact command - typos are common</li> <li>Verify your system - Windows/Mac/Linux differences</li> <li>Try a simpler version first - break it down into steps</li> </ol>"},{"location":"getting-started/#success-stories","title":"Success Stories","text":"<p>\"I was scared of Docker for months. This guide made it click in just one afternoon!\" \u2014 Sarah, Frontend Developer</p> <p>\"Finally, someone explains Docker without assuming I'm already a DevOps expert.\" \u2014 Mike, Beginner Programmer</p> <p>\"The analogies and examples made everything so much clearer than other tutorials.\" \u2014 Jessica, Computer Science Student</p>"},{"location":"getting-started/#ready-to-begin","title":"Ready to Begin?","text":"<p>You're about to learn one of the most valuable skills in modern software development! Docker will change how you think about building and deploying applications.</p> <ul> <li> <p>\ud83d\udce5 Let's Install Docker</p> <p>First things first - get Docker running on your machine.</p> <p>Start Installation \u2192</p> </li> <li> <p>\ud83d\udc4b Already Have Docker?</p> <p>Skip installation and run your first container!</p> <p>First Steps \u2192</p> </li> <li> <p>\ud83d\udc33 Want the Big Picture?</p> <p>Understand what Docker is before diving in.</p> <p>Docker Basics \u2192</p> </li> </ul> <p>You're in great hands!</p> <p>This getting started section has helped thousands of developers take their first steps with Docker. Take your time, experiment, and don't be afraid to break things - that's how we learn!</p> <p>Let's build something amazing! \ud83d\udc33</p>"},{"location":"getting-started/basics/","title":"Docker Basics","text":"<p>Now that you've installed Docker and run your first containers, let's build a solid understanding of how Docker actually works. This foundation will make everything else make sense!</p>"},{"location":"getting-started/basics/#dockers-architecture-the-big-picture","title":"Docker's Architecture (The Big Picture)","text":"<p>Think of Docker like a shipping company for your applications:</p> <pre><code>Your Code \u2192 Docker \u2192 Standardized Container \u2192 Runs Anywhere\n</code></pre>"},{"location":"getting-started/basics/#the-key-players","title":"The Key Players","text":"<ol> <li>Docker Client - The command-line tool you type commands into</li> <li>Docker Daemon - The background service that does the actual work</li> <li>Docker Registry - The warehouse where container images are stored (like Docker Hub)</li> </ol> <p>Simple Analogy</p> <ul> <li>Docker Client = Your smartphone</li> <li>Docker Daemon = The cell tower that processes your requests</li> <li>Docker Registry = The app store where applications live</li> </ul>"},{"location":"getting-started/basics/#core-concepts-you-must-understand","title":"Core Concepts You Must Understand","text":""},{"location":"getting-started/basics/#images-vs-containers-the-most-important-distinction","title":"Images vs Containers (The Most Important Distinction)","text":"<p>This confuses every Docker beginner, so let's make it crystal clear:</p> Concept What It Is Real-World Analogy Command to See Image Blueprint/Template Recipe in a cookbook <code>docker images</code> Container Running instance Cake baked from recipe <code>docker ps</code> <p>Key Points: - One image can create multiple containers - Images are read-only (can't be changed) - Containers are temporary (disappear when stopped, unless you save data)</p>"},{"location":"getting-started/basics/#volumes-persistent-storage","title":"Volumes (Persistent Storage)","text":"<p>Containers are designed to be ephemeral (temporary). When you stop a container, everything inside disappears.</p> <p>Problem: What if you need to save data? Solution: Volumes - external storage that persists beyond container lifecycles.</p> <p>Think of volumes like</p> <p>External hard drives you can plug into different computers. The computer (container) can be replaced, but your data (volume) stays safe.</p>"},{"location":"getting-started/basics/#networks-container-communication","title":"Networks (Container Communication)","text":"<p>By default, containers are isolated from each other. Networks let them communicate when needed.</p> <p>Common Use Case: A web application container needs to talk to a database container.</p>"},{"location":"getting-started/basics/#essential-docker-commands","title":"Essential Docker Commands","text":""},{"location":"getting-started/basics/#container-management","title":"Container Management","text":"<pre><code># Create and run a new container\ndocker run [OPTIONS] IMAGE [COMMAND]\n\n# List running containers\ndocker ps\n\n# List all containers (including stopped)\ndocker ps -a\n\n# Stop a running container\ndocker stop CONTAINER_NAME_OR_ID\n\n# Start a stopped container  \ndocker start CONTAINER_NAME_OR_ID\n\n# Remove a container\ndocker rm CONTAINER_NAME_OR_ID\n</code></pre>"},{"location":"getting-started/basics/#image-management","title":"Image Management","text":"<pre><code># List downloaded images\ndocker images\n\n# Download an image without running it\ndocker pull IMAGE_NAME\n\n# Remove an image\ndocker rmi IMAGE_NAME\n\n# Search for images on Docker Hub\ndocker search TERM\n</code></pre>"},{"location":"getting-started/basics/#information-and-debugging","title":"Information and Debugging","text":"<pre><code># View container logs\ndocker logs CONTAINER_NAME_OR_ID\n\n# Execute a command inside a running container\ndocker exec -it CONTAINER_NAME_OR_ID COMMAND\n\n# Show detailed information about a container\ndocker inspect CONTAINER_NAME_OR_ID\n</code></pre>"},{"location":"getting-started/basics/#docker-run-options-the-powerful-ones","title":"Docker Run Options (The Powerful Ones)","text":"<p>Understanding <code>docker run</code> options is crucial:</p>"},{"location":"getting-started/basics/#background-vs-foreground","title":"Background vs Foreground","text":"<pre><code># Foreground (blocks terminal)\ndocker run nginx\n\n# Background (detached)\ndocker run -d nginx\n</code></pre>"},{"location":"getting-started/basics/#port-mapping","title":"Port Mapping","text":"<pre><code># Map host port 8080 to container port 80\ndocker run -p 8080:80 nginx\n\n# Access multiple ports\ndocker run -p 8080:80 -p 8443:443 nginx\n</code></pre>"},{"location":"getting-started/basics/#naming-containers","title":"Naming Containers","text":"<pre><code># Auto-generated name (like \"quirky_einstein\")\ndocker run nginx\n\n# Custom name\ndocker run --name my-web-server nginx\n</code></pre>"},{"location":"getting-started/basics/#environment-variables","title":"Environment Variables","text":"<pre><code># Set environment variables\ndocker run -e DB_HOST=localhost -e DB_PORT=5432 my-app\n</code></pre>"},{"location":"getting-started/basics/#understanding-the-docker-workflow","title":"Understanding the Docker Workflow","text":""},{"location":"getting-started/basics/#typical-development-workflow","title":"Typical Development Workflow","text":"<ol> <li>Find or Create an image that has what you need</li> <li>Run a container from that image</li> <li>Configure the container (ports, environment, volumes)</li> <li>Test your application</li> <li>Stop and remove when done (or keep running)</li> </ol>"},{"location":"getting-started/basics/#image-lifecycle","title":"Image Lifecycle","text":"<ol> <li>Pull image from registry (automatic when you <code>docker run</code>)</li> <li>Create containers from image</li> <li>Update image when new version available</li> <li>Clean up old images to save space</li> </ol>"},{"location":"getting-started/basics/#common-beginner-mistakes","title":"Common Beginner Mistakes","text":""},{"location":"getting-started/basics/#mistake-1-confusing-images-and-containers","title":"Mistake #1: Confusing Images and Containers","text":"<p>\u274c Wrong thinking: \"I deleted the container, now the image is gone\" \u2705 Correct: Images and containers are separate. Deleting a container doesn't affect the image.</p>"},{"location":"getting-started/basics/#mistake-2-not-using-volume-for-important-data","title":"Mistake #2: Not Using Volume for Important Data","text":"<p>\u274c Wrong: Storing database data inside container \u2705 Correct: Using volumes for data that must persist</p>"},{"location":"getting-started/basics/#mistake-3-running-everything-in-foreground","title":"Mistake #3: Running Everything in Foreground","text":"<p>\u274c Wrong: <code>docker run nginx</code> (blocks terminal) \u2705 Correct: <code>docker run -d nginx</code> (runs in background)</p>"},{"location":"getting-started/basics/#mistake-4-not-cleaning-up","title":"Mistake #4: Not Cleaning Up","text":"<p>\u274c Wrong: Leaving hundreds of stopped containers \u2705 Correct: Regular cleanup with <code>docker rm</code> and <code>docker rmi</code></p>"},{"location":"getting-started/basics/#practical-examples","title":"Practical Examples","text":""},{"location":"getting-started/basics/#example-1-web-development-environment","title":"Example 1: Web Development Environment","text":"<pre><code># Run a web server for development\ndocker run -d -p 3000:80 --name dev-server nginx\n\n# Check it's running\ndocker ps\n\n# View logs if something goes wrong\ndocker logs dev-server\n\n# Clean up when done\ndocker stop dev-server &amp;&amp; docker rm dev-server\n</code></pre>"},{"location":"getting-started/basics/#example-2-database-for-testing","title":"Example 2: Database for Testing","text":"<pre><code># Run PostgreSQL with persistent data\ndocker run -d \\\n  --name test-db \\\n  -e POSTGRES_PASSWORD=mypassword \\\n  -p 5432:5432 \\\n  -v postgres-data:/var/lib/postgresql/data \\\n  postgres\n\n# Connect from host\npsql -h localhost -U postgres\n</code></pre>"},{"location":"getting-started/basics/#docker-vs-traditional-deployment","title":"Docker vs Traditional Deployment","text":"Aspect Traditional Docker Setup Install dependencies on host Everything in container Conflicts Version conflicts common Each container isolated Portability \"Works on my machine\" Works everywhere Cleanup Manual uninstall Delete container Scaling Complex Start more containers"},{"location":"getting-started/basics/#quick-reference-when-to-use-what","title":"Quick Reference: When to Use What","text":""},{"location":"getting-started/basics/#use-docker-run-when","title":"Use <code>docker run</code> when:","text":"<ul> <li>Starting a new container from an image</li> <li>Testing something quickly</li> <li>One-time tasks</li> </ul>"},{"location":"getting-started/basics/#use-docker-startstop-when","title":"Use <code>docker start/stop</code> when:","text":"<ul> <li>Managing existing containers</li> <li>Containers you want to reuse</li> <li>Preserving container configuration</li> </ul>"},{"location":"getting-started/basics/#use-volumes-when","title":"Use volumes when:","text":"<ul> <li>Database data</li> <li>Log files</li> <li>Any data that must survive container restarts</li> </ul>"},{"location":"getting-started/basics/#use-port-mapping-when","title":"Use port mapping when:","text":"<ul> <li>Accessing container services from host</li> <li>Web applications</li> <li>APIs that need external access</li> </ul>"},{"location":"getting-started/basics/#whats-next","title":"What's Next?","text":"<p>Now that you understand Docker's fundamentals, you're ready to dive deeper:</p> <ul> <li>Images - Master Docker images and registries</li> <li>Containers - Advanced container management techniques  </li> <li>Dockerfile - Create your own custom images</li> </ul> <p>You've Got the Foundation!</p> <p>Understanding images, containers, and basic commands puts you ahead of many Docker users. Everything else builds on these concepts - you're ready for the next level!</p>"},{"location":"getting-started/first-steps/","title":"Your First Steps with Docker \ud83d\udc4b","text":"<p>Welcome to your first hands-on Docker experience! We're going to run some containers and see Docker's magic in action. Don't worry about understanding everything yet - just follow along and be amazed! \u2728</p> <p>Before We Start</p> <p>Make sure you've completed the Installation and Docker is running on your computer. You should see the Docker whale icon in your system tray (Windows/Mac) or Docker service running (Linux).</p>"},{"location":"getting-started/first-steps/#step-1-verify-docker-is-working","title":"Step 1: Verify Docker is Working","text":"<p>Let's make sure everything is set up correctly:</p> <pre><code>docker --version\n</code></pre> <p>Expected output: <pre><code>Docker version 24.0.7, build afdd53b\n</code></pre></p> <p>Great! Docker is Ready</p> <p>The exact version number might be different - that's totally fine! As long as you see \"Docker version\" followed by numbers, you're good to go.</p>"},{"location":"getting-started/first-steps/#step-2-your-first-container-hello-world","title":"Step 2: Your First Container - Hello World! \ud83c\udf0d","text":"<p>Time for the classic \"Hello World\" moment in Docker:</p> <pre><code>docker run hello-world\n</code></pre> <p>What you'll see: <pre><code>Unable to find image 'hello-world:latest' locally\nlatest: Pulling from library/hello-world\nc1ec31eb5944: Pull complete \nDigest: sha256:4bd78111b6914a99dbc560e6a20eab57c1d6725a8e87bb9a8b52e21ef7c55fdd\nStatus: Downloaded newer image for hello-world:latest\n\nHello from Docker!\nThis message shows that your installation appears to be working correctly.\n\nTo generate this message, Docker took the following steps:\n 1. The Docker client contacted the Docker daemon.\n 2. The Docker daemon pulled the \"hello-world\" image from the Docker Hub.\n 3. The Docker daemon created a new container from that image which runs the\n    executable that produces the output you are currently reading.\n 4. The Docker daemon streamed that output to the Docker client, which sent it\n    to your terminal.\n\nTo try something more ambitious, you can run an Ubuntu container with:\n $ docker run -it ubuntu bash\n\nShare images, automate workflows, and more with a free Docker ID:\n https://hub.docker.com/\n\nFor more examples and ideas, visit:\n https://docs.docker.com/get-started/\n</code></pre></p> <p>\ud83c\udf89 Congratulations! You just ran your first Docker container!</p>"},{"location":"getting-started/first-steps/#what-just-happened-the-magic-explained","title":"What Just Happened? (The Magic Explained)","text":"<ol> <li>Docker looked for the \"hello-world\" image on your computer</li> <li>Didn't find it, so Docker downloaded it from Docker Hub (like an app store)</li> <li>Created a container from that image</li> <li>Ran the program inside the container (which printed the message)</li> <li>Container finished and stopped automatically</li> </ol> <p>Think of it like this</p> <p>You just asked Docker to \"run the hello-world app\" and it automatically:</p> <ul> <li>Downloaded the app if you didn't have it</li> <li>Set up a perfect environment for it to run</li> <li>Ran it and showed you the results</li> <li>Cleaned up when done</li> </ul> <p>All with one simple command!</p>"},{"location":"getting-started/first-steps/#step-3-run-a-web-server-in-30-seconds","title":"Step 3: Run a Web Server in 30 Seconds \ud83d\ude80","text":"<p>Now let's do something more impressive - run a complete web server:</p> <pre><code>docker run -d -p 8080:80 --name my-web-server nginx\n</code></pre> <p>Expected output: <pre><code>Unable to find image 'nginx:latest' locally\nlatest: Pulling from library/nginx\n31b3f1ad4ce1: Pull complete \nfd42b079d0f8: Pull complete \n30585fbbeedd: Pull complete \n18f4ffdd6490: Pull complete \n9dc932c8fba2: Pull complete \n9a59d19f9c5b: Pull complete \n9db7feffab07: Pull complete \nDigest: sha256:add4792d930c25dd2abf2ef9ea79e3d3ae1b4cd3b93cb4a76e6e36b87b56ce8\nStatus: Downloaded newer image for nginx:latest\na1b2c3d4e5f67890abcdef1234567890abcdef1234567890abcdef1234567890\n</code></pre></p>"},{"location":"getting-started/first-steps/#test-your-web-server","title":"\ud83c\udf10 Test Your Web Server:","text":"<p>Open your web browser and go to: http://localhost:8080</p> <p>You should see: <pre><code>Welcome to nginx!\nIf you see this page, the nginx web server is successfully installed and working.\n</code></pre></p> <p>\ud83c\udf89 AMAZING! You just deployed a web server with one command!</p>"},{"location":"getting-started/first-steps/#breaking-down-the-command","title":"Breaking Down the Command:","text":"<pre><code>docker run -d -p 8080:80 --name my-web-server nginx\n</code></pre> <ul> <li><code>docker run</code> = Create and start a new container</li> <li><code>-d</code> = Run in \"detached\" mode (in the background)</li> <li><code>-p 8080:80</code> = Connect your computer's port 8080 to container's port 80</li> <li><code>--name my-web-server</code> = Give the container a friendly name</li> <li><code>nginx</code> = Use the nginx web server image</li> </ul> <p>Port Mapping Explained</p> <p>Think of ports like apartment numbers:</p> <ul> <li>Your computer (building) has port 8080 (apartment 8080)</li> <li>Container (tenant) is using port 80 (their internal apartment number)  </li> <li><code>-p 8080:80</code> connects them so visitors to 8080 reach the container's 80</li> </ul>"},{"location":"getting-started/first-steps/#step-4-see-whats-running","title":"Step 4: See What's Running \ud83d\udc40","text":"<p>Let's check what containers are currently running:</p> <pre><code>docker ps\n</code></pre> <p>Expected output: <pre><code>CONTAINER ID   IMAGE     COMMAND                  CREATED         STATUS         PORTS                  NAMES\na1b2c3d4e5f6   nginx     \"/docker-entrypoint.\u2026\"   2 minutes ago   Up 2 minutes   0.0.0.0:8080-&gt;80/tcp   my-web-server\n</code></pre></p> <p>What this tells you: - CONTAINER ID: Unique identifier (a1b2c3d4e5f6) - IMAGE: Using the nginx image - STATUS: Up 2 minutes (running for 2 minutes) - PORTS: Your port 8080 connects to container's port 80 - NAMES: Friendly name you gave it (my-web-server)</p>"},{"location":"getting-started/first-steps/#step-5-look-inside-your-container","title":"Step 5: Look Inside Your Container \ud83d\udd0d","text":"<p>Want to peek inside the running container? Let's run a command inside it:</p> <pre><code>docker exec my-web-server ls /usr/share/nginx/html\n</code></pre> <p>Expected output: <pre><code>50x.html\nindex.html\n</code></pre></p> <p>What just happened? You ran the <code>ls</code> command inside the container to see the web server's files!</p>"},{"location":"getting-started/first-steps/#try-another-one","title":"Try Another One:","text":"<pre><code>docker exec my-web-server cat /usr/share/nginx/html/index.html\n</code></pre> <p>You'll see the HTML code for the \"Welcome to nginx!\" page you viewed in your browser!</p> <p>Think of <code>docker exec</code> like remote control</p> <p>It's like having a remote control for your container - you can run commands inside it from the outside!</p>"},{"location":"getting-started/first-steps/#step-6-check-the-logs","title":"Step 6: Check the Logs \ud83d\udccb","text":"<p>Let's see what your web server has been up to:</p> <pre><code>docker logs my-web-server\n</code></pre> <p>You might see something like: <pre><code>/docker-entrypoint.sh: /docker-entrypoint.d/ is not empty, will attempt to perform configuration\n/docker-entrypoint.sh: Looking for shell scripts in /docker-entrypoint.d/\n...\n2024/01/15 10:30:45 [notice] 1#1: nginx/1.25.3\n2024/01/15 10:30:45 [notice] 1#1: built by gcc 12.2.0\n2024/01/15 10:30:45 [notice] 1#1: OS: Linux 5.15.0-88-generic\n2024/01/15 10:30:45 [notice] 1#1: getrlimit(RLIMIT_NOFILE): 1048576:1048576\n2024/01/15 10:30:45 [notice] 1#1: start worker processes\n</code></pre></p> <p>Now refresh your browser at http://localhost:8080 and run <code>docker logs my-web-server</code> again. You'll see new log entries showing your visit!</p>"},{"location":"getting-started/first-steps/#step-7-stop-and-clean-up","title":"Step 7: Stop and Clean Up \ud83e\uddf9","text":"<p>When you're done experimenting, let's clean up:</p>"},{"location":"getting-started/first-steps/#stop-the-container","title":"Stop the Container:","text":"<pre><code>docker stop my-web-server\n</code></pre> <p>Expected output: <pre><code>my-web-server\n</code></pre></p>"},{"location":"getting-started/first-steps/#verify-its-stopped","title":"Verify it's Stopped:","text":"<pre><code>docker ps\n</code></pre> <p>You should see no running containers (empty output).</p>"},{"location":"getting-started/first-steps/#remove-the-container","title":"Remove the Container:","text":"<pre><code>docker rm my-web-server\n</code></pre> <p>Expected output: <pre><code>my-web-server\n</code></pre></p>"},{"location":"getting-started/first-steps/#check-all-containers-including-stopped-ones","title":"Check All Containers (including stopped ones):","text":"<pre><code>docker ps -a\n</code></pre> <p>The <code>my-web-server</code> container should now be gone!</p>"},{"location":"getting-started/first-steps/#step-8-try-something-interactive","title":"Step 8: Try Something Interactive \ud83c\udfae","text":"<p>Let's run a container you can interact with directly:</p> <pre><code>docker run -it ubuntu bash\n</code></pre> <p>What happens: - Downloads Ubuntu Linux image - Starts a container - Gives you a bash shell inside the Ubuntu container - You're now \"inside\" a Ubuntu Linux system!</p> <p>You'll see a prompt like: <pre><code>root@a1b2c3d4e5f6:/#\n</code></pre></p>"},{"location":"getting-started/first-steps/#try-some-commands-inside-ubuntu","title":"Try Some Commands Inside Ubuntu:","text":"<pre><code># Check what Linux distribution you're in\ncat /etc/os-release\n\n# See the current directory\npwd\n\n# List files\nls\n\n# Check running processes\nps aux\n</code></pre>"},{"location":"getting-started/first-steps/#exit-the-container","title":"Exit the Container:","text":"<pre><code>exit\n</code></pre> <p>You're back to your regular computer! The Ubuntu container stopped automatically when you exited.</p> <p>What Just Happened?</p> <p>You had a complete Ubuntu Linux system running inside a container on your computer - totally isolated from your main system. When you exited, it all disappeared. Magic! \u2728</p>"},{"location":"getting-started/first-steps/#understanding-what-you-accomplished","title":"Understanding What You Accomplished","text":"<p>In less than 15 minutes, you:</p>"},{"location":"getting-started/first-steps/#verified-docker-works","title":"\u2705 Verified Docker Works","text":"<ul> <li>Confirmed your installation is correct</li> <li>Learned the basic <code>docker</code> command structure</li> </ul>"},{"location":"getting-started/first-steps/#ran-multiple-applications","title":"\u2705 Ran Multiple Applications","text":"<ul> <li>Hello-world program</li> <li>Nginx web server</li> <li>Ubuntu Linux system</li> </ul>"},{"location":"getting-started/first-steps/#learned-key-commands","title":"\u2705 Learned Key Commands","text":"<ul> <li><code>docker run</code> - Start containers</li> <li><code>docker ps</code> - See what's running  </li> <li><code>docker exec</code> - Run commands inside containers</li> <li><code>docker logs</code> - See container output</li> <li><code>docker stop</code> - Stop containers</li> <li><code>docker rm</code> - Remove containers</li> </ul>"},{"location":"getting-started/first-steps/#experienced-dockers-power","title":"\u2705 Experienced Docker's Power","text":"<ul> <li>Instant deployment - Web server in one command</li> <li>Perfect isolation - Each container is separate</li> <li>No conflicts - Multiple versions can coexist</li> <li>Easy cleanup - Remove everything when done</li> </ul>"},{"location":"getting-started/first-steps/#common-first-time-questions","title":"Common First-Time Questions","text":""},{"location":"getting-started/first-steps/#why-didnt-i-need-to-install-nginx-or-ubuntu","title":"\"Why didn't I need to install nginx or Ubuntu?\"","text":"<p>Docker images contain everything needed! The nginx image includes: - The nginx web server software - All required libraries and dependencies - A complete operating system (Linux) - Pre-configured settings</p>"},{"location":"getting-started/first-steps/#where-did-these-images-come-from","title":"\"Where did these images come from?\"","text":"<p>Docker Hub - it's like an app store for Docker images. When you run <code>docker run nginx</code>, Docker automatically: 1. Checks if you have the nginx image locally 2. If not, downloads it from Docker Hub 3. Uses it to create your container</p>"},{"location":"getting-started/first-steps/#are-containers-using-a-lot-of-resources","title":"\"Are containers using a lot of resources?\"","text":"<p>Surprisingly little! Containers are very lightweight: - They share your computer's operating system kernel - Only use resources when actively running - Start and stop in seconds - Much lighter than virtual machines</p>"},{"location":"getting-started/first-steps/#is-this-safe","title":"\"Is this safe?\"","text":"<p>Yes! Containers are isolated: - Can't access your personal files (unless you specifically allow it) - Can't affect other containers - Can't harm your main operating system - Easy to remove completely</p>"},{"location":"getting-started/first-steps/#whats-next","title":"What's Next?","text":"<p>You've just experienced Docker's core value - running applications anywhere, instantly, without conflicts. </p> <p>Ready to understand how this all works? Let's dive deeper:</p> <ul> <li> <p>\ud83d\udc33 Understand the Fundamentals</p> <p>Learn what images and containers really are.</p> <p>Docker Basics \u2192</p> </li> <li> <p>\ud83d\udce6 Master Docker Images</p> <p>Dive deep into the building blocks of containers.</p> <p>Learn About Images \u2192</p> </li> <li> <p>\ud83c\udfae Try Fun Projects</p> <p>Build something cool with what you've learned!</p> <p>Fun Examples \u2192</p> </li> </ul> <p>You're officially a Docker user!</p> <p>You've just done what many developers find intimidating - and it was actually pretty easy! Docker's power comes from making complex deployment simple. You're ready for the next level!</p> <p>Keep going - you're doing great! \ud83d\ude80</p>"},{"location":"getting-started/installation/","title":"Installing Docker","text":"<p>Before we start containerizing applications, we need Docker installed on your machine. This guide will get you up and running quickly on any operating system!</p>"},{"location":"getting-started/installation/#quick-check-is-docker-already-installed","title":"Quick Check: Is Docker Already Installed?","text":"<p>Let's first see if Docker is already on your computer:</p> <p>Opening Terminal</p> <ul> <li>Windows: Press <code>Win + R</code>, type <code>cmd</code>, and press Enter  </li> <li>Mac: Press <code>Cmd + Space</code>, type <code>terminal</code>, and press Enter  </li> <li>Linux: Press <code>Ctrl + Alt + T</code></li> </ul> <pre><code>docker --version\n</code></pre> <p>If you see output like this: <pre><code>Docker version 27.3.1, build ce12230\n</code></pre></p> <p>\ud83c\udf89 Great! Docker is already installed. Skip to Verify Installation.</p> <p>If you get an error like <code>command not found</code> or <code>docker is not recognized</code>, continue with the installation steps below.</p>"},{"location":"getting-started/installation/#choose-your-operating-system","title":"Choose Your Operating System","text":"<p>Select your operating system for specific installation instructions:</p> WindowsMacLinux"},{"location":"getting-started/installation/#system-requirements","title":"System Requirements","text":"<ul> <li>Windows 10 64-bit (Pro, Enterprise, or Education) Build 19041 or higher</li> <li>OR Windows 11 64-bit (any edition)  </li> <li>At least 4GB RAM</li> <li>Virtualization enabled in BIOS</li> </ul>"},{"location":"getting-started/installation/#installation-steps","title":"Installation Steps","text":"<ol> <li>Download Docker Desktop:</li> <li>Visit docker.com/products/docker-desktop</li> <li> <p>Click \"Download for Windows\"</p> </li> <li> <p>Run the installer:</p> </li> <li>Double-click the downloaded <code>Docker Desktop Installer.exe</code></li> <li>Important: Check \"Enable WSL 2 Windows Features\" during installation</li> <li> <p>Optional: Check \"Add shortcut to desktop\"</p> </li> <li> <p>Complete installation:</p> </li> <li>Restart your computer when prompted</li> <li>After restart, Docker Desktop should start automatically</li> <li> <p>Look for the Docker whale icon in your system tray</p> </li> <li> <p>First-time setup:</p> </li> <li>Accept the Docker subscription service agreement</li> <li>You may be prompted to enable WSL 2 - click \"Restart\" if asked</li> </ol>"},{"location":"getting-started/installation/#windows-troubleshooting","title":"Windows Troubleshooting","text":"<p>WSL 2 Issues</p> <p>If you get \"WSL 2 installation is incomplete\":</p> <ol> <li>Open PowerShell as Administrator</li> <li>Run: <code>wsl --install</code></li> <li>Restart your computer</li> <li>Start Docker Desktop again</li> </ol> <p>Virtualization not enabled: 1. Restart computer and enter BIOS (usually F2, F12, or Del key during startup) 2. Find \"Virtualization Technology\" or \"Intel VT-x/AMD-V\"  3. Enable it and save changes</p>"},{"location":"getting-started/installation/#system-requirements_1","title":"System Requirements","text":"<ul> <li>macOS 10.15 (Catalina) or newer</li> <li>At least 4GB RAM</li> </ul>"},{"location":"getting-started/installation/#installation-steps_1","title":"Installation Steps","text":"<ol> <li>Choose the right version:</li> <li>Intel Mac: Download \"Docker Desktop for Mac with Intel chip\"</li> <li>Apple Silicon (M1/M2/M3): Download \"Docker Desktop for Mac with Apple chip\"</li> <li> <p>Visit docker.com/products/docker-desktop</p> </li> <li> <p>Install Docker:</p> </li> <li>Open the downloaded <code>.dmg</code> file</li> <li>Drag the Docker icon to your Applications folder</li> <li> <p>This copies Docker to your system</p> </li> <li> <p>Launch Docker Desktop:</p> </li> <li>Go to Applications folder</li> <li>Double-click Docker</li> <li> <p>You'll see a whale icon appear in your menu bar when it's running</p> </li> <li> <p>Grant permissions:</p> </li> <li>macOS will ask for permissions - click \"Allow\"</li> <li>You may need to enter your password</li> <li>Docker needs these permissions to function properly</li> </ol>"},{"location":"getting-started/installation/#mac-troubleshooting","title":"Mac Troubleshooting","text":"<p>First Launch</p> <p>Docker Desktop may take 2-3 minutes to start the first time. The whale icon will stop animating when ready.</p> <p>Docker Desktop won't start: - Check available disk space (Docker needs at least 2GB free) - Restart your Mac and try again - Verify macOS version is 10.15 or newer</p>"},{"location":"getting-started/installation/#for-ubuntudebian","title":"For Ubuntu/Debian","text":"<p>Option 1: Convenience Script (Recommended for beginners)</p> <pre><code># Download and run Docker's installation script\ncurl -fsSL https://get.docker.com -o get-docker.sh\nsudo sh get-docker.sh\n</code></pre> <p>Option 2: Manual Installation (More control)</p> <pre><code># Update package index\nsudo apt update\n\n# Install prerequisite packages\nsudo apt install -y apt-transport-https ca-certificates curl gnupg lsb-release\n\n# Add Docker's official GPG key\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg\n\n# Add Docker repository\necho \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null\n\n# Update package index again\nsudo apt update\n\n# Install Docker Engine and related tools\nsudo apt install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n</code></pre>"},{"location":"getting-started/installation/#post-installation-setup-important","title":"Post-Installation Setup (Important!)","text":"<p>Start Docker service: <pre><code>sudo systemctl start docker\nsudo systemctl enable docker  # Start automatically on boot\n</code></pre></p> <p>Add your user to docker group (avoids needing sudo): <pre><code>sudo usermod -aG docker $USER\n</code></pre></p> <p>Must Restart Session</p> <p>After adding yourself to the docker group, log out and log back in (or restart) for changes to take effect!</p>"},{"location":"getting-started/installation/#linux-troubleshooting","title":"Linux Troubleshooting","text":"<p>Permission denied errors: <pre><code># Check if you're in docker group\ngroups $USER\n\n# If 'docker' is not listed, add yourself\nsudo usermod -aG docker $USER\n# Then log out and back in\n</code></pre></p> <p>Docker daemon not running: <pre><code>sudo systemctl status docker  # Check status\nsudo systemctl start docker   # Start if stopped\n</code></pre></p>"},{"location":"getting-started/installation/#verify-installation","title":"Verify Installation","text":"<p>Now let's confirm Docker is working correctly:</p>"},{"location":"getting-started/installation/#step-1-check-version","title":"Step 1: Check Version","text":"<pre><code>docker --version\n</code></pre> <p>Expected output: <pre><code>Docker version 24.0.7, build afdd53b\n</code></pre></p>"},{"location":"getting-started/installation/#step-2-check-docker-engine","title":"Step 2: Check Docker Engine","text":"<pre><code>docker info\n</code></pre> <p>This should display detailed information about your Docker installation without errors.</p>"},{"location":"getting-started/installation/#step-3-test-with-hello-world","title":"Step 3: Test with Hello World","text":"<pre><code>docker run hello-world\n</code></pre> <p>If successful, you'll see: <pre><code>Hello from Docker!\nThis message shows that your installation appears to be working correctly.\n...\n</code></pre></p> <p>Installation Complete!</p> <p>If all three tests pass, Docker is properly installed and ready to use!</p>"},{"location":"getting-started/installation/#understanding-your-docker-installation","title":"Understanding Your Docker Installation","text":""},{"location":"getting-started/installation/#what-got-installed","title":"What Got Installed?","text":"<ul> <li>Docker Engine: Core runtime that manages containers</li> <li>Docker CLI: Command-line interface for interacting with Docker</li> <li>Docker Desktop (Windows/Mac): Graphical management interface</li> <li>Docker Compose: Tool for multi-container applications (included)</li> </ul>"},{"location":"getting-started/installation/#resource-usage","title":"Resource Usage","text":"<p>Docker uses system resources efficiently:</p> <ul> <li>RAM: 2-4GB allocated by default (configurable)</li> <li>Disk Space: Starts minimal, grows with images and containers</li> <li>CPU: Only active when containers are running</li> </ul> <p>Adjust resources: Open Docker Desktop \u2192 Settings \u2192 Resources (Windows/Mac)</p>"},{"location":"getting-started/installation/#common-installation-issues","title":"Common Installation Issues","text":""},{"location":"getting-started/installation/#issue-docker-desktop-wont-start","title":"Issue: Docker Desktop won't start","text":"<p>Windows: - Ensure WSL 2 is enabled: <code>wsl --list --verbose</code> - Check virtualization is enabled in BIOS - Run Docker Desktop as Administrator</p> <p>Mac: - Check system requirements (macOS 10.15+) - Ensure sufficient disk space (2GB+ free) - Try restarting your Mac</p>"},{"location":"getting-started/installation/#issue-docker-command-not-found","title":"Issue: \"docker: command not found\"","text":"<p>All systems: - Restart your terminal/command prompt - On Linux: ensure Docker service is running - Check PATH includes Docker installation directory</p>"},{"location":"getting-started/installation/#issue-permission-denied-linux","title":"Issue: Permission denied (Linux)","text":"<pre><code># Add user to docker group\nsudo usermod -aG docker $USER\n\n# Verify group membership\ngroups $USER\n\n# If docker group missing, log out and back in\n</code></pre>"},{"location":"getting-started/installation/#whats-next","title":"What's Next?","text":"<p>Now that Docker is installed and verified, you're ready to start your container journey!</p> <p>Recommended next steps:</p> <ul> <li> <p>\ud83d\udc4b Take Your First Steps</p> <p>Run your first containers and see Docker in action.</p> <p>First Steps \u2192</p> </li> <li> <p>\ud83d\udc33 Learn the Basics</p> <p>Understand core Docker concepts and commands.</p> <p>Docker Basics \u2192</p> </li> <li> <p>\ud83d\udcda Get Help When Stuck</p> <p>Troubleshooting guide for common issues.</p> <p>Troubleshooting \u2192</p> </li> </ul> <p>Installation Tips</p> <ul> <li>Windows users: WSL 2 provides the best performance</li> <li>Mac users: Choose the correct chip architecture (Intel vs Apple Silicon)  </li> <li>Linux users: The docker group setup eliminates need for sudo</li> <li>All users: Docker Desktop provides a nice GUI for beginners</li> </ul> <p>Your Docker installation is complete and ready for action! \ud83d\ude80</p>"},{"location":"practical-guides/","title":"Practical Guides \ud83d\udca1","text":"<p>Now you know Docker's core concepts and tools - it's time to build real applications and learn professional practices! This section bridges the gap between learning Docker and using it confidently in real projects.</p>"},{"location":"practical-guides/#what-youll-master-here","title":"What You'll Master Here","text":"<p>By the end of this section, you'll:</p> <ul> <li>\u2705 Build production-ready applications following industry best practices</li> <li>\u2705 Create impressive demo projects that showcase your Docker skills</li> <li>\u2705 Solve problems independently using systematic troubleshooting approaches</li> <li>\u2705 Write Dockerfiles like a pro with security, performance, and maintainability in mind</li> <li>\u2705 Deploy applications confidently knowing they'll work reliably</li> <li>\u2705 Debug any Docker issue with proven techniques and tools</li> </ul> <p>Time Investment</p> <p>Total time: 3-4 hours for complete practical mastery</p> <p>Want immediate results? Jump to Fun Examples to build something impressive in 30 minutes!</p>"},{"location":"practical-guides/#your-practical-learning-journey","title":"Your Practical Learning Journey","text":"<p>These guides build on each other to transform you from Docker learner to Docker practitioner:</p>"},{"location":"practical-guides/#1-best-practices","title":"1. \ud83c\udfd7\ufe0f Best Practices","text":"<p>What: Professional standards for writing Dockerfiles, organizing projects, and deploying applications</p> <p>Why: The difference between \"it works\" and \"it works reliably in production\"</p> <p>Time: 90 minutes</p> <p>Professional impact: Learn the practices that separate junior developers from senior ones</p> <p>You'll master: - Security hardening techniques that protect your applications - Performance optimization strategies for faster builds and smaller images - Code organization patterns used by top development teams - Production deployment practices that prevent downtime - Container orchestration fundamentals for scalable applications</p> <p>Career milestone: When you start reviewing other people's Dockerfiles and immediately spot improvements!</p> <p>Before vs After Best Practices</p> <p>Before: <code>FROM ubuntu</code> \u2192 1.2GB image with security vulnerabilities</p> <p>After: <code>FROM alpine:3.18</code> \u2192 50MB hardened image with non-root user</p>"},{"location":"practical-guides/#2-fun-examples","title":"2. \ud83c\udfae Fun Examples","text":"<p>What: Build impressive, working applications that demonstrate Docker's power in creative ways</p> <p>Why: Portfolio projects that show employers you can actually build things, not just follow tutorials</p> <p>Time: 2 hours</p> <p>Showcase value: Each project becomes a talking point in interviews and portfolio pieces</p> <p>Amazing projects you'll build: - Multi-service web application with database, API, frontend, and caching - Microservices architecture showing real-world system design - Development environment that works identically on any computer - Automated deployment pipeline using Docker for CI/CD - Performance monitoring stack with real-time dashboards</p> <p>\"Wow!\" moment: When you demo a complex application spinning up with just <code>docker-compose up</code> and people are impressed!</p>"},{"location":"practical-guides/#3-troubleshooting","title":"3. \ud83d\udd27 Troubleshooting","text":"<p>What: Systematic approaches to diagnose and fix any Docker problem you'll encounter</p> <p>Why: Confidence to tackle any issue without getting stuck or frustrated</p> <p>Time: 60 minutes</p> <p>Problem-solving power: Never be blocked by Docker issues again - you'll know exactly how to investigate and fix problems</p> <p>Master debugging skills: - Container startup failures and how to diagnose them - Network connectivity issues between containers and external services - Performance problems and resource optimization techniques - Image build failures and dependency conflicts - Data persistence issues and volume troubleshooting - Security problems and access control debugging</p> <p>Professional confidence: When teammates come to YOU with Docker problems because you always know how to solve them!</p>"},{"location":"practical-guides/#why-this-sequence-works","title":"Why This Sequence Works","text":""},{"location":"practical-guides/#the-professional-progression","title":"\ud83c\udfaf The Professional Progression:","text":"<ol> <li>Best Practices First \u2192 Learn the right way before building habits</li> <li>Fun Examples Second \u2192 Apply best practices in engaging projects</li> <li>Troubleshooting Last \u2192 Debug issues you understand from building projects</li> </ol>"},{"location":"practical-guides/#the-skill-building-logic","title":"\ud83e\udde0 The Skill-Building Logic:","text":"<ul> <li>Best Practices = The foundation of professional Docker work</li> <li>Fun Examples = Hands-on application of professional standards</li> <li>Troubleshooting = Problem-solving skills for real-world challenges</li> </ul>"},{"location":"practical-guides/#the-career-impact","title":"\u26a1 The Career Impact:","text":"<p>By following this sequence, you'll build a complete skill set that employers value: - Technical excellence (best practices) - Practical experience (working projects) - Problem-solving ability (troubleshooting expertise)</p>"},{"location":"practical-guides/#real-world-applications-youll-build","title":"Real-World Applications You'll Build","text":"<p>After completing this section, you'll have portfolio projects like:</p>"},{"location":"practical-guides/#full-stack-e-commerce-platform","title":"\ud83c\udf10 Full-Stack E-commerce Platform","text":"<ul> <li>React frontend with hot-reloading for development</li> <li>Node.js/Express API with authentication and payment processing</li> <li>PostgreSQL database with automated backups</li> <li>Redis caching layer for performance</li> <li>Nginx reverse proxy with SSL termination</li> <li>All orchestrated with Docker Compose</li> </ul>"},{"location":"practical-guides/#monitoring-and-analytics-stack","title":"\ud83d\udcca Monitoring and Analytics Stack","text":"<ul> <li>Real-time application metrics with Prometheus</li> <li>Beautiful dashboards with Grafana</li> <li>Log aggregation with ELK stack</li> <li>Container health monitoring</li> <li>Automated alerting system</li> </ul>"},{"location":"practical-guides/#cicd-pipeline","title":"\ud83d\ude80 CI/CD Pipeline","text":"<ul> <li>Automated testing in Docker containers</li> <li>Multi-stage builds for optimized production images</li> <li>Automated deployment to staging and production</li> <li>Database migrations and rollback capabilities</li> <li>Blue-green deployment strategies</li> </ul>"},{"location":"practical-guides/#personal-cloud-infrastructure","title":"\ud83c\udfe0 Personal Cloud Infrastructure","text":"<ul> <li>Self-hosted development tools (Git, CI/CD, monitoring)</li> <li>Secure remote access with VPN</li> <li>Automated backups and disaster recovery</li> <li>Cost-effective alternative to cloud services</li> </ul>"},{"location":"practical-guides/#different-learning-approaches","title":"Different Learning Approaches","text":"<p>Choose the path that matches your goals:</p> Job Interview PrepPortfolio BuilderProduction ReadinessComprehensive Mastery <p>Perfect for you if: Preparing for DevOps or full-stack developer roles</p> <p>Focus Areas: - Best practices for production-ready applications - Impressive demo projects for your portfolio - Troubleshooting skills that show problem-solving ability</p> <p>Time: 4 hours (comprehensive interview prep)</p> <p>Outcome: Confidently discuss Docker in technical interviews with concrete examples</p> <p>Perfect for you if: Need impressive projects to showcase your skills</p> <p>Approach: - Start with Fun Examples to build cool projects quickly - Apply Best Practices to make them production-quality - Use Troubleshooting skills to solve any issues</p> <p>Time: 3 hours (focused on visible results)</p> <p>Outcome: 3-5 impressive projects that demonstrate real Docker expertise</p> <p>Perfect for you if: Need to deploy Docker applications professionally</p> <p>Focus Areas: - Security, performance, and reliability best practices - Troubleshooting skills for production issues - Real-world examples that mirror your work challenges</p> <p>Time: 3.5 hours (production-focused learning)</p> <p>Outcome: Deploy applications with confidence and handle production issues</p> <p>Perfect for you if: Want to become a Docker expert</p> <p>Approach: - Complete all sections thoroughly - Build every example project - Practice troubleshooting scenarios</p> <p>Time: 5-6 hours (complete expertise)</p> <p>Outcome: Docker expertise that rivals developers with years of experience</p>"},{"location":"practical-guides/#prerequisites-check","title":"Prerequisites Check","text":"<p>Before diving into practical applications:</p>"},{"location":"practical-guides/#technical-requirements","title":"\u2705 Technical Requirements:","text":"<ul> <li>Working with Docker completed</li> <li>Comfortable with Docker Compose, volumes, and networks</li> <li>Understanding of multi-container applications</li> </ul>"},{"location":"practical-guides/#conceptual-understanding","title":"\ud83e\udde0 Conceptual Understanding:","text":"<ul> <li>How images, containers, and volumes work together</li> <li>Basic networking concepts and service communication</li> <li>Development vs production environment differences</li> </ul>"},{"location":"practical-guides/#practical-experience","title":"\ud83d\udca1 Practical Experience:","text":"<ul> <li>Have built and run multi-container applications</li> <li>Comfortable editing YAML files and Dockerfiles</li> <li>Basic understanding of web application architecture</li> </ul>"},{"location":"practical-guides/#success-indicators-youre-ready","title":"Success Indicators You're Ready","text":"<p>You should be comfortable with these concepts:</p>"},{"location":"practical-guides/#multi-container-applications","title":"\ud83c\udfaf Multi-Container Applications:","text":"<ul> <li> Can write docker-compose.yml files from scratch</li> <li> Understand how services communicate by name</li> <li> Know when to use volumes for persistent data</li> </ul>"},{"location":"practical-guides/#development-workflows","title":"\ud83c\udfaf Development Workflows:","text":"<ul> <li> Can set up development environments with Docker</li> <li> Understand the difference between bind mounts and volumes</li> <li> Can debug container startup issues</li> </ul>"},{"location":"practical-guides/#basic-troubleshooting","title":"\ud83c\udfaf Basic Troubleshooting:","text":"<ul> <li> Use <code>docker logs</code> to investigate problems</li> <li> Can get inside containers with <code>docker exec</code></li> <li> Know how to check container and network status</li> </ul>"},{"location":"practical-guides/#common-breakthrough-moments","title":"Common Breakthrough Moments","text":"<p>Get ready for these professional-level realizations:</p>"},{"location":"practical-guides/#i-can-build-production-grade-applications","title":"\ud83d\ude80 \"I can build production-grade applications!\"","text":"<p>Usually happens in the Best Practices section</p> <p>When you realize the applications you're building are actually good enough for real production use.</p>"},{"location":"practical-guides/#i-can-solve-any-docker-problem","title":"\ud83c\udfaf \"I can solve any Docker problem!\"","text":"<p>Usually happens during Troubleshooting</p> <p>The confidence that comes from having systematic debugging approaches for every type of issue.</p>"},{"location":"practical-guides/#docker-is-my-development-superpower","title":"\ud83d\udca1 \"Docker is my development superpower!\"","text":"<p>Usually happens while building Fun Examples</p> <p>When you realize you can spin up any application stack instantly and share it with anyone.</p>"},{"location":"practical-guides/#im-ready-for-senior-level-docker-work","title":"\ud83c\udfc6 \"I'm ready for senior-level Docker work!\"","text":"<p>Usually happens by the end</p> <p>Everything clicks and you feel confident taking on complex Docker projects professionally.</p>"},{"location":"practical-guides/#what-makes-these-guides-special","title":"What Makes These Guides Special","text":""},{"location":"practical-guides/#real-world-focus","title":"\ud83d\udd0d Real-World Focus","text":"<p>Every example and practice comes from actual production scenarios, not artificial tutorials.</p>"},{"location":"practical-guides/#hands-on-learning","title":"\ud83d\udee0\ufe0f Hands-On Learning","text":"<p>Build actual applications you can show off, not just toy examples.</p>"},{"location":"practical-guides/#career-relevant-skills","title":"\ud83c\udfaf Career-Relevant Skills","text":"<p>Learn exactly what employers expect from Docker-capable developers.</p>"},{"location":"practical-guides/#progressive-complexity","title":"\ud83d\ude80 Progressive Complexity","text":"<p>Start with fundamentals, build to advanced professional practices.</p>"},{"location":"practical-guides/#problem-solving-emphasis","title":"\ud83d\udcaa Problem-Solving Emphasis","text":"<p>Develop the debugging mindset that makes you invaluable to any team.</p>"},{"location":"practical-guides/#ready-to-become-a-docker-professional","title":"Ready to Become a Docker Professional?","text":"<p>You've learned the fundamentals - now it's time to apply them like a pro! These practical guides will transform your Docker knowledge into career-ready skills.</p> <ul> <li> <p>\ud83c\udfd7\ufe0f Master Best Practices</p> <p>Learn professional standards for production-ready applications.</p> <p>Professional Docker Practices \u2192</p> </li> <li> <p>\ud83c\udfae Build Impressive Projects</p> <p>Create portfolio-worthy applications that showcase your skills.</p> <p>Fun Project Examples \u2192</p> </li> <li> <p>\ud83d\udd27 Solve Any Problem</p> <p>Master troubleshooting techniques for confident problem-solving.</p> <p>Troubleshooting Guide \u2192</p> </li> <li> <p>\ud83d\udd04 Need a Refresher?</p> <p>Review Docker Compose, volumes, and networks.</p> <p>Review Working with Docker \u2192</p> </li> </ul> <p>You're about to level up professionally!</p> <p>This section transforms Docker from a tool you're learning into a skill that makes you valuable to employers. You'll build real applications, follow professional practices, and develop the troubleshooting expertise that separates beginners from experts. By the end, you'll be ready for senior-level Docker work!</p> <p>Let's build your Docker expertise! \ud83d\udc33</p>"},{"location":"practical-guides/best-practices/","title":"Best Practices","text":"<p>These are the professional standards that separate hobby Docker users from production-ready developers. Following these practices will make your applications more secure, performant, and maintainable.</p>"},{"location":"practical-guides/best-practices/#dockerfile-best-practices","title":"Dockerfile Best Practices","text":""},{"location":"practical-guides/best-practices/#use-specific-base-images","title":"Use Specific Base Images","text":"<p>\u274c Bad - Unpredictable: <pre><code>FROM python\n</code></pre></p> <p>\u2705 Good - Specific and reliable: <pre><code>FROM python:3.11-alpine\n</code></pre></p> <p>Why this matters: - <code>python</code> tag changes over time (could be 3.9 today, 3.12 tomorrow) - <code>python:3.11-alpine</code> is locked to specific Python version on lightweight Alpine Linux - <code>alpine</code> variants are smaller and more secure than full distributions</p> <p>Command to check image size: <pre><code># Compare image sizes\ndocker images python:latest     # Usually 800MB+\ndocker images python:3.11-alpine  # Usually 50MB\n</code></pre></p> <p>The <code>docker images</code> command shows size in the SIZE column - always prefer smaller, more specific images.</p>"},{"location":"practical-guides/best-practices/#optimize-layer-caching","title":"Optimize Layer Caching","text":"<p>\u274c Bad - Breaks caching: <pre><code>FROM python:3.11-alpine\nCOPY . /app                    # Changes every time you edit code\nRUN pip install -r requirements.txt  # Reinstalls every time\n</code></pre></p> <p>\u2705 Good - Efficient caching: <pre><code>FROM python:3.11-alpine\n\n# Copy requirements first (changes less frequently)\nCOPY requirements.txt /app/requirements.txt\nWORKDIR /app\nRUN pip install -r requirements.txt\n\n# Copy code last (changes most frequently)  \nCOPY . /app\n</code></pre></p> <p>Why layer order matters: - Docker caches each layer (RUN, COPY, etc.) - If a layer changes, all subsequent layers rebuild - Dependencies change less often than application code - By copying requirements first, Docker reuses the pip install layer when only code changes</p> <p>Test this caching: <pre><code># First build (downloads and installs everything)\ndocker build -t myapp .\n\n# Edit your application code (not requirements.txt)\n# Second build (reuses pip install layer)\ndocker build -t myapp .\n# Notice \"CACHED\" appears for the pip install step\n</code></pre></p>"},{"location":"practical-guides/best-practices/#combine-run-commands","title":"Combine RUN Commands","text":"<p>\u274c Bad - Many layers: <pre><code>RUN apt-get update\nRUN apt-get install -y curl\nRUN apt-get install -y git\nRUN apt-get clean\n</code></pre></p> <p>\u2705 Good - Single layer: <pre><code>RUN apt-get update &amp;&amp; \\\n    apt-get install -y \\\n        curl \\\n        git \\\n    &amp;&amp; apt-get clean \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n</code></pre></p> <p>Command breakdown: - <code>&amp;&amp;</code> chains commands - if any fails, the whole RUN fails - <code>\\</code> continues the command on the next line for readability - <code>apt-get clean</code> removes package cache files - <code>rm -rf /var/lib/apt/lists/*</code> removes apt repository lists - Each <code>RUN</code> creates a new layer, so fewer <code>RUN</code> commands = smaller images</p> <p>Check layer count: <pre><code># See how many layers your image has\ndocker history myapp\n</code></pre></p>"},{"location":"practical-guides/best-practices/#create-non-root-users","title":"Create Non-Root Users","text":"<p>\u274c Bad - Security risk: <pre><code>FROM python:3.11-alpine\n# Runs as root by default (dangerous!)\n</code></pre></p> <p>\u2705 Good - Secure: <pre><code>FROM python:3.11-alpine\n\n# Create non-root user\nRUN addgroup -g 1001 -S nodejs &amp;&amp; \\\n    adduser -S nextjs -u 1001 -G nodejs\n\n# Switch to non-root user\nUSER nextjs\n</code></pre></p> <p>Command explanation: - <code>addgroup -g 1001 -S nodejs</code> creates group with ID 1001 (system group) - <code>adduser -S nextjs -u 1001 -G nodejs</code> creates user with ID 1001 in the nodejs group - <code>USER nextjs</code> switches to non-root user for all subsequent commands</p> <p>Test user security: <pre><code># Check what user the container runs as\ndocker run myapp whoami\n# Should show: nextjs (not root)\n\n# Verify limited permissions\ndocker run myapp id\n# Shows user and group IDs\n</code></pre></p>"},{"location":"practical-guides/best-practices/#use-multi-stage-builds","title":"Use Multi-Stage Builds","text":"<p>Problem: Build tools make production images huge and insecure.</p> <p>\u2705 Solution - Multi-stage build: <pre><code># Stage 1: Build stage (includes dev tools)\nFROM node:18-alpine AS builder\nWORKDIR /app\nCOPY package*.json ./\nRUN npm ci --only=production\n\n# Stage 2: Production stage (minimal)  \nFROM node:18-alpine AS production\nRUN addgroup -g 1001 -S nodejs &amp;&amp; \\\n    adduser -S nextjs -u 1001 -G nodejs\n\n# Copy only built application (no dev tools)\nCOPY --from=builder --chown=nextjs:nodejs /app /app\nUSER nextjs\nWORKDIR /app\nCMD [\"npm\", \"start\"]\n</code></pre></p> <p>Command breakdown: - <code>FROM node:18-alpine AS builder</code> names this stage \"builder\" - <code>COPY --from=builder</code> copies files from the builder stage only - <code>--chown=nextjs:nodejs</code> sets file ownership during copy - Final image only contains production files, not build tools</p> <p>Build multi-stage image: <pre><code># Build only production stage (default)\ndocker build -t myapp .\n\n# Build specific stage for development\ndocker build --target builder -t myapp:dev .\n</code></pre></p>"},{"location":"practical-guides/best-practices/#security-best-practices","title":"Security Best Practices","text":""},{"location":"practical-guides/best-practices/#scan-images-for-vulnerabilities","title":"Scan Images for Vulnerabilities","text":"<p>Always scan images before production: <pre><code># Scan image for known vulnerabilities\ndocker scout cves myapp:latest\n</code></pre></p> <p>What this command does: - <code>docker scout</code> is Docker's security scanning tool - <code>cves</code> looks for Common Vulnerabilities and Exposures - Shows severity levels (CRITICAL, HIGH, MEDIUM, LOW)</p> <p>Alternative scanning with Trivy: <pre><code># Install Trivy scanner (one-time setup)\ndocker run --rm -v /var/run/docker.sock:/var/run/docker.sock \\\n  -v $HOME/Library/Caches:/root/.cache/ \\\n  aquasec/trivy image myapp:latest\n</code></pre></p> <p>Command explanation: - <code>-v /var/run/docker.sock:/var/run/docker.sock</code> gives Trivy access to Docker - <code>-v $HOME/Library/Caches:/root/.cache/</code> caches vulnerability database locally - <code>aquasec/trivy image</code> scans the specified image</p>"},{"location":"practical-guides/best-practices/#manage-secrets-properly","title":"Manage Secrets Properly","text":"<p>\u274c Bad - Secrets in Dockerfile: <pre><code>ENV API_KEY=secret123  # Visible in image history!\n</code></pre></p> <p>\u2705 Good - Runtime secrets: <pre><code># Pass secrets at runtime, not build time\ndocker run -e API_KEY=secret123 myapp\n\n# Or use Docker secrets (swarm mode)\necho \"secret123\" | docker secret create api_key -\ndocker service create --secret api_key myapp\n</code></pre></p> <p>Why build-time secrets are dangerous: <pre><code># Anyone can see secrets in image history\ndocker history myapp\n# Shows all ENV commands with values!\n</code></pre></p> <p>Better secret management: <pre><code># Use environment files (keep out of version control)\necho \"API_KEY=secret123\" &gt; .env\ndocker run --env-file .env myapp\n\n# Mount secrets as files (more secure)\ndocker run -v ./secrets:/run/secrets myapp\n</code></pre></p>"},{"location":"practical-guides/best-practices/#limit-container-resources","title":"Limit Container Resources","text":"<p>Always set resource limits: <pre><code># Limit memory to prevent OOM killing other processes\ndocker run --memory=512m myapp\n\n# Limit CPU to prevent monopolizing host\ndocker run --cpus=\"1.5\" myapp\n\n# Combine limits for production\ndocker run \\\n  --memory=1g \\\n  --cpus=\"2.0\" \\\n  --restart=unless-stopped \\\n  myapp\n</code></pre></p> <p>Command breakdown: - <code>--memory=512m</code> limits container to 512 megabytes of RAM - <code>--cpus=\"1.5\"</code> limits container to 1.5 CPU cores worth of processing - <code>--restart=unless-stopped</code> automatically restarts if container crashes</p> <p>Monitor resource usage: <pre><code># Watch real-time resource usage\ndocker stats myapp\n\n# Get current resource usage once\ndocker stats --no-stream myapp\n</code></pre></p>"},{"location":"practical-guides/best-practices/#performance-optimization","title":"Performance Optimization","text":""},{"location":"practical-guides/best-practices/#minimize-image-size","title":"Minimize Image Size","text":"<p>Use .dockerignore: <pre><code># Create .dockerignore file\ncat &gt; .dockerignore &lt;&lt; 'EOF'\nnode_modules\nnpm-debug.log\n.git\n.gitignore\nREADME.md\n.env\n.nyc_output\ncoverage\n.vscode\nEOF\n</code></pre></p> <p>What .dockerignore does: - Works like .gitignore but for Docker builds - Prevents unnecessary files from being sent to Docker daemon - Reduces build context size and build time - Files listed here won't be available for COPY commands</p> <p>Test .dockerignore effectiveness: <pre><code># Check build context size\ndocker build --no-cache -t myapp . 2&gt;&amp;1 | grep \"Sending build context\"\n# Should show smaller context after adding .dockerignore\n</code></pre></p>"},{"location":"practical-guides/best-practices/#optimize-package-installation","title":"Optimize Package Installation","text":"<p>For Python applications: <pre><code># Use pip cache and avoid unnecessary files\nRUN pip install --no-cache-dir \\\n    --user \\\n    --no-warn-script-location \\\n    -r requirements.txt\n</code></pre></p> <p>Command breakdown: - <code>--no-cache-dir</code> prevents pip from storing cache (saves space) - <code>--user</code> installs to user directory (works with non-root user) - <code>--no-warn-script-location</code> suppresses warnings about script paths</p> <p>For Node.js applications: <pre><code># Use npm ci for faster, reliable installations\nCOPY package*.json ./\nRUN npm ci --only=production --silent\n\n# Alternative: Use npm cache mount (newer Docker versions)\nRUN --mount=type=cache,target=/root/.npm \\\n    npm ci --only=production\n</code></pre></p> <p>What <code>npm ci</code> does: - Faster than <code>npm install</code> (up to 2x speed improvement) - Uses package-lock.json for consistent installs - <code>--only=production</code> skips dev dependencies - <code>--silent</code> reduces build output noise</p>"},{"location":"practical-guides/best-practices/#leverage-build-cache","title":"Leverage Build Cache","text":"<p>Use BuildKit for advanced caching: <pre><code># Enable BuildKit (faster builds)\nexport DOCKER_BUILDKIT=1\n\n# Build with cache mount\ndocker build -t myapp .\n</code></pre></p> <p>Cache mount example in Dockerfile: <pre><code># Cache package managers\nRUN --mount=type=cache,target=/var/cache/apt \\\n    --mount=type=cache,target=/var/lib/apt \\\n    apt-get update &amp;&amp; apt-get install -y git\n\n# Cache npm installs\nRUN --mount=type=cache,target=/root/.npm \\\n    npm ci --only=production\n</code></pre></p> <p>What cache mounts do: - <code>--mount=type=cache</code> creates persistent cache between builds - Package manager caches persist across different image builds - Dramatically speeds up dependency installation</p>"},{"location":"practical-guides/best-practices/#production-deployment","title":"Production Deployment","text":""},{"location":"practical-guides/best-practices/#health-checks","title":"Health Checks","text":"<p>Add health checks to your applications: <pre><code># Simple HTTP health check\nHEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \\\n  CMD curl -f http://localhost:8080/health || exit 1\n</code></pre></p> <p>Health check parameters explained: - <code>--interval=30s</code> checks every 30 seconds - <code>--timeout=3s</code> fails if check takes longer than 3 seconds - <code>--start-period=5s</code> grace period before first check - <code>--retries=3</code> marks unhealthy after 3 consecutive failures</p> <p>Test health checks: <pre><code># Run container and monitor health\ndocker run -d --name myapp myapp\n\n# Check health status\ndocker ps\n# Look for \"(healthy)\" or \"(unhealthy)\" in STATUS column\n\n# See health check details\ndocker inspect myapp | grep -A 10 \"Health\"\n</code></pre></p>"},{"location":"practical-guides/best-practices/#logging-configuration","title":"Logging Configuration","text":"<p>Configure logging for production: <pre><code># Limit log file size and rotation\ndocker run -d \\\n  --log-driver json-file \\\n  --log-opt max-size=10m \\\n  --log-opt max-file=3 \\\n  myapp\n</code></pre></p> <p>Logging options explained: - <code>--log-driver json-file</code> uses JSON format logs (default) - <code>--log-opt max-size=10m</code> limits each log file to 10 megabytes - <code>--log-opt max-file=3</code> keeps maximum 3 rotated log files</p> <p>View and manage logs: <pre><code># View recent logs\ndocker logs --tail 100 myapp\n\n# Follow logs in real-time\ndocker logs -f myapp\n\n# View logs with timestamps\ndocker logs -t myapp\n\n# Check log file sizes\ndocker inspect myapp | grep LogPath\n# Shows actual log file location\n</code></pre></p>"},{"location":"practical-guides/best-practices/#environment-specific-configurations","title":"Environment-Specific Configurations","text":"<p>Use Docker Compose overrides:</p> <p>Base configuration (docker-compose.yml): <pre><code>version: '3.8'\nservices:\n  app:\n    image: myapp:latest\n    ports:\n      - \"3000:3000\"\n    environment:\n      - NODE_ENV=production\n</code></pre></p> <p>Development override (docker-compose.override.yml): <pre><code>version: '3.8'\nservices:\n  app:\n    build: .\n    volumes:\n      - .:/app\n      - /app/node_modules\n    environment:\n      - NODE_ENV=development\n      - DEBUG=true\n</code></pre></p> <p>How overrides work: <pre><code># Development (uses override automatically)\ndocker-compose up\n# Combines base + override files\n\n# Production (ignores override)\ndocker-compose -f docker-compose.yml up\n# Uses only base configuration\n</code></pre></p>"},{"location":"practical-guides/best-practices/#monitoring-and-maintenance","title":"Monitoring and Maintenance","text":""},{"location":"practical-guides/best-practices/#container-resource-monitoring","title":"Container Resource Monitoring","text":"<p>Set up monitoring with docker stats: <pre><code># Monitor all running containers\ndocker stats\n\n# Monitor specific containers with custom format\ndocker stats --format \"table {{.Container}}\\t{{.CPUPerc}}\\t{{.MemUsage}}\\t{{.NetIO}}\"\n</code></pre></p> <p>Format options explained: - <code>{{.Container}}</code> shows container name - <code>{{.CPUPerc}}</code> shows CPU percentage usage - <code>{{.MemUsage}}</code> shows memory usage (used/available) - <code>{{.NetIO}}</code> shows network input/output</p> <p>Set up alerts for resource usage: <pre><code># Simple script to alert on high memory usage\n#!/bin/bash\nMEMORY_THRESHOLD=80\n\ndocker stats --no-stream --format \"{{.Container}}\\t{{.MemPerc}}\" | while read line; do\n    container=$(echo $line | cut -f1)\n    memory=$(echo $line | cut -f2 | sed 's/%//')\n\n    if [ \"$memory\" -gt \"$MEMORY_THRESHOLD\" ]; then\n        echo \"ALERT: $container using ${memory}% memory\"\n        # Add notification logic here (email, Slack, etc.)\n    fi\ndone\n</code></pre></p>"},{"location":"practical-guides/best-practices/#regular-maintenance","title":"Regular Maintenance","text":"<p>Clean up unused resources regularly: <pre><code># Remove stopped containers\ndocker container prune\n\n# Remove unused images\ndocker image prune\n\n# Remove unused volumes (BE CAREFUL!)\ndocker volume prune\n\n# Remove everything unused (VERY CAREFUL!)\ndocker system prune -a\n</code></pre></p> <p>Scheduled cleanup script: <pre><code>#!/bin/bash\n# cleanup.sh - Run weekly via cron\n\necho \"Starting Docker cleanup at $(date)\"\n\n# Remove containers stopped more than 24 hours ago\ndocker container prune --filter \"until=24h\" -f\n\n# Remove images not used in 7 days\ndocker image prune --filter \"until=168h\" -f\n\n# Show disk usage after cleanup\ndocker system df\n\necho \"Cleanup completed at $(date)\"\n</code></pre></p> <p>Set up cron job for cleanup: <pre><code># Edit crontab\ncrontab -e\n\n# Add weekly cleanup (every Sunday at 2 AM)\n0 2 * * 0 /path/to/cleanup.sh &gt;&gt; /var/log/docker-cleanup.log 2&gt;&amp;1\n</code></pre></p>"},{"location":"practical-guides/best-practices/#development-workflow-best-practices","title":"Development Workflow Best Practices","text":""},{"location":"practical-guides/best-practices/#local-development-setup","title":"Local Development Setup","text":"<p>Create consistent development environments: <pre><code># docker-compose.dev.yml\nversion: '3.8'\n\nservices:\n  app:\n    build: .\n    volumes:\n      - .:/app\n      - /app/node_modules\n    ports:\n      - \"3000:3000\"\n    environment:\n      - NODE_ENV=development\n      - DEBUG=*\n    command: npm run dev\n\n  db:\n    image: postgres:13\n    environment:\n      - POSTGRES_PASSWORD=dev_password\n      - POSTGRES_DB=myapp_dev\n    ports:\n      - \"5432:5432\"\n    volumes:\n      - dev_db_data:/var/lib/postgresql/data\n\nvolumes:\n  dev_db_data:\n</code></pre></p> <p>Start development environment: <pre><code># Start with development configuration\ndocker-compose -f docker-compose.dev.yml up -d\n\n# View logs from all services\ndocker-compose -f docker-compose.dev.yml logs -f\n\n# Stop and clean up\ndocker-compose -f docker-compose.dev.yml down -v\n</code></pre></p> <p>Command breakdown: - <code>-f docker-compose.dev.yml</code> specifies configuration file - <code>up -d</code> starts services in background - <code>logs -f</code> follows logs from all services - <code>down -v</code> stops services and removes volumes</p>"},{"location":"practical-guides/best-practices/#quick-reference-checklist","title":"Quick Reference Checklist","text":""},{"location":"practical-guides/best-practices/#before-production-deployment","title":"Before Production Deployment","text":"<ul> <li> Security scanned: <code>docker scout cves myimage</code></li> <li> Non-root user: <code>USER</code> directive in Dockerfile</li> <li> Resource limits: <code>--memory</code> and <code>--cpus</code> flags set</li> <li> Health checks: <code>HEALTHCHECK</code> configured</li> <li> Logging configured: Log rotation and size limits</li> <li> Secrets secure: No secrets in image history</li> <li> Image optimized: Multi-stage build, minimal base image</li> </ul>"},{"location":"practical-guides/best-practices/#performance-checklist","title":"Performance Checklist","text":"<ul> <li> Specific base images: No <code>latest</code> tags</li> <li> Layer caching optimized: Dependencies before application code</li> <li> Combined RUN commands: Fewer layers</li> <li> .dockerignore present: Exclude unnecessary files</li> <li> Package cache management: <code>--no-cache-dir</code> flags used</li> </ul>"},{"location":"practical-guides/best-practices/#maintenance-checklist","title":"Maintenance Checklist","text":"<ul> <li> Regular cleanup: Automated pruning scheduled</li> <li> Monitoring setup: Resource usage tracked</li> <li> Log rotation: Size and retention configured</li> <li> Update schedule: Base images updated regularly</li> <li> Backup strategy: Volume data protected</li> </ul>"},{"location":"practical-guides/best-practices/#key-takeaways","title":"Key Takeaways","text":"<ul> <li>Use specific, minimal base images - <code>python:3.11-alpine</code> instead of <code>python</code></li> <li>Optimize layer caching - Copy dependencies before application code</li> <li>Never run as root in production - Create and use non-root users</li> <li>Scan for vulnerabilities - Use <code>docker scout</code> or Trivy before deployment</li> <li>Set resource limits - Prevent containers from consuming all host resources</li> <li>Implement health checks - Monitor application health automatically</li> <li>Clean up regularly - Remove unused images, containers, and volumes</li> <li>Use multi-stage builds - Keep production images minimal and secure</li> </ul> <p>Next: Fun Examples \u2192 - Apply these best practices while building impressive real-world applications!</p>"},{"location":"practical-guides/fun-examples/","title":"Fun Docker Projects","text":"<p>Learn Docker through engaging, hands-on projects that demonstrate real-world applications. These examples combine learning with practical outcomes you can actually use and show off to others.</p>"},{"location":"practical-guides/fun-examples/#web-development-projects","title":"Web Development Projects","text":""},{"location":"practical-guides/fun-examples/#personal-portfolio-website","title":"Personal Portfolio Website","text":"<p>Build and deploy a static website using Docker:</p> <pre><code># Dockerfile\nFROM nginx:alpine\n\n# Copy your website files\nCOPY index.html /usr/share/nginx/html/\nCOPY css/ /usr/share/nginx/html/css/\nCOPY js/ /usr/share/nginx/html/js/\nCOPY images/ /usr/share/nginx/html/images/\n\n# Custom nginx configuration (optional)\nCOPY nginx.conf /etc/nginx/nginx.conf\n\nEXPOSE 80\nCMD [\"nginx\", \"-g\", \"daemon off;\"]\n</code></pre> <p>Create a simple HTML file: <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;My Docker Portfolio&lt;/title&gt;\n    &lt;style&gt;\n        body { font-family: Arial, sans-serif; text-align: center; padding: 50px; }\n        .container { max-width: 800px; margin: 0 auto; }\n        h1 { color: #2496ED; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"container\"&gt;\n        &lt;h1&gt;Welcome to My Docker-Powered Portfolio!&lt;/h1&gt;\n        &lt;p&gt;This website is running inside a Docker container.&lt;/p&gt;\n        &lt;p&gt;Built with Docker, deployed anywhere!&lt;/p&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre></p> <p>Build and run: <pre><code>docker build -t my-portfolio .\ndocker run -d -p 8080:80 --name portfolio my-portfolio\n</code></pre></p> <p>Visit <code>http://localhost:8080</code> to see your containerized website!</p>"},{"location":"practical-guides/fun-examples/#multi-container-blog-platform","title":"Multi-Container Blog Platform","text":"<p>Create a WordPress blog with database using Docker Compose:</p> <pre><code># docker-compose.yml\nversion: '3.8'\nservices:\n  wordpress:\n    image: wordpress:latest\n    ports:\n      - \"8000:80\"\n    environment:\n      WORDPRESS_DB_HOST: db\n      WORDPRESS_DB_USER: wpuser\n      WORDPRESS_DB_PASSWORD: wppassword\n      WORDPRESS_DB_NAME: wordpress\n    volumes:\n      - wordpress_data:/var/www/html\n    depends_on:\n      - db\n\n  db:\n    image: mysql:5.7\n    environment:\n      MYSQL_DATABASE: wordpress\n      MYSQL_USER: wpuser\n      MYSQL_PASSWORD: wppassword\n      MYSQL_ROOT_PASSWORD: rootpassword\n    volumes:\n      - db_data:/var/lib/mysql\n\nvolumes:\n  wordpress_data:\n  db_data:\n</code></pre> <p>Start your blog: <pre><code>docker-compose up -d\n</code></pre></p> <p>Access your blog at <code>http://localhost:8000</code> and create your first post!</p>"},{"location":"practical-guides/fun-examples/#development-environment-projects","title":"Development Environment Projects","text":""},{"location":"practical-guides/fun-examples/#full-stack-development-environment","title":"Full-Stack Development Environment","text":"<p>Create a complete development environment with hot-reloading:</p> <pre><code># docker-compose.dev.yml\nversion: '3.8'\nservices:\n  frontend:\n    image: node:18\n    working_dir: /app\n    volumes:\n      - ./frontend:/app\n      - node_modules:/app/node_modules\n    ports:\n      - \"3000:3000\"\n    command: npm start\n    environment:\n      - CHOKIDAR_USEPOLLING=true\n\n  backend:\n    image: node:18\n    working_dir: /app\n    volumes:\n      - ./backend:/app\n      - node_modules_backend:/app/node_modules\n    ports:\n      - \"5000:5000\"\n    command: npm run dev\n    environment:\n      - NODE_ENV=development\n\n  database:\n    image: postgres:13\n    environment:\n      POSTGRES_DB: devdb\n      POSTGRES_USER: developer\n      POSTGRES_PASSWORD: devpassword\n    ports:\n      - \"5432:5432\"\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n\nvolumes:\n  node_modules:\n  node_modules_backend:\n  postgres_data:\n</code></pre>"},{"location":"practical-guides/fun-examples/#code-server-vs-code-in-browser","title":"Code Server (VS Code in Browser)","text":"<p>Run VS Code in your browser using Docker:</p> <pre><code>docker run -d \\\n  --name code-server \\\n  -p 8443:8443 \\\n  -v \"$HOME/.local/share/code-server:/home/coder/.local/share/code-server\" \\\n  -v \"$PWD:/home/coder/project\" \\\n  -u \"$(id -u):$(id -g)\" \\\n  -e \"DOCKER_USER=$USER\" \\\n  codercom/code-server:latest\n</code></pre> <p>Access your cloud IDE at <code>http://localhost:8443</code></p>"},{"location":"practical-guides/fun-examples/#game-and-entertainment-projects","title":"Game and Entertainment Projects","text":""},{"location":"practical-guides/fun-examples/#minecraft-server","title":"Minecraft Server","text":"<p>Host your own Minecraft server with Docker:</p> <pre><code># minecraft-compose.yml\nversion: '3.8'\nservices:\n  minecraft:\n    image: itzg/minecraft-server\n    ports:\n      - \"25565:25565\"\n    environment:\n      EULA: \"TRUE\"\n      VERSION: \"LATEST\"\n      MEMORY: \"2G\"\n      DIFFICULTY: \"easy\"\n      MAX_PLAYERS: \"10\"\n      MOTD: \"My Docker Minecraft Server!\"\n    volumes:\n      - minecraft_data:/data\n    restart: unless-stopped\n\nvolumes:\n  minecraft_data:\n</code></pre> <p>Start your server: <pre><code>docker-compose -f minecraft-compose.yml up -d\n</code></pre></p> <p>Connect to your server at <code>localhost:25565</code></p>"},{"location":"practical-guides/fun-examples/#retro-game-emulator","title":"Retro Game Emulator","text":"<p>Run classic games in your browser:</p> <pre><code># Run a web-based game emulator\ndocker run -d \\\n  --name retro-games \\\n  -p 8080:80 \\\n  linuxserver/emulatorjs\n\n# Access at http://localhost:8080\n</code></pre>"},{"location":"practical-guides/fun-examples/#utility-and-tool-projects","title":"Utility and Tool Projects","text":""},{"location":"practical-guides/fun-examples/#personal-cloud-storage","title":"Personal Cloud Storage","text":"<p>Set up your own cloud storage with Nextcloud:</p> <pre><code># nextcloud-compose.yml\nversion: '3.8'\nservices:\n  nextcloud:\n    image: nextcloud:apache\n    ports:\n      - \"8080:80\"\n    volumes:\n      - nextcloud_data:/var/www/html\n      - ./data:/var/www/html/data\n    environment:\n      MYSQL_HOST: db\n      MYSQL_DATABASE: nextcloud\n      MYSQL_USER: nextcloud\n      MYSQL_PASSWORD: nextcloud_password\n    depends_on:\n      - db\n\n  db:\n    image: mariadb:10.5\n    environment:\n      MYSQL_ROOT_PASSWORD: root_password\n      MYSQL_DATABASE: nextcloud\n      MYSQL_USER: nextcloud\n      MYSQL_PASSWORD: nextcloud_password\n    volumes:\n      - db_data:/var/lib/mysql\n\nvolumes:\n  nextcloud_data:\n  db_data:\n</code></pre>"},{"location":"practical-guides/fun-examples/#url-shortener-service","title":"URL Shortener Service","text":"<p>Create your own URL shortener:</p> <pre><code># Dockerfile for simple URL shortener\nFROM python:3.9-slim\n\nWORKDIR /app\n\nCOPY requirements.txt .\nRUN pip install -r requirements.txt\n\nCOPY app.py .\nCOPY templates/ ./templates/\n\nEXPOSE 5000\n\nCMD [\"python\", \"app.py\"]\n</code></pre> <p>Simple Flask application: <pre><code># app.py\nfrom flask import Flask, request, redirect, render_template_string\nimport string\nimport random\n\napp = Flask(__name__)\nurl_mapping = {}\n\ndef generate_short_url():\n    return ''.join(random.choices(string.ascii_letters + string.digits, k=6))\n\n@app.route('/')\ndef home():\n    return '''\n    &lt;form method=\"post\" action=\"/shorten\"&gt;\n        &lt;input type=\"url\" name=\"url\" placeholder=\"Enter URL\" required&gt;\n        &lt;button type=\"submit\"&gt;Shorten&lt;/button&gt;\n    &lt;/form&gt;\n    '''\n\n@app.route('/shorten', methods=['POST'])\ndef shorten():\n    original_url = request.form['url']\n    short_code = generate_short_url()\n    url_mapping[short_code] = original_url\n    return f'Shortened URL: &lt;a href=\"/{short_code}\"&gt;http://localhost:5000/{short_code}&lt;/a&gt;'\n\n@app.route('/&lt;short_code&gt;')\ndef redirect_url(short_code):\n    original_url = url_mapping.get(short_code)\n    if original_url:\n        return redirect(original_url)\n    return 'URL not found', 404\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000, debug=True)\n</code></pre></p>"},{"location":"practical-guides/fun-examples/#learning-and-educational-projects","title":"Learning and Educational Projects","text":""},{"location":"practical-guides/fun-examples/#interactive-python-environment","title":"Interactive Python Environment","text":"<p>Create a Jupyter notebook environment:</p> <pre><code>docker run -d \\\n  --name jupyter \\\n  -p 8888:8888 \\\n  -v \"$PWD\":/home/jovyan/work \\\n  jupyter/scipy-notebook\n</code></pre> <p>Check logs for the access token: <pre><code>docker logs jupyter\n</code></pre></p>"},{"location":"practical-guides/fun-examples/#database-learning-environment","title":"Database Learning Environment","text":"<p>Set up multiple databases for learning:</p> <pre><code># database-lab.yml\nversion: '3.8'\nservices:\n  postgres:\n    image: postgres:13\n    environment:\n      POSTGRES_DB: learning\n      POSTGRES_USER: student\n      POSTGRES_PASSWORD: password\n    ports:\n      - \"5432:5432\"\n\n  mysql:\n    image: mysql:8.0\n    environment:\n      MYSQL_DATABASE: learning\n      MYSQL_USER: student\n      MYSQL_PASSWORD: password\n      MYSQL_ROOT_PASSWORD: rootpass\n    ports:\n      - \"3306:3306\"\n\n  redis:\n    image: redis:7-alpine\n    ports:\n      - \"6379:6379\"\n\n  mongo:\n    image: mongo:5\n    environment:\n      MONGO_INITDB_DATABASE: learning\n    ports:\n      - \"27017:27017\"\n\n  adminer:\n    image: adminer\n    ports:\n      - \"8080:8080\"\n</code></pre> <p>Access database management at <code>http://localhost:8080</code></p>"},{"location":"practical-guides/fun-examples/#api-and-microservices-projects","title":"API and Microservices Projects","text":""},{"location":"practical-guides/fun-examples/#weather-api-service","title":"Weather API Service","text":"<p>Build a simple weather API:</p> <pre><code>FROM node:18-alpine\nWORKDIR /app\nCOPY package*.json ./\nRUN npm install\nCOPY . .\nEXPOSE 3000\nCMD [\"node\", \"server.js\"]\n</code></pre> <p>Simple weather API: <pre><code>// server.js\nconst express = require('express');\nconst app = express();\nconst port = 3000;\n\n// Mock weather data\nconst weatherData = {\n  'new-york': { temp: 22, condition: 'sunny' },\n  'london': { temp: 15, condition: 'rainy' },\n  'tokyo': { temp: 28, condition: 'cloudy' }\n};\n\napp.get('/weather/:city', (req, res) =&gt; {\n  const city = req.params.city.toLowerCase();\n  const weather = weatherData[city];\n\n  if (weather) {\n    res.json({ city, ...weather });\n  } else {\n    res.status(404).json({ error: 'City not found' });\n  }\n});\n\napp.listen(port, '0.0.0.0', () =&gt; {\n  console.log(`Weather API running on port ${port}`);\n});\n</code></pre></p>"},{"location":"practical-guides/fun-examples/#chat-application","title":"Chat Application","text":"<p>Create a real-time chat using Socket.io:</p> <pre><code># chat-app.yml\nversion: '3.8'\nservices:\n  chat-app:\n    build: .\n    ports:\n      - \"3000:3000\"\n    environment:\n      - NODE_ENV=production\n    volumes:\n      - ./public:/app/public\n\n  redis:\n    image: redis:7-alpine\n    ports:\n      - \"6379:6379\"\n</code></pre>"},{"location":"practical-guides/fun-examples/#creative-projects","title":"Creative Projects","text":""},{"location":"practical-guides/fun-examples/#digital-photo-frame","title":"Digital Photo Frame","text":"<p>Display rotating images from a folder:</p> <pre><code>FROM nginx:alpine\n\n# Install image processing tools\nRUN apk add --no-cache imagemagick\n\n# Copy photos and web interface\nCOPY photos/ /usr/share/nginx/html/photos/\nCOPY index.html /usr/share/nginx/html/\nCOPY slideshow.js /usr/share/nginx/html/\n\nEXPOSE 80\n</code></pre> <p>Slideshow interface: <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Digital Photo Frame&lt;/title&gt;\n    &lt;style&gt;\n        body { margin: 0; background: black; }\n        img { width: 100vw; height: 100vh; object-fit: contain; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;img id=\"photo\" src=\"\" alt=\"Photo\"&gt;\n    &lt;script&gt;\n        const photos = ['photo1.jpg', 'photo2.jpg', 'photo3.jpg'];\n        let currentPhoto = 0;\n\n        function showNextPhoto() {\n            document.getElementById('photo').src = `photos/${photos[currentPhoto]}`;\n            currentPhoto = (currentPhoto + 1) % photos.length;\n        }\n\n        showNextPhoto();\n        setInterval(showNextPhoto, 5000); // Change every 5 seconds\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre></p>"},{"location":"practical-guides/fun-examples/#rss-feed-reader","title":"RSS Feed Reader","text":"<p>Create a personal news aggregator:</p> <pre><code># rss-reader.yml\nversion: '3.8'\nservices:\n  miniflux:\n    image: miniflux/miniflux:latest\n    ports:\n      - \"8080:8080\"\n    environment:\n      DATABASE_URL: postgres://miniflux:password@db/miniflux?sslmode=disable\n      RUN_MIGRATIONS: 1\n      CREATE_ADMIN: 1\n      ADMIN_USERNAME: admin\n      ADMIN_PASSWORD: password\n    depends_on:\n      - db\n\n  db:\n    image: postgres:13\n    environment:\n      POSTGRES_USER: miniflux\n      POSTGRES_PASSWORD: password\n      POSTGRES_DB: miniflux\n    volumes:\n      - db_data:/var/lib/postgresql/data\n\nvolumes:\n  db_data:\n</code></pre>"},{"location":"practical-guides/fun-examples/#automation-projects","title":"Automation Projects","text":""},{"location":"practical-guides/fun-examples/#automated-backup-service","title":"Automated Backup Service","text":"<p>Create a backup service for your files:</p> <pre><code>FROM alpine:latest\n\nRUN apk add --no-cache \\\n    rsync \\\n    openssh-client \\\n    curl\n\nCOPY backup.sh /usr/local/bin/backup.sh\nRUN chmod +x /usr/local/bin/backup.sh\n\n# Run backup every hour\nCMD [\"crond\", \"-f\"]\n</code></pre> <p>Backup script: <pre><code>#!/bin/sh\n# backup.sh\n\nSOURCE_DIR=\"/data\"\nBACKUP_DIR=\"/backup\"\nTIMESTAMP=$(date +%Y%m%d_%H%M%S)\n\necho \"Starting backup at $TIMESTAMP\"\n\n# Create timestamped backup\ntar czf \"$BACKUP_DIR/backup_$TIMESTAMP.tar.gz\" -C \"$SOURCE_DIR\" .\n\n# Keep only last 7 days\nfind \"$BACKUP_DIR\" -name \"backup_*.tar.gz\" -mtime +7 -delete\n\necho \"Backup completed: backup_$TIMESTAMP.tar.gz\"\n</code></pre></p>"},{"location":"practical-guides/fun-examples/#website-monitor","title":"Website Monitor","text":"<p>Monitor websites and send alerts:</p> <pre><code># monitor.py\nimport requests\nimport time\nimport smtplib\nfrom email.mime.text import MIMEText\n\nwebsites = [\n    'https://google.com',\n    'https://github.com',\n    'https://stackoverflow.com'\n]\n\ndef check_website(url):\n    try:\n        response = requests.get(url, timeout=10)\n        return response.status_code == 200\n    except:\n        return False\n\ndef send_alert(url):\n    print(f\"ALERT: {url} is down!\")\n    # Add email notification here\n\nwhile True:\n    for website in websites:\n        if not check_website(website):\n            send_alert(website)\n        else:\n            print(f\"{website} is up\")\n\n    time.sleep(300)  # Check every 5 minutes\n</code></pre>"},{"location":"practical-guides/fun-examples/#getting-started-tips","title":"Getting Started Tips","text":""},{"location":"practical-guides/fun-examples/#pick-your-first-project","title":"Pick Your First Project","text":"<p>For Beginners: Start with the Personal Portfolio Website - it's simple but gives you a real result you can show others.</p> <p>For Developers: Try the Full-Stack Development Environment - it demonstrates Docker's power for development workflows.</p> <p>For Fun: Set up the Minecraft Server - friends will be impressed, and you'll learn container networking.</p>"},{"location":"practical-guides/fun-examples/#project-ideas-to-expand","title":"Project Ideas to Expand","text":"<p>Once you complete a basic project, try these expansions:</p> <ul> <li>Add SSL certificates to web projects</li> <li>Implement user authentication</li> <li>Set up monitoring and logging</li> <li>Create automated deployment pipelines</li> <li>Scale services with Docker Compose</li> <li>Add database backups</li> <li>Implement health checks</li> </ul>"},{"location":"practical-guides/fun-examples/#sharing-your-projects","title":"Sharing Your Projects","text":"<ul> <li>Push your images to Docker Hub</li> <li>Share docker-compose files on GitHub</li> <li>Write blog posts about your learning experience</li> <li>Help others in Docker community forums</li> </ul> <p>These projects demonstrate Docker's versatility while building practical skills you can apply in real development and deployment scenarios. Each project teaches different Docker concepts through hands-on experience rather than abstract theory.</p>"},{"location":"practical-guides/troubleshooting/","title":"Troubleshooting","text":"<p>This is your go-to guide for solving any Docker problem! Instead of getting frustrated, you'll have systematic approaches to diagnose and fix issues quickly.</p>"},{"location":"practical-guides/troubleshooting/#the-docker-detective-method","title":"The Docker Detective Method","text":"<p>When something goes wrong, follow this systematic approach:</p>"},{"location":"practical-guides/troubleshooting/#1-gather-information","title":"1. \ud83d\udd0d Gather Information","text":"<pre><code># Check what's running\ndocker ps -a\n\n# See recent events\ndocker system events --since 5m\n\n# Check Docker daemon status\ndocker version\n</code></pre>"},{"location":"practical-guides/troubleshooting/#2-investigate-logs","title":"2. \ud83d\udd75\ufe0f Investigate Logs","text":"<pre><code># Container logs (most important!)\ndocker logs container_name\n\n# Follow logs in real-time\ndocker logs -f container_name\n\n# Get last 50 lines\ndocker logs --tail 50 container_name\n</code></pre>"},{"location":"practical-guides/troubleshooting/#3-health-check","title":"3. \ud83e\ude7a Health Check","text":"<pre><code># Check resource usage\ndocker stats container_name\n\n# Inspect configuration\ndocker inspect container_name\n\n# Check network connectivity\ndocker exec container_name ping google.com\n</code></pre>"},{"location":"practical-guides/troubleshooting/#common-problems-solutions","title":"Common Problems &amp; Solutions","text":""},{"location":"practical-guides/troubleshooting/#container-wont-start","title":"\ud83d\udea8 Container Won't Start","text":"<p>Symptoms: Container exits immediately or fails to start</p> <p>Investigation commands: <pre><code># Check container status\ndocker ps -a\n\n# Look at logs\ndocker logs container_name\n\n# Try running interactively\ndocker run -it image_name bash\n</code></pre></p> <p>Common causes and fixes:</p> <p>\u274c Missing environment variables: <pre><code># Error: database connection failed\n# Solution: Add required environment variables\ndocker run -e DB_HOST=localhost -e DB_PORT=5432 myapp\n</code></pre></p> <p>\u274c Port already in use: <pre><code># Error: port 8080 already allocated\n# Check what's using the port\nnetstat -tulpn | grep 8080\n# or\nlsof -i :8080\n\n# Solution: Use different port\ndocker run -p 8081:80 nginx\n</code></pre></p> <p>\u274c Wrong command or entrypoint: <pre><code># Check what command container is trying to run\ndocker inspect image_name --format='{{.Config.Cmd}}'\n\n# Override command to debug\ndocker run -it image_name bash\n</code></pre></p>"},{"location":"practical-guides/troubleshooting/#container-connectivity-issues","title":"\ud83d\udd17 Container Connectivity Issues","text":"<p>Symptoms: Services can't reach each other, API calls fail</p> <p>Investigation commands: <pre><code># Test connectivity between containers\ndocker exec container1 ping container2\n\n# Check if service is listening on correct port\ndocker exec container netstat -tulpn\n\n# Test from outside\ncurl http://localhost:8080/health\n</code></pre></p> <p>Common solutions:</p> <p>\u274c Containers on different networks: <pre><code># Check container networks\ndocker inspect container_name | grep NetworkMode\n\n# Put containers on same network\ndocker network create mynetwork\ndocker run --network mynetwork container1\ndocker run --network mynetwork container2\n</code></pre></p> <p>\u274c Service binding to localhost only: <pre><code># Bad: service only accepts local connections\nserver.listen(3000, 'localhost')  # Only accepts 127.0.0.1\n\n# Good: accept connections from any interface  \nserver.listen(3000, '0.0.0.0')    # Accepts external connections\n</code></pre></p> <p>\u274c Firewall or port mapping issues: <pre><code># Check port mapping\ndocker port container_name\n\n# Make sure container port is exposed\ndocker run -p 8080:3000 myapp  # host:container\n</code></pre></p>"},{"location":"practical-guides/troubleshooting/#data-not-persisting","title":"\ud83d\udcbe Data Not Persisting","text":"<p>Symptoms: Data disappears when container restarts</p> <p>Investigation commands: <pre><code># Check if volumes are mounted\ndocker inspect container_name | grep Mounts\n\n# List all volumes\ndocker volume ls\n\n# Check volume contents\ndocker run --rm -v volume_name:/data alpine ls -la /data\n</code></pre></p> <p>Common solutions:</p> <p>\u274c No volume mounted: <pre><code># Bad: data stored in container filesystem\ndocker run postgres\n\n# Good: data stored in volume\ndocker run -v postgres_data:/var/lib/postgresql/data postgres\n</code></pre></p> <p>\u274c Wrong mount path: <pre><code># Check application's data directory\n# PostgreSQL uses: /var/lib/postgresql/data\n# MySQL uses: /var/lib/mysql\n# MongoDB uses: /data/db\n\n# Mount volume to correct path\ndocker run -v mydata:/var/lib/postgresql/data postgres\n</code></pre></p>"},{"location":"practical-guides/troubleshooting/#image-build-failures","title":"\ud83c\udfd7\ufe0f Image Build Failures","text":"<p>Symptoms: <code>docker build</code> command fails</p> <p>Investigation commands: <pre><code># Build with verbose output\ndocker build --progress=plain --no-cache -t myapp .\n\n# Check build context size\ndocker build . 2&gt;&amp;1 | grep \"Sending build context\"\n\n# Verify Dockerfile syntax\ndocker build --dry-run -t myapp .\n</code></pre></p> <p>Common solutions:</p> <p>\u274c Missing files in build context: <pre><code># Error: COPY failed: file not found\n# Solution: Make sure file exists and isn't in .dockerignore\n\n# Check what's being sent to Docker\nls -la\n\n# Check .dockerignore\ncat .dockerignore\n</code></pre></p> <p>\u274c Wrong base image or version: <pre><code># Error: unable to resolve image name\n# Solution: Use correct image name and tag\n\n# Bad\nFROM nodejs:latest  # Wrong name\n\n# Good  \nFROM node:18-alpine  # Correct name\n</code></pre></p> <p>\u274c Dependency installation fails: <pre><code># Error during npm install or pip install\n# Solution: Clear cache and try again\n\n# For Node.js\nRUN npm ci --cache /tmp/empty-cache\n\n# For Python\nRUN pip install --no-cache-dir -r requirements.txt\n</code></pre></p>"},{"location":"practical-guides/troubleshooting/#performance-issues","title":"\ud83d\udc0c Performance Issues","text":"<p>Symptoms: Containers running slowly, high resource usage</p> <p>Investigation commands: <pre><code># Check resource usage\ndocker stats\n\n# See detailed container info\ndocker system df\n\n# Check host system resources\nhtop\ndf -h\n</code></pre></p> <p>Common solutions:</p> <p>\u274c No resource limits set: <pre><code># Set memory and CPU limits\ndocker run --memory=512m --cpus=\"1.0\" myapp\n\n# In Docker Compose\nservices:\n  app:\n    image: myapp\n    deploy:\n      resources:\n        limits:\n          memory: 512M\n          cpus: '1.0'\n</code></pre></p> <p>\u274c Large images: <pre><code># Check image sizes\ndocker images\n\n# Use smaller base images\nFROM python:3.9-slim  # Instead of python:3.9\nFROM node:18-alpine   # Instead of node:18\n</code></pre></p> <p>\u274c Too many layers: <pre><code># Combine RUN commands to reduce layers\nRUN apt-get update &amp;&amp; \\\n    apt-get install -y curl git &amp;&amp; \\\n    apt-get clean &amp;&amp; \\\n    rm -rf /var/lib/apt/lists/*\n</code></pre></p>"},{"location":"practical-guides/troubleshooting/#docker-compose-issues","title":"Docker Compose Issues","text":""},{"location":"practical-guides/troubleshooting/#service-dependencies","title":"Service Dependencies","text":"<p>Problem: Services start in wrong order</p> <p>Solution: Use <code>depends_on</code> and health checks <pre><code>services:\n  web:\n    image: nginx\n    depends_on:\n      db:\n        condition: service_healthy\n\n  db:\n    image: postgres\n    healthcheck:\n      test: [\"CMD-SHELL\", \"pg_isready -U postgres\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n</code></pre></p>"},{"location":"practical-guides/troubleshooting/#environment-variable-issues","title":"Environment Variable Issues","text":"<p>Problem: Variables not being passed correctly</p> <p>Investigation: <pre><code># Check if .env file exists\nls -la .env\n\n# Check what variables are set in container\ndocker-compose exec service_name env\n</code></pre></p> <p>Solutions: <pre><code># Method 1: Direct in compose file\nservices:\n  app:\n    environment:\n      - API_KEY=secret123\n      - DEBUG=true\n\n# Method 2: From .env file\nservices:\n  app:\n    env_file:\n      - .env\n\n# Method 3: Use environment substitution\nservices:\n  app:\n    environment:\n      - API_KEY=${API_KEY}\n</code></pre></p>"},{"location":"practical-guides/troubleshooting/#debug-tools-and-commands","title":"Debug Tools and Commands","text":""},{"location":"practical-guides/troubleshooting/#essential-debug-commands","title":"Essential Debug Commands","text":"<pre><code># Get shell inside running container\ndocker exec -it container_name bash\n\n# Run one-off command\ndocker exec container_name ls -la /app\n\n# Copy files from container\ndocker cp container_name:/app/logs.txt ./logs.txt\n\n# Copy files to container\ndocker cp ./config.json container_name:/app/config.json\n\n# Check container processes\ndocker exec container_name ps aux\n\n# Check container filesystem\ndocker exec container_name df -h\n</code></pre>"},{"location":"practical-guides/troubleshooting/#network-debugging","title":"Network Debugging","text":"<pre><code># List all networks\ndocker network ls\n\n# Inspect network configuration\ndocker network inspect network_name\n\n# Test DNS resolution\ndocker exec container_name nslookup service_name\n\n# Test connectivity with netcat\ndocker exec container_name nc -zv hostname port\n\n# Check listening ports\ndocker exec container_name netstat -tulpn\n</code></pre>"},{"location":"practical-guides/troubleshooting/#volume-debugging","title":"Volume Debugging","text":"<pre><code># Inspect volume details\ndocker volume inspect volume_name\n\n# Browse volume contents\ndocker run --rm -v volume_name:/data alpine ls -la /data\n\n# Backup volume\ndocker run --rm -v volume_name:/data -v $(pwd):/backup alpine \\\n  tar czf /backup/backup.tar.gz -C /data .\n\n# Restore volume\ndocker run --rm -v volume_name:/data -v $(pwd):/backup alpine \\\n  tar xzf /backup/backup.tar.gz -C /data\n</code></pre>"},{"location":"practical-guides/troubleshooting/#resource-monitoring","title":"Resource Monitoring","text":"<pre><code># Real-time resource usage\ndocker stats --format \"table {{.Container}}\\t{{.CPUPerc}}\\t{{.MemUsage}}\\t{{.NetIO}}\"\n\n# Container resource limits\ndocker inspect container_name | grep -A 10 \"Memory\\|Cpu\"\n\n# System-wide resource usage\ndocker system df\n\n# Cleanup unused resources\ndocker system prune\n</code></pre>"},{"location":"practical-guides/troubleshooting/#performance-optimization","title":"Performance Optimization","text":""},{"location":"practical-guides/troubleshooting/#image-optimization","title":"Image Optimization","text":"<pre><code># Analyze image layers\ndocker history image_name\n\n# Use multi-stage builds\nFROM node:18 AS builder\nWORKDIR /app\nCOPY package*.json ./\nRUN npm ci --only=production\n\nFROM node:18-alpine\nCOPY --from=builder /app/node_modules ./node_modules\nCOPY . .\nCMD [\"npm\", \"start\"]\n\n# Use .dockerignore\necho \"node_modules\n.git\n*.log\" &gt; .dockerignore\n</code></pre>"},{"location":"practical-guides/troubleshooting/#container-performance","title":"Container Performance","text":"<pre><code># Set appropriate resource limits\ndocker run --memory=512m --cpus=\"1.0\" --restart=unless-stopped myapp\n\n# Use health checks\nHEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \\\n  CMD curl -f http://localhost/ || exit 1\n\n# Monitor and adjust\ndocker stats myapp\n</code></pre>"},{"location":"practical-guides/troubleshooting/#security-troubleshooting","title":"Security Troubleshooting","text":""},{"location":"practical-guides/troubleshooting/#permission-issues","title":"Permission Issues","text":"<pre><code># Check file permissions\ndocker exec container_name ls -la /app\n\n# Run as specific user\ndocker run -u 1000:1000 myapp\n\n# Fix ownership in running container\ndocker exec -u root container_name chown -R 1000:1000 /app\n</code></pre>"},{"location":"practical-guides/troubleshooting/#security-scanning","title":"Security Scanning","text":"<pre><code># Scan image for vulnerabilities\ndocker scout cves image_name\n\n# Check running containers for security issues\ndocker scout recommendations image_name\n</code></pre>"},{"location":"practical-guides/troubleshooting/#emergency-recovery","title":"Emergency Recovery","text":""},{"location":"practical-guides/troubleshooting/#container-recovery","title":"Container Recovery","text":"<pre><code># Container won't start - get emergency shell\ndocker run --rm -it --entrypoint bash image_name\n\n# Recover data from stopped container\ndocker cp stopped_container:/data ./recovered_data\n\n# Start container with different command\ndocker run -it image_name bash\n</code></pre>"},{"location":"practical-guides/troubleshooting/#system-recovery","title":"System Recovery","text":"<pre><code># Free up disk space\ndocker system prune -a\n\n# Stop all containers\ndocker stop $(docker ps -q)\n\n# Remove all containers\ndocker rm $(docker ps -aq)\n\n# Clean everything (DANGEROUS!)\ndocker system prune -a --volumes\n</code></pre>"},{"location":"practical-guides/troubleshooting/#troubleshooting-checklist","title":"Troubleshooting Checklist","text":"<p>When facing any Docker issue:</p>"},{"location":"practical-guides/troubleshooting/#quick-checks","title":"\u2705 Quick Checks","text":"<ul> <li> Is Docker daemon running? (<code>docker version</code>)</li> <li> Check container status (<code>docker ps -a</code>)</li> <li> Look at logs (<code>docker logs container_name</code>)</li> <li> Check resource usage (<code>docker stats</code>)</li> </ul>"},{"location":"practical-guides/troubleshooting/#network-issues","title":"\u2705 Network Issues","text":"<ul> <li> Are containers on the same network?</li> <li> Is the service binding to 0.0.0.0 (not localhost)?</li> <li> Are ports properly mapped?</li> <li> Can containers ping each other?</li> </ul>"},{"location":"practical-guides/troubleshooting/#data-issues","title":"\u2705 Data Issues","text":"<ul> <li> Are volumes properly mounted?</li> <li> Is the mount path correct for the application?</li> <li> Do file permissions allow access?</li> <li> Is there enough disk space?</li> </ul>"},{"location":"practical-guides/troubleshooting/#performance-issues_1","title":"\u2705 Performance Issues","text":"<ul> <li> Are resource limits set appropriately?</li> <li> Is the base image optimized?</li> <li> Are there too many layers in the image?</li> <li> Is the host system healthy?</li> </ul>"},{"location":"practical-guides/troubleshooting/#key-takeaways","title":"Key Takeaways","text":"<ul> <li>Always check logs first - <code>docker logs</code> solves 80% of issues</li> <li>Use systematic debugging - Don't guess, investigate step by step</li> <li>Test connectivity - <code>docker exec</code> and <code>ping</code> are your friends</li> <li>Monitor resources - <code>docker stats</code> shows what's really happening</li> <li>Set proper limits - Prevent containers from consuming all resources</li> <li>Use health checks - Know when services are actually ready</li> <li>Keep images small - Faster builds, deploys, and debugging</li> </ul> <p>Remember: Every Docker expert started as a beginner who learned to debug systematically. These tools and techniques will make you unstoppable!</p> <p>Next: You've completed the Practical Guides! Ready for Advanced Topics \u2192?</p>"},{"location":"reference/","title":"Docker Reference","text":"<p>Quick access to essential Docker information, commands, and resources. This section serves as your go-to reference while working with Docker in development and production environments.</p>"},{"location":"reference/#whats-in-this-section","title":"What's In This Section","text":""},{"location":"reference/#command-cheatsheet","title":"Command Cheatsheet","text":"<p>Quick reference for essential Docker commands</p> <p>Complete list of commonly used Docker commands with practical examples and explanations. Organized by function for easy lookup during development.</p> <p>Covers: - Container management commands - Image operations - Volume and network commands - Docker Compose commands - Debugging and inspection tools</p>"},{"location":"reference/#glossary","title":"Glossary","text":"<p>Docker terminology explained</p> <p>Clear definitions of Docker terms and concepts. Perfect for beginners learning the vocabulary or experienced users who need quick clarification.</p> <p>Includes: - Core Docker concepts - Container orchestration terms - Security and networking terminology - Build and deployment vocabulary</p>"},{"location":"reference/#resources","title":"Resources","text":"<p>External tools and learning materials</p> <p>Curated collection of Docker tools, documentation, tutorials, and community resources to continue your learning journey.</p> <p>Features: - Official Docker documentation links - Recommended tools and utilities - Community resources and forums - Advanced learning materials</p>"},{"location":"reference/#how-to-use-this-reference","title":"How to Use This Reference","text":""},{"location":"reference/#during-development","title":"During Development","text":"<ul> <li>Bookmark the Command Cheatsheet for quick command lookup</li> <li>Reference the Glossary when encountering unfamiliar terms</li> <li>Check Resources for tools that can improve your workflow</li> </ul>"},{"location":"reference/#while-learning","title":"While Learning","text":"<ul> <li>Use the Glossary to build your Docker vocabulary</li> <li>Follow links in Resources for deeper learning</li> <li>Practice commands from the Cheatsheet in your own projects</li> </ul>"},{"location":"reference/#in-production","title":"In Production","text":"<ul> <li>Reference production-specific commands in the Cheatsheet</li> <li>Use Resources to find monitoring and deployment tools</li> <li>Share the Glossary with team members for consistent terminology</li> </ul>"},{"location":"reference/#quick-access","title":"Quick Access","text":"<ul> <li> <p>\ud83d\udccb Command Reference</p> <p>Essential Docker commands for daily use.</p> <p>View Commands</p> </li> <li> <p>\ud83d\udcda Docker Glossary</p> <p>Definitions of key Docker terms and concepts.</p> <p>Browse Glossary</p> </li> <li> <p>\ud83d\udd17 External Resources</p> <p>Tools, documentation, and learning materials.</p> <p>Explore Resources</p> </li> </ul> <p>This reference section complements the learning material in other sections by providing quick access to the information you need most often when working with Docker.</p>"},{"location":"reference/commands/","title":"Docker Command Cheatsheet","text":"<p>Quick reference for essential Docker commands organized by category. Bookmark this page for instant access to the commands you use most.</p>"},{"location":"reference/commands/#container-management","title":"Container Management","text":""},{"location":"reference/commands/#basic-container-operations","title":"Basic Container Operations","text":"<pre><code># Run a new container\ndocker run [OPTIONS] IMAGE [COMMAND]\ndocker run -it ubuntu bash                    # Interactive container\ndocker run -d nginx                          # Background (detached)\ndocker run -p 8080:80 nginx                  # Port mapping\ndocker run --name myapp nginx                # Named container\ndocker run --rm alpine echo \"hello\"          # Auto-remove after exit\n\n# List containers\ndocker ps                                     # Running containers only\ndocker ps -a                                 # All containers (including stopped)\ndocker ps -q                                 # Container IDs only\n\n# Container lifecycle\ndocker start CONTAINER                        # Start stopped container\ndocker stop CONTAINER                         # Stop running container\ndocker restart CONTAINER                     # Restart container\ndocker pause CONTAINER                       # Pause container processes\ndocker unpause CONTAINER                     # Unpause container\ndocker kill CONTAINER                        # Force stop container\n\n# Remove containers\ndocker rm CONTAINER                          # Remove stopped container\ndocker rm -f CONTAINER                       # Force remove (stop + remove)\ndocker container prune                       # Remove all stopped containers\n</code></pre>"},{"location":"reference/commands/#container-inspection-and-debugging","title":"Container Inspection and Debugging","text":"<pre><code># Get container information\ndocker inspect CONTAINER                     # Full container details (JSON)\ndocker logs CONTAINER                        # View container logs\ndocker logs -f CONTAINER                     # Follow logs in real-time\ndocker logs --tail 50 CONTAINER              # Last 50 log entries\ndocker stats CONTAINER                       # Real-time resource usage\ndocker top CONTAINER                         # Running processes in container\n\n# Execute commands in running container\ndocker exec -it CONTAINER bash               # Interactive shell\ndocker exec CONTAINER ls -la                 # Single command\ndocker exec -u 0 CONTAINER bash              # Run as root user\n\n# Copy files between container and host\ndocker cp file.txt CONTAINER:/path/          # Host to container\ndocker cp CONTAINER:/path/file.txt .         # Container to host\n\n# Container resource usage\ndocker stats                                 # All containers stats\ndocker stats --no-stream                     # One-time stats snapshot\n</code></pre>"},{"location":"reference/commands/#image-management","title":"Image Management","text":""},{"location":"reference/commands/#basic-image-operations","title":"Basic Image Operations","text":"<pre><code># List and search images\ndocker images                                # List local images\ndocker images -q                             # Image IDs only\ndocker search IMAGE_NAME                     # Search Docker Hub\n\n# Pull and push images\ndocker pull IMAGE                            # Download image\ndocker pull IMAGE:TAG                        # Specific version\ndocker push IMAGE                            # Upload to registry\ndocker push USERNAME/IMAGE:TAG               # Push with tag\n\n# Remove images\ndocker rmi IMAGE                             # Remove image\ndocker rmi -f IMAGE                          # Force remove\ndocker image prune                           # Remove unused images\ndocker image prune -a                        # Remove all unused images\n\n# Image inspection\ndocker inspect IMAGE                         # Image details\ndocker history IMAGE                         # Image layers\n</code></pre>"},{"location":"reference/commands/#building-images","title":"Building Images","text":"<pre><code># Build from Dockerfile\ndocker build .                              # Build from current directory\ndocker build -t NAME:TAG .                  # Build with name and tag\ndocker build -f Dockerfile.prod .           # Use specific Dockerfile\ndocker build --no-cache .                   # Build without cache\ndocker build --target stage-name .          # Multi-stage build target\n\n# Build with BuildKit (faster builds)\nDOCKER_BUILDKIT=1 docker build .\ndocker buildx build --platform linux/amd64,linux/arm64 .\n\n# Tag images\ndocker tag IMAGE NEW_NAME:TAG               # Create new tag\ndocker tag IMAGE:latest IMAGE:v1.0          # Tag with version\n</code></pre>"},{"location":"reference/commands/#volume-management","title":"Volume Management","text":"<pre><code># Create and list volumes\ndocker volume create VOLUME_NAME             # Create named volume\ndocker volume ls                             # List all volumes\ndocker volume inspect VOLUME                 # Volume details\n\n# Use volumes with containers\ndocker run -v VOLUME:/path/in/container IMAGE\ndocker run -v /host/path:/container/path IMAGE    # Bind mount\ndocker run --mount type=volume,source=vol,target=/data IMAGE\n\n# Remove volumes\ndocker volume rm VOLUME                      # Remove volume\ndocker volume prune                          # Remove unused volumes\n\n# Backup and restore volumes\ndocker run --rm -v VOLUME:/data -v $(pwd):/backup alpine \\\n  tar czf /backup/backup.tar.gz -C /data .   # Backup volume\n\ndocker run --rm -v VOLUME:/data -v $(pwd):/backup alpine \\\n  tar xzf /backup/backup.tar.gz -C /data     # Restore volume\n</code></pre>"},{"location":"reference/commands/#network-management","title":"Network Management","text":"<pre><code># List and create networks\ndocker network ls                            # List networks\ndocker network create NETWORK               # Create network\ndocker network create --driver bridge my-net # Specify driver\n\n# Connect containers to networks\ndocker run --network NETWORK IMAGE          # Run with network\ndocker network connect NETWORK CONTAINER    # Connect existing container\ndocker network disconnect NETWORK CONTAINER # Disconnect container\n\n# Network inspection\ndocker network inspect NETWORK              # Network details\ndocker port CONTAINER                       # Port mappings\n\n# Remove networks\ndocker network rm NETWORK                   # Remove network\ndocker network prune                        # Remove unused networks\n</code></pre>"},{"location":"reference/commands/#docker-compose-commands","title":"Docker Compose Commands","text":"<pre><code># Basic Compose operations\ndocker-compose up                           # Start services\ndocker-compose up -d                        # Start in background\ndocker-compose down                         # Stop and remove services\ndocker-compose restart                      # Restart all services\ndocker-compose stop                         # Stop services (keep containers)\n\n# Service management\ndocker-compose start SERVICE                # Start specific service\ndocker-compose stop SERVICE                 # Stop specific service\ndocker-compose restart SERVICE              # Restart specific service\ndocker-compose scale SERVICE=3              # Scale service to 3 instances\n\n# Logs and debugging\ndocker-compose logs                         # View all service logs\ndocker-compose logs -f SERVICE              # Follow specific service logs\ndocker-compose exec SERVICE bash            # Shell into service\ndocker-compose ps                           # List running services\n\n# Build and pull\ndocker-compose build                        # Build all services\ndocker-compose build SERVICE                # Build specific service\ndocker-compose pull                         # Pull all images\ndocker-compose up --build                   # Build and start\n\n# Configuration\ndocker-compose config                       # Validate and view config\ndocker-compose -f custom.yml up             # Use specific compose file\n</code></pre>"},{"location":"reference/commands/#system-management","title":"System Management","text":"<pre><code># System information\ndocker version                              # Docker version info\ndocker info                                 # System-wide information\ndocker system df                            # Disk usage\ndocker system events                        # Real-time system events\n\n# Cleanup commands\ndocker system prune                         # Remove unused data\ndocker system prune -a                      # Remove all unused data\ndocker system prune --volumes               # Include unused volumes\n\n# Resource monitoring\ndocker stats                                # Container resource usage\ndocker events                               # System events stream\n</code></pre>"},{"location":"reference/commands/#registry-and-authentication","title":"Registry and Authentication","text":"<pre><code># Login and logout\ndocker login                                # Login to Docker Hub\ndocker login registry.company.com           # Login to private registry\ndocker logout                               # Logout\n\n# Work with registries\ndocker tag IMAGE registry.com/USER/IMAGE    # Tag for registry\ndocker push registry.com/USER/IMAGE         # Push to registry\ndocker pull registry.com/USER/IMAGE         # Pull from registry\n</code></pre>"},{"location":"reference/commands/#advanced-operations","title":"Advanced Operations","text":""},{"location":"reference/commands/#multi-platform-builds","title":"Multi-platform Builds","text":"<pre><code># Setup buildx for multi-platform\ndocker buildx create --name multibuilder --use\ndocker buildx inspect --bootstrap\n\n# Build for multiple platforms\ndocker buildx build --platform linux/amd64,linux/arm64 -t IMAGE .\ndocker buildx build --platform linux/amd64,linux/arm64 --push -t IMAGE .\n</code></pre>"},{"location":"reference/commands/#swarm-mode-docker-swarm","title":"Swarm Mode (Docker Swarm)","text":"<pre><code># Initialize swarm\ndocker swarm init                           # Initialize swarm mode\ndocker swarm join --token TOKEN HOST:PORT   # Join existing swarm\n\n# Service management\ndocker service create --name SERVICE IMAGE  # Create service\ndocker service ls                           # List services\ndocker service ps SERVICE                   # Service tasks\ndocker service scale SERVICE=5              # Scale service\ndocker service rm SERVICE                   # Remove service\n\n# Stack deployment\ndocker stack deploy -c compose.yml STACK    # Deploy stack\ndocker stack ls                             # List stacks\ndocker stack rm STACK                       # Remove stack\n</code></pre>"},{"location":"reference/commands/#security-and-scanning","title":"Security and Scanning","text":"<pre><code># Image scanning\ndocker scout cves IMAGE                     # Scan for vulnerabilities\ndocker scout recommendations IMAGE          # Security recommendations\n\n# Run with security options\ndocker run --security-opt=no-new-privileges:true IMAGE\ndocker run --read-only --tmpfs /tmp IMAGE\ndocker run --cap-drop=ALL --cap-add=NET_BIND_SERVICE IMAGE\n</code></pre>"},{"location":"reference/commands/#troubleshooting-commands","title":"Troubleshooting Commands","text":"<pre><code># Debug failing containers\ndocker run --rm -it IMAGE /bin/bash         # Debug image interactively\ndocker logs --details CONTAINER             # Detailed logs\ndocker exec -it CONTAINER /bin/bash         # Debug running container\n\n# System diagnostics\ndocker system df -v                         # Detailed disk usage\ndocker info                                 # System information\ndocker version                              # Version details\n\n# Network debugging\ndocker network ls                           # List networks\ndocker port CONTAINER                       # Port mappings\ndocker exec CONTAINER netstat -tulpn        # Network connections\n\n# Performance monitoring\ndocker stats --no-stream                    # Resource usage snapshot\ndocker system events --since=\"1h\"           # Recent system events\n</code></pre>"},{"location":"reference/commands/#common-flag-combinations","title":"Common Flag Combinations","text":""},{"location":"reference/commands/#run-container-options","title":"Run Container Options","text":"<pre><code># Development container\ndocker run -it --rm -v $(pwd):/app -w /app node:18 bash\n\n# Production web server\ndocker run -d --name web --restart unless-stopped -p 80:80 nginx\n\n# Database with persistent data\ndocker run -d --name db -e POSTGRES_PASSWORD=pass -v db_data:/var/lib/postgresql/data postgres\n\n# Temporary debugging container\ndocker run --rm -it --network container:other_container alpine sh\n</code></pre>"},{"location":"reference/commands/#build-options","title":"Build Options","text":"<pre><code># Production build\ndocker build -t app:latest --target production --no-cache .\n\n# Development build with cache\ndocker build -t app:dev --target development .\n\n# Multi-platform build\ndocker buildx build --platform linux/amd64,linux/arm64 -t app:latest --push .\n</code></pre>"},{"location":"reference/commands/#quick-tips","title":"Quick Tips","text":"<p>Use image IDs for exact references: <pre><code>docker run $(docker images -q IMAGE)        # Use latest image ID\n</code></pre></p> <p>Combine commands for cleanup: <pre><code>docker stop $(docker ps -q) &amp;&amp; docker rm $(docker ps -aq)  # Stop and remove all\n</code></pre></p> <p>One-liner for complete cleanup: <pre><code>docker system prune -a --volumes -f         # Remove everything unused\n</code></pre></p> <p>Format output for scripts: <pre><code>docker ps --format \"table {{.Names}}\\t{{.Status}}\\t{{.Ports}}\"\n</code></pre></p> <p>This cheatsheet covers the most frequently used Docker commands. Keep it bookmarked for quick reference during development and troubleshooting.</p>"},{"location":"reference/glossary/","title":"Docker Glossary","text":"<p>Comprehensive definitions of Docker terms and concepts. Use this glossary to understand Docker terminology and build your containerization vocabulary.</p>"},{"location":"reference/glossary/#core-concepts","title":"Core Concepts","text":"Container A lightweight, standalone, executable package that includes everything needed to run an application: code, runtime, system tools, system libraries and settings. Containers are isolated from each other and the host system. Image A read-only template used to create containers. Images are built from a Dockerfile and can be stored in registries. Think of images as blueprints or recipes for containers. Dockerfile A text file containing instructions for building a Docker image. Each instruction creates a new layer in the image. Layer Each instruction in a Dockerfile creates a new layer. Layers are cached and reused across images to optimize storage and build times. Registry A service for storing and distributing Docker images. Docker Hub is the default public registry, but private registries are also common. Repository A collection of related Docker images, usually different versions of the same application. For example, <code>nginx</code> is a repository containing various nginx image versions. Tag A label applied to images in a repository to distinguish different versions. Common tags include <code>latest</code>, <code>v1.0</code>, <code>stable</code>."},{"location":"reference/glossary/#docker-architecture","title":"Docker Architecture","text":"Docker Engine The core Docker runtime that manages containers, images, builds, and more. Consists of a daemon, REST API, and CLI. Docker Daemon (dockerd) The background service that manages Docker objects like images, containers, networks, and volumes. Docker Client The command-line interface (CLI) that users interact with. Communicates with the Docker daemon via REST API. Docker Desktop A GUI application for Windows and Mac that includes Docker Engine, Docker CLI, Docker Compose, and Kubernetes. BuildKit Docker's improved build engine that provides better performance, caching, and advanced features for building images."},{"location":"reference/glossary/#container-operations","title":"Container Operations","text":"Detached Mode (-d) Running a container in the background, returning control to the terminal immediately. Interactive Mode (-it) Running a container with an interactive terminal session. The <code>-i</code> flag keeps STDIN open, <code>-t</code> allocates a pseudo-TTY. Port Mapping Connecting a port on the host system to a port inside a container, allowing external access to containerized services. Volume Mounting Attaching persistent storage to a container so data survives container restarts and removals. Environment Variables Configuration values passed to containers at runtime, typically used for application configuration. Health Check A test Docker runs to determine if a container is working correctly. Failed health checks can trigger container restarts."},{"location":"reference/glossary/#networking","title":"Networking","text":"Bridge Network The default network driver. Creates a private internal network on the host where containers can communicate. Host Network Container uses the host's networking directly. No network isolation between container and host. Overlay Network Multi-host network allowing containers across different Docker hosts to communicate securely. Network Namespace Linux kernel feature that provides network isolation between containers. Service Discovery Mechanism for containers to find and communicate with each other using names instead of IP addresses."},{"location":"reference/glossary/#storage","title":"Storage","text":"Volume A Docker-managed storage location that persists data beyond container lifecycle. Preferred method for persistent data. Bind Mount Mounting a host file or directory into a container. The file/directory doesn't need to exist on Docker host beforehand. tmpfs Mount Temporary filesystem stored in host memory. Data is lost when container stops. Storage Driver Manages how images and containers are stored and managed on Docker host. Examples: overlay2, aufs, devicemapper."},{"location":"reference/glossary/#building-and-images","title":"Building and Images","text":"Build Context The set of files and directories sent to Docker daemon during image build. Defined by the path argument to <code>docker build</code>. Multi-stage Build Dockerfile technique using multiple FROM statements to create optimized production images by separating build and runtime environments. Base Image The starting point for building new images, specified in the FROM instruction of a Dockerfile. Scratch Image An empty base image used for building minimal images, especially for static binaries. Distroless Image Minimal base images containing only application dependencies, without package managers or shells. .dockerignore File specifying which files and directories to exclude from the build context. Layer Caching Docker's optimization that reuses unchanged layers across builds to speed up the build process."},{"location":"reference/glossary/#orchestration","title":"Orchestration","text":"Docker Compose Tool for defining and running multi-container Docker applications using YAML configuration files. Docker Swarm Docker's native clustering and orchestration solution for managing multiple Docker hosts. Service In Docker Swarm, a service defines how containers should run across the cluster, including replicas, networks, and updates. Stack A collection of services that make up an application, deployed and managed as a single unit. Node A Docker host participating in a Docker Swarm cluster. Can be a manager or worker node."},{"location":"reference/glossary/#security","title":"Security","text":"Namespace Linux kernel feature providing process isolation. Docker uses namespaces to isolate containers from each other and the host. Control Groups (cgroups) Linux kernel feature for limiting and monitoring resource usage of processes. Docker uses cgroups to control container resources. Security Context Security-related settings applied to containers, including user ID, capabilities, and security profiles. Capabilities Fine-grained privileges in Linux. Docker drops many capabilities by default to improve container security. AppArmor/SELinux Mandatory Access Control systems that provide additional security layers for containers. Secrets Management Secure storage and distribution of sensitive data like passwords, certificates, and API keys."},{"location":"reference/glossary/#development-and-operations","title":"Development and Operations","text":"DevOps Development and Operations practices that Docker facilitates through consistent environments and deployment automation. CI/CD (Continuous Integration/Continuous Deployment) Automated software development practices often implemented using containerized build and deployment pipelines. Infrastructure as Code (IaC) Managing infrastructure through code and configuration files, often using containers for consistent deployments. Microservices Architectural pattern where applications are built as a collection of small, independent services, often containerized. Blue-Green Deployment Deployment strategy using two identical production environments (blue and green) to enable zero-downtime deployments. Rolling Update Deployment strategy that gradually replaces old container versions with new ones to minimize downtime."},{"location":"reference/glossary/#container-runtimes","title":"Container Runtimes","text":"containerd Industry-standard container runtime used by Docker and Kubernetes for low-level container operations. runc Low-level container runtime that implements the Open Container Initiative (OCI) specification. CRI-O Lightweight container runtime designed specifically for Kubernetes, implementing the Container Runtime Interface. OCI (Open Container Initiative) Industry standards for container formats and runtimes to ensure compatibility across different platforms."},{"location":"reference/glossary/#monitoring-and-logging","title":"Monitoring and Logging","text":"Container Logs Output from applications running inside containers, accessible via <code>docker logs</code> command. Log Driver Plugin that determines where container logs are sent (stdout, syslog, journald, etc.). Metrics Quantitative measurements of container and application performance (CPU, memory, network usage). Observability The practice of monitoring, logging, and tracing containerized applications to understand their behavior and performance. Telemetry Automated collection and transmission of data from containers for monitoring and analysis."},{"location":"reference/glossary/#registry-and-distribution","title":"Registry and Distribution","text":"Docker Hub Docker's public registry service for sharing container images. Contains official images and community contributions. Private Registry Self-hosted or third-party registry for storing proprietary or internal container images. Image Manifest JSON document describing image layers, configuration, and metadata. Content Trust Docker's system for signing and verifying image integrity and publisher authenticity. Registry Mirror Local copy of registry content to reduce bandwidth and improve pull performance."},{"location":"reference/glossary/#performance-and-optimization","title":"Performance and Optimization","text":"Resource Limits Constraints on CPU, memory, and other resources that containers can consume. cgroups (Control Groups) Linux kernel feature used by Docker to limit and monitor container resource usage. Copy-on-Write (CoW) Storage optimization technique where containers share image layers until changes are made. Image Compression Techniques to reduce image size for faster distribution and storage efficiency. Build Cache Docker's mechanism for reusing previously built layers to speed up subsequent builds."},{"location":"reference/glossary/#common-abbreviations","title":"Common Abbreviations","text":"CLI Command Line Interface - the docker command and its subcommands API Application Programming Interface - Docker's REST API for programmatic access JSON JavaScript Object Notation - format used for Docker configuration and metadata YAML YAML Ain't Markup Language - format commonly used for Docker Compose files TTY Teletypewriter - terminal interface, used with <code>-t</code> flag for interactive containers STDIN/STDOUT/STDERR Standard input, output, and error streams for container processes PID Process ID - unique identifier for running processes UID/GID User ID and Group ID - numeric identifiers for users and groups in Linux FQDN Fully Qualified Domain Name - complete domain name specifying exact location in DNS hierarchy <p>This glossary provides essential Docker terminology for beginners through advanced users. Bookmark this page and refer to it when encountering unfamiliar terms in Docker documentation or discussions.</p>"},{"location":"reference/resources/","title":"Docker Resources","text":"<p>Curated collection of tools, documentation, tutorials, and community resources to expand your Docker knowledge and improve your containerization workflow.</p>"},{"location":"reference/resources/#official-documentation","title":"Official Documentation","text":""},{"location":"reference/resources/#docker-documentation","title":"Docker Documentation","text":"<p>docs.docker.com The authoritative source for Docker documentation, including guides, references, and tutorials.</p> <p>Key sections: - Get Started guide for beginners - Engine documentation for core Docker functionality - Compose documentation for multi-container applications - Build documentation for image creation</p>"},{"location":"reference/resources/#docker-hub","title":"Docker Hub","text":"<p>hub.docker.com Official registry for Docker images with millions of pre-built containers.</p> <p>Features: - Official images from software vendors - Community-contributed images - Automated builds from GitHub repositories - Vulnerability scanning for images</p>"},{"location":"reference/resources/#docker-blog","title":"Docker Blog","text":"<p>docker.com/blog Latest news, features, and best practices from the Docker team.</p>"},{"location":"reference/resources/#essential-tools","title":"Essential Tools","text":""},{"location":"reference/resources/#development-tools","title":"Development Tools","text":"<p>Visual Studio Code Docker Extension marketplace.visualstudio.com Comprehensive Docker support for VS Code with syntax highlighting, IntelliSense, and debugging.</p> <p>Docker Desktop docker.com/products/docker-desktop GUI application for Windows and Mac with container management, Kubernetes support, and development tools.</p> <p>Portainer portainer.io Web-based Docker management interface for container, image, and network management.</p>"},{"location":"reference/resources/#build-and-cicd-tools","title":"Build and CI/CD Tools","text":"<p>Docker BuildKit docs.docker.com/buildkit Advanced build engine with improved performance, caching, and multi-platform builds.</p> <p>GitHub Actions for Docker github.com/marketplace/actions/build-and-push-docker-images Official GitHub Action for building and pushing Docker images in CI/CD pipelines.</p> <p>Kaniko github.com/GoogleContainerTools/kaniko Tool for building container images inside containers without requiring Docker daemon.</p>"},{"location":"reference/resources/#security-tools","title":"Security Tools","text":"<p>Docker Scout docs.docker.com/scout Docker's integrated security scanning tool for vulnerability detection and recommendations.</p> <p>Trivy github.com/aquasecurity/trivy Comprehensive security scanner for containers, filesystems, and Git repositories.</p> <p>Snyk Container snyk.io/product/container-vulnerability-management Developer-friendly container security scanning with actionable remediation advice.</p> <p>Clair github.com/quay/clair Open-source vulnerability scanner for container images.</p>"},{"location":"reference/resources/#monitoring-and-observability","title":"Monitoring and Observability","text":""},{"location":"reference/resources/#container-monitoring","title":"Container Monitoring","text":"<p>cAdvisor github.com/google/cadvisor Container resource usage and performance monitoring from Google.</p> <p>Prometheus + Grafana prometheus.io | grafana.com Popular combination for metrics collection and visualization in containerized environments.</p> <p>Datadog docs.datadoghq.com/containers/docker Comprehensive monitoring platform with excellent Docker integration.</p> <p>New Relic docs.newrelic.com/docs/infrastructure/host-integrations/host-integrations-list/docker-monitoring-integration Application performance monitoring with Docker container insights.</p>"},{"location":"reference/resources/#logging-solutions","title":"Logging Solutions","text":"<p>Fluentd fluentd.org Unified logging layer for collecting and aggregating container logs.</p> <p>ELK Stack (Elasticsearch, Logstash, Kibana) elastic.co Popular log management and analysis platform for containerized applications.</p> <p>Loki + Grafana grafana.com/oss/loki Lightweight log aggregation system designed for cloud-native environments.</p>"},{"location":"reference/resources/#container-orchestration","title":"Container Orchestration","text":""},{"location":"reference/resources/#kubernetes-resources","title":"Kubernetes Resources","text":"<p>Kubernetes Documentation kubernetes.io/docs Official Kubernetes documentation for container orchestration at scale.</p> <p>Minikube minikube.sigs.k8s.io Local Kubernetes development environment for learning and testing.</p> <p>kubectl Cheat Sheet kubernetes.io/docs/reference/kubectl/cheatsheet Essential kubectl commands for managing Kubernetes clusters.</p>"},{"location":"reference/resources/#docker-swarm","title":"Docker Swarm","text":"<p>Docker Swarm Documentation docs.docker.com/engine/swarm Official documentation for Docker's native clustering solution.</p> <p>Docker Swarm Visualizer github.com/dockersamples/docker-swarm-visualizer Web interface for visualizing Docker Swarm clusters.</p>"},{"location":"reference/resources/#learning-resources","title":"Learning Resources","text":""},{"location":"reference/resources/#interactive-tutorials","title":"Interactive Tutorials","text":"<p>Play with Docker labs.play-with-docker.com Free browser-based Docker playground for hands-on learning without local installation.</p> <p>Katacoda Docker Scenarios katacoda.com/courses/docker Interactive Docker tutorials covering beginner to advanced topics.</p> <p>Docker Classroom training.docker.com Official Docker training courses and certification programs.</p>"},{"location":"reference/resources/#video-courses-and-tutorials","title":"Video Courses and Tutorials","text":"<p>Docker Mastery Course (Udemy) Comprehensive Docker course covering development through production deployment.</p> <p>Pluralsight Docker Path pluralsight.com Structured learning path for Docker skills development.</p> <p>YouTube - TechWorld with Nana youtube.com/@TechWorldwithNana High-quality DevOps tutorials including comprehensive Docker content.</p>"},{"location":"reference/resources/#books","title":"Books","text":"<p>\"Docker: Up &amp; Running\" by Karl Matthias Practical guide to Docker for developers and system administrators.</p> <p>\"Docker in Practice\" by Ian Miell Real-world Docker techniques and patterns for production environments.</p> <p>\"Kubernetes: Up and Running\" by Kelsey Hightower Essential guide to container orchestration with Kubernetes.</p>"},{"location":"reference/resources/#community-and-support","title":"Community and Support","text":""},{"location":"reference/resources/#forums-and-communities","title":"Forums and Communities","text":"<p>Docker Community Forums forums.docker.com Official Docker community forum for questions, discussions, and announcements.</p> <p>Stack Overflow stackoverflow.com/questions/tagged/docker Large community of developers answering Docker-related questions.</p> <p>Reddit - r/docker reddit.com/r/docker Active community for Docker news, questions, and discussions.</p> <p>Docker Slack Community dockercommunity.slack.com Real-time chat community for Docker users and contributors.</p>"},{"location":"reference/resources/#social-media-and-news","title":"Social Media and News","text":"<p>Docker on Twitter @Docker Official Docker Twitter account for news and updates.</p> <p>Docker Weekly Newsletter docker.com/newsletter-subscription Weekly roundup of Docker news, tutorials, and community content.</p> <p>Container Journal containerjournal.com News and analysis focused on container technologies and practices.</p>"},{"location":"reference/resources/#development-utilities","title":"Development Utilities","text":""},{"location":"reference/resources/#image-optimization","title":"Image Optimization","text":"<p>Dive github.com/wagoodman/dive Tool for exploring Docker image layers and optimizing image size.</p> <p>DockerSlim github.com/docker-slim/docker-slim Automatically optimize and secure Docker images by removing unnecessary components.</p> <p>Container Structure Tests github.com/GoogleContainerTools/container-structure-test Framework for validating container image structure and contents.</p>"},{"location":"reference/resources/#registry-tools","title":"Registry Tools","text":"<p>Harbor goharbor.io Open-source container registry with security scanning and image signing.</p> <p>Quay quay.io Container registry with security scanning and automated builds.</p> <p>Amazon ECR aws.amazon.com/ecr Fully managed Docker container registry from AWS.</p>"},{"location":"reference/resources/#testing-tools","title":"Testing Tools","text":"<p>Container Structure Test github.com/GoogleContainerTools/container-structure-test Unit testing framework for Docker images.</p> <p>Goss github.com/aelsabbahy/goss Quick and easy server testing/validation tool for containers.</p> <p>InSpec inspec.io Compliance and security testing framework with Docker support.</p>"},{"location":"reference/resources/#specialized-tools","title":"Specialized Tools","text":""},{"location":"reference/resources/#multi-platform-development","title":"Multi-platform Development","text":"<p>Docker Buildx docs.docker.com/buildx Extended build capabilities including multi-platform image creation.</p> <p>QEMU qemu.org Emulation platform used by Docker for multi-architecture builds.</p>"},{"location":"reference/resources/#networking","title":"Networking","text":"<p>Weave Net weave.works/oss/net Container networking solution for connecting containers across hosts.</p> <p>Flannel github.com/flannel-io/flannel Simple overlay network for containers, commonly used with Kubernetes.</p>"},{"location":"reference/resources/#service-mesh","title":"Service Mesh","text":"<p>Istio istio.io Service mesh platform providing security, observability, and traffic management.</p> <p>Linkerd linkerd.io Lightweight service mesh for Kubernetes with minimal complexity.</p>"},{"location":"reference/resources/#best-practices-resources","title":"Best Practices Resources","text":""},{"location":"reference/resources/#security-best-practices","title":"Security Best Practices","text":"<p>CIS Docker Benchmark cisecurity.org Comprehensive security configuration recommendations for Docker.</p> <p>NIST Container Security Guide nist.gov Government standards for container security implementation.</p> <p>Docker Security Best Practices docs.docker.com/engine/security Official security recommendations from Docker.</p>"},{"location":"reference/resources/#performance-optimization","title":"Performance Optimization","text":"<p>Docker Performance Tuning Guide docs.docker.com/config/containers/resource_constraints Official guidance on container resource management and optimization.</p> <p>Container Performance Analysis brendangregg.com Advanced performance analysis techniques for containerized applications.</p>"},{"location":"reference/resources/#getting-help","title":"Getting Help","text":""},{"location":"reference/resources/#when-youre-stuck","title":"When You're Stuck","text":"<ol> <li>Check the official documentation - Most answers are in Docker docs</li> <li>Search Stack Overflow - Large database of solved problems  </li> <li>Join Docker Community forums - Get help from experienced users</li> <li>Review GitHub issues - For tool-specific problems and bugs</li> <li>Follow Docker's blog - Stay updated on best practices and new features</li> </ol>"},{"location":"reference/resources/#contributing-back","title":"Contributing Back","text":"<p>Docker Open Source github.com/docker Contribute to Docker's open-source projects and tools.</p> <p>Docker Community Extensions github.com/docker/extensions-sdk Build extensions for Docker Desktop to share with the community.</p> <p>Documentation Contributions github.com/docker/docker.github.io Help improve Docker documentation for everyone.</p> <p>This resource collection provides pathways for continued learning and professional development with Docker. Whether you're debugging issues, optimizing performance, or expanding into orchestration, these tools and communities will support your container journey.</p>"},{"location":"working-with-docker/","title":"Working with Docker \ud83d\udd27","text":"<p>Now that you understand the core concepts, it's time to level up! This section covers the essential tools that transform Docker from a simple container runner into a powerful application platform.</p>"},{"location":"working-with-docker/#what-youll-master-here","title":"What You'll Master Here","text":"<p>By the end of this section, you'll:</p> <ul> <li>\u2705 Orchestrate multi-container applications with Docker Compose</li> <li>\u2705 Persist and share data using volumes and bind mounts</li> <li>\u2705 Connect containers securely with custom networks</li> <li>\u2705 Build real-world applications that scale and persist data</li> <li>\u2705 Manage complex environments with confidence</li> <li>\u2705 Debug connectivity issues between services</li> </ul> <p>Time Investment</p> <p>Total time: 2.5-3 hours for complete mastery</p> <p>Want quick wins? Start with Compose (1 hour) and come back for volumes and networks later!</p>"},{"location":"working-with-docker/#your-learning-journey","title":"Your Learning Journey","text":"<p>These tools work together to solve real application challenges. Follow in order for the best experience:</p>"},{"location":"working-with-docker/#1-docker-compose","title":"1. \ud83c\udfbc Docker Compose","text":"<p>What: Define and manage multi-container applications with a single YAML file</p> <p>Why: Real applications aren't single containers - they need databases, web servers, APIs, and caches working together seamlessly</p> <p>Time: 60 minutes</p> <p>Real-world power: Replace 10+ docker run commands with one simple <code>docker-compose up</code></p> <p>You'll learn: - Write compose files that describe entire application stacks - Start complex environments with one command - Scale services up and down instantly - Manage development vs production configurations - Handle service dependencies and startup order</p> <p>Game-changer moment: When you spin up a complete WordPress site with database in 30 seconds!</p> <p>Before vs After Compose</p> <p>Before: <code>docker run database &amp;&amp; docker run redis &amp;&amp; docker run web...</code> (error-prone)</p> <p>After: <code>docker-compose up</code> (bulletproof)</p>"},{"location":"working-with-docker/#2-volumes-storage","title":"2. \ud83d\udcbe Volumes &amp; Storage","text":"<p>What: Persist data beyond container lifetimes and share files between containers</p> <p>Why: Containers are ephemeral by design, but your data needs to survive container restarts, updates, and crashes</p> <p>Time: 45 minutes</p> <p>Critical insight: Without volumes, all your data disappears when containers are removed!</p> <p>You'll learn: - Create persistent storage for databases and user files - Share code between your computer and containers for development - Backup and restore container data safely - Choose between bind mounts, named volumes, and tmpfs - Share data between multiple containers</p> <p>\"Aha!\" moment: When you realize you can edit code on your computer and see changes instantly in the container!</p>"},{"location":"working-with-docker/#3-networks","title":"3. \ud83c\udf10 Networks","text":"<p>What: Control how containers communicate with each other and the outside world</p> <p>Why: Security, isolation, and organized communication between services</p> <p>Time: 45 minutes</p> <p>Security benefit: Isolate sensitive services (databases) from public access while allowing internal communication</p> <p>You'll learn: - Create custom networks for different application tiers - Isolate groups of containers for security - Control which containers can talk to each other - Debug network connectivity issues - Understand Docker's networking models</p> <p>Professional insight: When you can architect secure, multi-tier applications with proper network isolation!</p>"},{"location":"working-with-docker/#why-this-order-matters","title":"Why This Order Matters","text":""},{"location":"working-with-docker/#the-logical-progression","title":"\ud83c\udfaf The Logical Progression:","text":"<ol> <li>Compose First \u2192 See the big picture of multi-container apps</li> <li>Volumes Second \u2192 Add data persistence to your applications</li> <li>Networks Last \u2192 Fine-tune communication and security</li> </ol>"},{"location":"working-with-docker/#the-mental-model","title":"\ud83e\udde0 The Mental Model:","text":"<p>Think of building a house: - Compose = The blueprint that shows how all rooms connect - Volumes = The foundation and storage that persists - Networks = The electrical and plumbing that connects everything</p>"},{"location":"working-with-docker/#the-practical-benefit","title":"\u26a1 The Practical Benefit:","text":"<p>By following this order, when you reach Networks, you'll already understand: - How multiple containers work together (Compose) - Why data needs to persist (Volumes) - Common connectivity challenges you need to solve</p>"},{"location":"working-with-docker/#real-world-applications","title":"Real-World Applications","text":"<p>After completing this section, you'll be able to build:</p>"},{"location":"working-with-docker/#e-commerce-platform","title":"\ud83c\udfea E-commerce Platform","text":"<ul> <li>Web frontend (React/Vue)</li> <li>API backend (Node.js/Python)</li> <li>Database (PostgreSQL)</li> <li>Cache layer (Redis)</li> <li>All connected securely with persistent data</li> </ul>"},{"location":"working-with-docker/#analytics-dashboard","title":"\ud83d\udcca Analytics Dashboard","text":"<ul> <li>Data processing containers</li> <li>Time-series database</li> <li>Visualization frontend</li> <li>Shared data volumes</li> <li>Isolated networks for security</li> </ul>"},{"location":"working-with-docker/#development-environment","title":"\ud83d\ude80 Development Environment","text":"<ul> <li>Instant project setup for new team members</li> <li>Consistent environments across teams</li> <li>Hot-reload for rapid development</li> <li>Database with test data included</li> </ul>"},{"location":"working-with-docker/#different-learning-approaches","title":"Different Learning Approaches","text":"<p>Choose what works best for your goals:</p> Full Stack DeveloperDevOps FocusedQuick Learner <p>Perfect for you if: Building web applications with databases and APIs</p> <p>Focus Areas: - Docker Compose for development environments - Volume mounting for live code reloading - Network isolation for security</p> <p>Time: 3 hours (thorough understanding)</p> <p>Outcome: Set up any web app stack in minutes</p> <p>Perfect for you if: Managing infrastructure and deployments</p> <p>Focus Areas: - Production-ready Compose configurations - Named volumes for data persistence - Custom networks for security isolation</p> <p>Time: 2.5 hours (ops-focused learning)</p> <p>Outcome: Deploy and manage complex applications</p> <p>Perfect for you if: Want immediate productivity gains</p> <p>Approach: - Start with Compose examples - Skip theory, focus on practical commands - Come back for volumes/networks when needed</p> <p>Time: 1.5 hours (practical knowledge)</p> <p>Outcome: Use Docker for real projects immediately</p>"},{"location":"working-with-docker/#prerequisites-check","title":"Prerequisites Check","text":"<p>Before diving in, make sure you have:</p>"},{"location":"working-with-docker/#technical-requirements","title":"\u2705 Technical Requirements:","text":"<ul> <li>Core Concepts completed</li> <li>Comfortable with <code>docker run</code>, <code>docker build</code>, and basic commands</li> <li>Understanding of images, containers, and Dockerfiles</li> </ul>"},{"location":"working-with-docker/#conceptual-understanding","title":"\ud83e\udde0 Conceptual Understanding:","text":"<ul> <li>Containers are isolated processes</li> <li>Images are templates for containers</li> <li>Docker can run multiple containers simultaneously</li> </ul>"},{"location":"working-with-docker/#helpful-context","title":"\ud83d\udca1 Helpful Context:","text":"<ul> <li>Basic understanding of web applications (frontend/backend/database)</li> <li>Familiarity with YAML syntax (similar to JSON but with indentation)</li> <li>Comfort with command-line file operations</li> </ul>"},{"location":"working-with-docker/#common-breakthrough-moments","title":"Common Breakthrough Moments","text":"<p>Get ready for these game-changing realizations:</p>"},{"location":"working-with-docker/#i-can-replace-my-entire-dev-setup-with-one-command","title":"\ud83d\ude80 \"I can replace my entire dev setup with one command!\"","text":"<p>Usually happens early in the Compose section</p> <p>When you realize <code>docker-compose up</code> can start your database, API, frontend, and cache instantly - no more \"works on my machine\" problems.</p>"},{"location":"working-with-docker/#my-data-survives-container-updates","title":"\ud83d\udcbe \"My data survives container updates!\"","text":"<p>Usually happens in the Volumes section</p> <p>The relief when you understand your database won't lose data when you restart containers.</p>"},{"location":"working-with-docker/#i-can-control-exactly-which-services-talk-to-each-other","title":"\ud83d\udd12 \"I can control exactly which services talk to each other!\"","text":"<p>Usually happens in the Networks section</p> <p>When network isolation clicks and you can architect truly secure applications.</p>"},{"location":"working-with-docker/#docker-just-became-my-development-superpower","title":"\u26a1 \"Docker just became my development superpower!\"","text":"<p>Usually happens by the end</p> <p>Everything comes together and Docker transforms from \"nice to have\" to \"can't live without.\"</p>"},{"location":"working-with-docker/#what-if-things-go-wrong","title":"What If Things Go Wrong?","text":"<p>Don't panic - these are learning opportunities!</p>"},{"location":"working-with-docker/#my-containers-cant-connect-to-each-other","title":"\ud83e\udd14 \"My containers can't connect to each other\"","text":"<ul> <li>Super common! Check service names in your compose file</li> <li>Services connect using service names, not container names</li> <li>Make sure both services are on the same network</li> </ul>"},{"location":"working-with-docker/#i-lost-my-database-data","title":"\ud83d\udcbd \"I lost my database data!\"","text":"<ul> <li>This teaches the importance of volumes!</li> <li>Always use named volumes or bind mounts for persistent data</li> <li>Test your backup and restore procedures</li> </ul>"},{"location":"working-with-docker/#port-conflicts-everywhere","title":"\ud83d\udd0c \"Port conflicts everywhere!\"","text":"<ul> <li>Easy fix! Change host ports in your compose file</li> <li>Use <code>docker-compose ps</code> to see what ports are in use</li> <li>Remember: you can map any host port to any container port</li> </ul>"},{"location":"working-with-docker/#file-permissions-are-weird-in-containers","title":"\ud83d\udcc1 \"File permissions are weird in containers\"","text":"<ul> <li>Linux vs Windows/Mac differences</li> <li>Learn about user mapping and file ownership</li> <li>This is normal - we'll cover solutions</li> </ul>"},{"location":"working-with-docker/#success-milestones","title":"Success Milestones","text":"<p>Celebrate these wins as you progress:</p>"},{"location":"working-with-docker/#after-compose","title":"\ud83c\udfaf After Compose:","text":"<ul> <li> You can start a multi-service application with one command</li> <li> You understand how services communicate by name</li> <li> You can scale services up and down</li> <li> You can manage different environments (dev/prod)</li> </ul>"},{"location":"working-with-docker/#after-volumes","title":"\ud83c\udfaf After Volumes:","text":"<ul> <li> Your data persists when containers restart</li> <li> You can edit code and see changes instantly in containers</li> <li> You can backup and restore container data</li> <li> You understand the different types of mounts</li> </ul>"},{"location":"working-with-docker/#after-networks","title":"\ud83c\udfaf After Networks:","text":"<ul> <li> You can isolate services for security</li> <li> You can debug connectivity issues between containers</li> <li> You can design secure multi-tier applications</li> <li> You understand Docker's networking models</li> </ul>"},{"location":"working-with-docker/#real-student-success-stories","title":"Real Student Success Stories","text":"<p>\"I went from taking 30 minutes to set up my dev environment to 30 seconds. Docker Compose changed everything!\" \u2014 Sarah, Full Stack Developer</p> <p>\"Finally understood why my database kept losing data. Volumes saved my project!\" \u2014 Mike, Backend Developer  </p> <p>\"Networks clicked when I realized I could hide my database from the internet but still let my API connect to it.\" \u2014 Jessica, DevOps Engineer</p> <p>\"Built my first multi-service application today. Felt like magic seeing it all work together!\" \u2014 David, Computer Science Student</p>"},{"location":"working-with-docker/#ready-to-build-real-applications","title":"Ready to Build Real Applications?","text":"<p>You're about to learn the tools that make Docker indispensable for modern development. These aren't just technical skills - they're productivity multipliers that will change how you build and deploy applications.</p> <ul> <li> <p>\ud83c\udfbc Start with Compose</p> <p>Learn to orchestrate multi-container applications effortlessly.</p> <p>Master Docker Compose \u2192</p> </li> <li> <p>\ud83d\udcbe Understand Storage</p> <p>Know Compose already? Learn data persistence next.</p> <p>Master Volumes \u2192</p> </li> <li> <p>\ud83c\udf10 Control Networking</p> <p>Ready for advanced connectivity and security?</p> <p>Master Networks \u2192</p> </li> <li> <p>\ud83d\udd04 Need a Refresher?</p> <p>Review core concepts before diving deeper.</p> <p>Review Core Concepts \u2192</p> </li> </ul> <p>You're about to unlock Docker's true power!</p> <p>This section transforms Docker from a simple container tool into a complete application platform. You'll go from running single containers to orchestrating entire application ecosystems. The skills you learn here are what separate Docker beginners from Docker professionals!</p> <p>Let's build something amazing together! \ud83d\udc33</p>"},{"location":"working-with-docker/compose/","title":"Docker Compose","text":"<p>Docker Compose lets you define and run multi-container applications using a YAML file. Instead of running multiple <code>docker run</code> commands, describe your entire application stack in one file.</p>"},{"location":"working-with-docker/compose/#why-use-docker-compose","title":"Why Use Docker Compose?","text":"<p>Without Compose - Multiple commands: <pre><code>docker run -d --name db postgres\ndocker run -d --name web --link db -p 8000:8000 myapp\n</code></pre></p> <p>With Compose - One command: <pre><code>services:\n  web:\n    image: myapp\n    ports:\n      - \"8000:8000\"\n  db:\n    image: postgres\n</code></pre></p> <p>Then run: <code>docker-compose up</code></p>"},{"location":"working-with-docker/compose/#your-first-compose-file","title":"Your First Compose File","text":"<p>Create <code>docker-compose.yml</code>: <pre><code>version: '3.8'\n\nservices:\n  web:\n    image: nginx\n    ports:\n      - \"8080:80\"\n\n  db:\n    image: postgres:13\n    environment:\n      POSTGRES_PASSWORD: mypassword\n</code></pre></p> <p>Start everything: <pre><code>docker-compose up -d\n</code></pre></p> <p>The <code>-d</code> flag runs containers in the background (detached mode).</p>"},{"location":"working-with-docker/compose/#essential-commands","title":"Essential Commands","text":""},{"location":"working-with-docker/compose/#starting-and-stopping","title":"Starting and Stopping","text":"<pre><code># Start all services\ndocker-compose up\n\n# Start in background \ndocker-compose up -d\n\n# Stop all services\ndocker-compose down\n</code></pre> <p>What happens: - <code>up</code> creates and starts containers - <code>down</code> stops and removes containers - Networks and volumes remain unless you use <code>down -v</code></p>"},{"location":"working-with-docker/compose/#viewing-information","title":"Viewing Information","text":"<pre><code># List running services\ndocker-compose ps\n\n# View logs from all services\ndocker-compose logs\n\n# Follow logs for specific service\ndocker-compose logs -f web\n</code></pre> <p>The <code>ps</code> command shows container status, ports, and names.</p>"},{"location":"working-with-docker/compose/#working-with-services","title":"Working with Services","text":"<pre><code># Restart a specific service\ndocker-compose restart web\n\n# Execute command in running service\ndocker-compose exec web bash\n\n# Scale a service (run multiple copies)\ndocker-compose up --scale web=3\n</code></pre> <p><code>exec</code> lets you run commands inside a running container, just like <code>docker exec</code>.</p>"},{"location":"working-with-docker/compose/#service-configuration-explained","title":"Service Configuration Explained","text":""},{"location":"working-with-docker/compose/#basic-service-setup","title":"Basic Service Setup","text":"<pre><code>services:\n  myapp:\n    image: python:3.9          # Base image to use\n    ports:\n      - \"5000:5000\"            # host_port:container_port\n    environment:\n      - DEBUG=true             # Set environment variables\n    volumes:\n      - .:/app                 # Mount current directory to /app\n    working_dir: /app          # Set working directory inside container\n    command: python app.py     # Override default command\n</code></pre>"},{"location":"working-with-docker/compose/#building-from-source","title":"Building from Source","text":"<pre><code>services:\n  web:\n    build: .                   # Build from Dockerfile in current directory\n    ports:\n      - \"3000:3000\"\n</code></pre> <p>When you use <code>build</code>, Compose builds the image first, then creates the container.</p>"},{"location":"working-with-docker/compose/#service-dependencies","title":"Service Dependencies","text":"<pre><code>services:\n  web:\n    image: nginx\n    depends_on:                # Wait for these services before starting\n      - api\n      - db\n\n  api:\n    image: myapi\n    depends_on:\n      - db\n\n  db:\n    image: postgres\n</code></pre> <p><code>depends_on</code> controls startup order but doesn't wait for services to be \"ready\".</p>"},{"location":"working-with-docker/compose/#practical-example-web-app-with-database","title":"Practical Example: Web App with Database","text":"<pre><code>version: '3.8'\n\nservices:\n  web:\n    image: nginx\n    ports:\n      - \"8080:80\"\n    volumes:\n      - ./html:/usr/share/nginx/html\n    depends_on:\n      - db\n\n  db:\n    image: postgres:13\n    environment:\n      POSTGRES_DB: myapp\n      POSTGRES_USER: user\n      POSTGRES_PASSWORD: secret\n    volumes:\n      - db_data:/var/lib/postgresql/data\n\nvolumes:\n  db_data:                     # Named volume for persistent data\n</code></pre> <p>To use this: 1. Create <code>html/index.html</code> with your website content 2. Run <code>docker-compose up -d</code> 3. Visit <code>http://localhost:8080</code></p> <p>The database data persists in the <code>db_data</code> volume even if containers are removed.</p>"},{"location":"working-with-docker/compose/#environment-variables","title":"Environment Variables","text":""},{"location":"working-with-docker/compose/#method-1-in-compose-file","title":"Method 1: In Compose File","text":"<pre><code>services:\n  app:\n    image: myapp\n    environment:\n      - API_KEY=secret123\n      - DEBUG=true\n</code></pre>"},{"location":"working-with-docker/compose/#method-2-from-env-file","title":"Method 2: From .env File","text":"<p>Create <code>.env</code>: <pre><code>API_KEY=secret123\nDEBUG=true\n</code></pre></p> <p>Use in compose: <pre><code>services:\n  app:\n    image: myapp\n    env_file:\n      - .env\n</code></pre></p>"},{"location":"working-with-docker/compose/#networks-in-compose","title":"Networks in Compose","text":"<p>By default, all services can reach each other by service name:</p> <pre><code>services:\n  web:\n    image: nginx\n    # Can connect to database using hostname \"db\"\n\n  db:\n    image: postgres\n</code></pre> <p>Inside the web container, you can connect to <code>db:5432</code> instead of an IP address.</p>"},{"location":"working-with-docker/compose/#development-vs-production","title":"Development vs Production","text":""},{"location":"working-with-docker/compose/#override-files","title":"Override Files","text":"<p>Create <code>docker-compose.override.yml</code>: <pre><code>services:\n  app:\n    volumes:\n      - .:/app               # Mount source code for development\n    environment:\n      - NODE_ENV=development\n</code></pre></p> <ul> <li><code>docker-compose up</code> automatically uses override file</li> <li><code>docker-compose -f docker-compose.yml up</code> ignores override</li> </ul>"},{"location":"working-with-docker/compose/#common-issues-and-solutions","title":"Common Issues and Solutions","text":""},{"location":"working-with-docker/compose/#port-already-in-use","title":"Port Already in Use","text":"<pre><code># Error: port is already allocated\n# Solution: Change the host port\nports:\n  - \"8081:80\"  # Instead of \"8080:80\"\n</code></pre>"},{"location":"working-with-docker/compose/#service-cant-start","title":"Service Can't Start","text":"<pre><code># Check what's wrong\ndocker-compose logs service_name\n\n# Check if config is valid\ndocker-compose config\n</code></pre>"},{"location":"working-with-docker/compose/#cant-connect-between-services","title":"Can't Connect Between Services","text":"<pre><code># Test connectivity\ndocker-compose exec web ping db\n\n# Make sure both services are running\ndocker-compose ps\n</code></pre>"},{"location":"working-with-docker/compose/#quick-command-reference","title":"Quick Command Reference","text":"<pre><code># Basic operations\ndocker-compose up -d          # Start in background\ndocker-compose down           # Stop and remove\ndocker-compose restart web    # Restart one service\ndocker-compose logs -f web    # Follow logs\n\n# Development helpers  \ndocker-compose exec web bash  # Get shell in container\ndocker-compose up --build     # Rebuild images first\ndocker-compose pull           # Update all images\n\n# Scaling and management\ndocker-compose up --scale web=3    # Run 3 web containers\ndocker-compose ps                  # List services\ndocker-compose top                 # Show running processes\n</code></pre>"},{"location":"working-with-docker/compose/#key-takeaways","title":"Key Takeaways","text":"<ul> <li>Compose files define your entire application stack</li> <li>Services communicate using service names as hostnames</li> <li>Use volumes for data that needs to persist</li> <li><code>depends_on</code> controls startup order</li> <li>Override files are perfect for development configurations</li> </ul> <p>Next: Volumes &amp; Storage \u2192 - Learn to manage persistent data and file sharing.</p>"},{"location":"working-with-docker/networks/","title":"Networks","text":"<p>Docker networks control how containers communicate with each other and the outside world. By default, containers can talk to each other, but networks let you create secure, isolated groups and control exactly which containers can communicate.</p>"},{"location":"working-with-docker/networks/#why-docker-networks-matter","title":"Why Docker Networks Matter","text":"<p>Without custom networks: <pre><code># All containers can reach each other\ndocker run -d --name web nginx\ndocker run -d --name db postgres  \ndocker run -d --name cache redis\n\n# Problem: Web can access DB, but so can any other container\n# Security risk: No isolation between services\n</code></pre></p> <p>With custom networks: <pre><code># Create isolated networks\ndocker network create frontend\ndocker network create backend\n\n# Web server only on frontend network\ndocker run -d --name web --network frontend nginx\n\n# Database only on backend network  \ndocker run -d --name db --network backend postgres\n\n# API on both networks (can access DB, serve web)\ndocker run -d --name api --network frontend --network backend myapi\n</code></pre></p> <p>Now the web server cannot directly access the database - only the API can!</p>"},{"location":"working-with-docker/networks/#dockers-default-networks","title":"Docker's Default Networks","text":"<p>Docker creates three networks automatically:</p> <pre><code># List all networks\ndocker network ls\n</code></pre> <p>Expected output: <pre><code>NETWORK ID     NAME      DRIVER    SCOPE\nb1234567890a   bridge    bridge    local\nc2345678901b   host      host      local  \nd3456789012c   none      null      local\n</code></pre></p>"},{"location":"working-with-docker/networks/#bridge-network-default","title":"Bridge Network (Default)","text":"<ul> <li>What it does: All containers connect here by default</li> <li>IP range: Usually 172.17.0.0/16</li> <li>Container communication: Containers can reach each other by IP address</li> <li>Internet access: Yes, containers can reach outside world</li> </ul> <pre><code># These containers can communicate with each other\ndocker run -d --name app1 nginx\ndocker run -d --name app2 nginx\n\n# Test connectivity\ndocker exec app1 ping 172.17.0.3  # app2's IP\n</code></pre>"},{"location":"working-with-docker/networks/#host-network","title":"Host Network","text":"<ul> <li>What it does: Container uses host's network directly</li> <li>Use case: High-performance applications that need host networking</li> <li>Security: Less isolated, container shares all host ports</li> </ul> <pre><code># Container uses host's network stack\ndocker run -d --network host nginx\n# nginx now directly uses host's port 80\n</code></pre>"},{"location":"working-with-docker/networks/#none-network","title":"None Network","text":"<ul> <li>What it does: No network access at all</li> <li>Use case: Highly secure containers that don't need network access</li> </ul> <pre><code># Container has no network access\ndocker run -it --network none alpine ping google.com\n# ping: bad address 'google.com'\n</code></pre>"},{"location":"working-with-docker/networks/#creating-custom-networks","title":"Creating Custom Networks","text":""},{"location":"working-with-docker/networks/#basic-custom-network","title":"Basic Custom Network","text":"<pre><code># Create a custom bridge network\ndocker network create mynetwork\n</code></pre> <p>The <code>create</code> command makes a new isolated network where containers can communicate by name.</p> <pre><code># Run containers on custom network\ndocker run -d --name web --network mynetwork nginx\ndocker run -d --name api --network mynetwork myapi\n</code></pre> <p>Key benefit: Containers can now reach each other using container names instead of IP addresses:</p> <pre><code># Inside web container, can reach api by name\ndocker exec web curl http://api:3000/health\n</code></pre>"},{"location":"working-with-docker/networks/#network-with-custom-settings","title":"Network with Custom Settings","text":"<pre><code># Create network with specific IP range\ndocker network create \\\n  --driver bridge \\\n  --subnet 192.168.1.0/24 \\\n  --gateway 192.168.1.1 \\\n  mynetwork\n</code></pre> <p>Command breakdown: - <code>--driver bridge</code> specifies network type (bridge is most common) - <code>--subnet 192.168.1.0/24</code> sets IP address range for containers - <code>--gateway 192.168.1.1</code> sets the gateway IP address</p>"},{"location":"working-with-docker/networks/#network-management-commands","title":"Network Management Commands","text":""},{"location":"working-with-docker/networks/#list-and-inspect-networks","title":"List and Inspect Networks","text":"<pre><code># List all networks\ndocker network ls\n\n# Get detailed info about a network\ndocker network inspect mynetwork\n</code></pre> <p>The <code>inspect</code> command shows connected containers, IP addresses, and network configuration.</p>"},{"location":"working-with-docker/networks/#connectdisconnect-containers","title":"Connect/Disconnect Containers","text":"<pre><code># Connect running container to network\ndocker network connect mynetwork existing_container\n\n# Disconnect container from network\ndocker network disconnect mynetwork existing_container\n</code></pre> <p>Use case: Add a container to multiple networks for controlled access:</p> <pre><code># Container can communicate with both networks\ndocker network connect frontend api_container\ndocker network connect backend api_container\n</code></pre>"},{"location":"working-with-docker/networks/#remove-networks","title":"Remove Networks","text":"<pre><code># Remove specific network (must disconnect containers first)\ndocker network rm mynetwork\n\n# Remove all unused networks\ndocker network prune\n</code></pre>"},{"location":"working-with-docker/networks/#practical-examples","title":"Practical Examples","text":""},{"location":"working-with-docker/networks/#example-1-web-application-with-database","title":"Example 1: Web Application with Database","text":"<p>Create a secure 3-tier architecture:</p> <pre><code># Create networks for different tiers\ndocker network create frontend    # User-facing services\ndocker network create backend     # Database and internal services\n\n# Database on backend network only (isolated from users)\ndocker run -d \\\n  --name db \\\n  --network backend \\\n  -e POSTGRES_PASSWORD=secret123 \\\n  postgres:13\n\n# API server on both networks (can access DB and serve users)\ndocker run -d \\\n  --name api \\\n  --network frontend \\\n  myapi\n\n# Connect API to backend network so it can reach database\ndocker network connect backend api\n\n# Web server on frontend only (can reach API, not DB)\ndocker run -d \\\n  --name web \\\n  --network frontend \\\n  -p 8080:80 \\\n  nginx\n</code></pre> <p>Security benefit: Web server cannot directly access database, even if compromised.</p> <p>Test connectivity: <pre><code># API can reach database\ndocker exec api ping db\n# Works! \u2705\n\n# Web cannot reach database  \ndocker exec web ping db\n# Fails! \u2705 (This is what we want)\n\n# Web can reach API\ndocker exec web ping api  \n# Works! \u2705\n</code></pre></p>"},{"location":"working-with-docker/networks/#example-2-development-environment","title":"Example 2: Development Environment","text":"<pre><code># Create development network\ndocker network create dev\n\n# Start all services on same network\ndocker run -d --name redis --network dev redis:alpine\ndocker run -d --name postgres --network dev -e POSTGRES_PASSWORD=dev postgres:13\ndocker run -d --name app --network dev -p 3000:3000 myapp\n</code></pre> <p>Benefits for development: - All services can reach each other by name - Easy to add/remove services - Isolated from other projects</p>"},{"location":"working-with-docker/networks/#networks-in-docker-compose","title":"Networks in Docker Compose","text":"<p>Compose makes network management much easier:</p> <pre><code>version: '3.8'\n\nservices:\n  web:\n    image: nginx\n    networks:\n      - frontend\n    ports:\n      - \"8080:80\"\n\n  api:\n    image: myapi\n    networks:\n      - frontend      # Can receive requests from web\n      - backend       # Can access database\n\n  db:\n    image: postgres:13\n    networks:\n      - backend       # Only accessible by API\n    environment:\n      POSTGRES_PASSWORD: secret123\n\nnetworks:\n  frontend:           # Declare custom networks\n  backend:\n</code></pre> <p>Compose automatically: - Creates the networks when you run <code>docker-compose up</code> - Connects services to specified networks - Removes networks when you run <code>docker-compose down</code></p>"},{"location":"working-with-docker/networks/#advanced-compose-networking","title":"Advanced Compose Networking","text":"<pre><code>version: '3.8'\n\nservices:\n  web:\n    image: nginx\n    networks:\n      frontend:\n        aliases:          # Additional names for this service\n          - webserver\n          - www\n\n  api:\n    image: myapi  \n    networks:\n      frontend:\n        ipv4_address: 192.168.1.10    # Fixed IP address\n\nnetworks:\n  frontend:\n    driver: bridge\n    ipam:\n      config:\n        - subnet: 192.168.1.0/24      # Custom IP range\n</code></pre> <p>When to use fixed IPs: - Load balancers that expect specific IPs - Services that need consistent addressing - Advanced routing configurations</p>"},{"location":"working-with-docker/networks/#network-communication-examples","title":"Network Communication Examples","text":""},{"location":"working-with-docker/networks/#container-to-container-communication","title":"Container-to-Container Communication","text":"<pre><code># Create network and containers\ndocker network create appnet\ndocker run -d --name server --network appnet nginx\ndocker run -it --name client --network appnet alpine sh\n</code></pre> <p>Inside the client container: <pre><code># Can reach server by name\nping server\n\n# Can access server's web service\nwget -O- http://server\n# Returns nginx welcome page\n\n# Check network configuration\nip addr show\n# Shows container's IP in the appnet range\n</code></pre></p>"},{"location":"working-with-docker/networks/#external-access-control","title":"External Access Control","text":"<pre><code># Create internal network (no external access by default)\ndocker network create --internal internal-net\n\n# Container on internal network\ndocker run -d --name secret-service --network internal-net myapp\n\n# This container cannot reach the internet\ndocker exec secret-service ping google.com\n# Network is unreachable\n</code></pre> <p>Use case: Highly secure services that should never access external networks.</p>"},{"location":"working-with-docker/networks/#port-publishing-vs-network-access","title":"Port Publishing vs Network Access","text":"<p>Understanding the difference between <code>-p</code> (port publishing) and network connectivity:</p> <pre><code># Port publishing: Makes container accessible from host\ndocker run -d -p 8080:80 --name web nginx\n# Can access via http://localhost:8080\n\n# Network connectivity: Containers talk to each other\ndocker network create mynet\ndocker run -d --name web --network mynet nginx  \ndocker run -d --name app --network mynet myapp\n# app can reach web via http://web:80 (no port publishing needed)\n</code></pre> <p>Key insight: - Port publishing (-p) = External access from your computer - Networks = Internal communication between containers</p>"},{"location":"working-with-docker/networks/#troubleshooting-network-issues","title":"Troubleshooting Network Issues","text":""},{"location":"working-with-docker/networks/#cant-connect-between-containers","title":"Can't Connect Between Containers","text":"<pre><code># Check if containers are on same network\ndocker inspect container1 | grep NetworkMode\ndocker inspect container2 | grep NetworkMode\n\n# List networks and connected containers  \ndocker network inspect network_name\n</code></pre> <p>Common fix: <pre><code># Connect both containers to same network\ndocker network connect mynetwork container1\ndocker network connect mynetwork container2\n</code></pre></p>"},{"location":"working-with-docker/networks/#service-discovery-not-working","title":"Service Discovery Not Working","text":"<pre><code># Test if container can resolve service name\ndocker exec container1 nslookup container2\n\n# If DNS fails, check network connection\ndocker network inspect network_name\n# Look for both containers in \"Containers\" section\n</code></pre>"},{"location":"working-with-docker/networks/#port-conflicts","title":"Port Conflicts","text":"<pre><code># Error: Port 8080 already in use\n# Check what's using the port\ndocker ps --filter \"publish=8080\"\n\n# Use different host port\ndocker run -p 8081:80 nginx  # Instead of 8080:80\n</code></pre>"},{"location":"working-with-docker/networks/#network-performance-issues","title":"Network Performance Issues","text":"<pre><code># Test network performance between containers\ndocker exec container1 ping -c 10 container2\n\n# Check network statistics\ndocker exec container1 cat /proc/net/dev\n</code></pre>"},{"location":"working-with-docker/networks/#security-best-practices","title":"Security Best Practices","text":""},{"location":"working-with-docker/networks/#network-isolation","title":"Network Isolation","text":"<pre><code># Good: Separate networks for different functions\ndocker network create web-tier\ndocker network create app-tier  \ndocker network create db-tier\n\n# Frontend servers only on web-tier\n# Application servers on web-tier + app-tier\n# Databases only on db-tier\n</code></pre>"},{"location":"working-with-docker/networks/#least-privilege-access","title":"Least Privilege Access","text":"<pre><code># Only connect services to networks they actually need\nservices:\n  frontend:\n    networks:\n      - web           # Only needs web access\n\n  api:  \n    networks:\n      - web           # Serves web requests\n      - backend       # Accesses database\n\n  database:\n    networks:\n      - backend       # Only backend access\n</code></pre>"},{"location":"working-with-docker/networks/#internal-networks","title":"Internal Networks","text":"<pre><code># Create network with no internet access\ndocker network create --internal secure-net\n\n# Containers can communicate with each other but not internet\ndocker run -d --name secure-app --network secure-net myapp\n</code></pre>"},{"location":"working-with-docker/networks/#network-types-and-use-cases","title":"Network Types and Use Cases","text":"Network Type Use Case External Access Container Communication bridge (default) General applications Yes By IP address Custom bridge Isolated applications Yes By name host High performance Direct host access Uses host networking none Security-critical No network access None Internal Secure services No internet access Internal only"},{"location":"working-with-docker/networks/#command-reference","title":"Command Reference","text":"<pre><code># Network management\ndocker network create mynet               # Create network\ndocker network ls                        # List networks  \ndocker network inspect mynet             # Network details\ndocker network rm mynet                  # Remove network\ndocker network prune                     # Remove unused networks\n\n# Container network operations\ndocker run --network mynet image         # Start container on network\ndocker network connect mynet container   # Add container to network\ndocker network disconnect mynet container # Remove from network\n\n# Debugging\ndocker exec container ping other_container    # Test connectivity\ndocker exec container nslookup other_container # Test name resolution\ndocker network inspect mynet                   # See connected containers\n</code></pre>"},{"location":"working-with-docker/networks/#whats-next","title":"What's Next?","text":"<p>Fantastic! You now understand how to create secure, isolated networks and control container communication.</p> <p>You've completed the Working with Docker section! \ud83c\udf89</p> <p>Next up: Practical Guides \u2192 - Apply everything you've learned with real-world projects, best practices, and troubleshooting techniques.</p>"},{"location":"working-with-docker/networks/#key-takeaways","title":"Key Takeaways","text":"<ul> <li>Custom networks enable container-to-container communication by name instead of IP addresses</li> <li>Network isolation improves security by controlling which containers can communicate  </li> <li>Multi-network containers (like APIs) can bridge different network tiers securely</li> <li>Docker Compose automatically manages networks, making multi-service applications easier</li> <li>Port publishing (-p) is for external access; networks are for internal container communication</li> <li>Internal networks prevent internet access while allowing container communication</li> <li>Always use least privilege networking - only connect containers to networks they actually need</li> </ul>"},{"location":"working-with-docker/volumes/","title":"Volumes &amp; Storage","text":"<p>Containers are designed to be temporary - when you remove a container, all its data disappears. Volumes solve this by providing persistent storage that survives container restarts, updates, and deletions.</p>"},{"location":"working-with-docker/volumes/#why-you-need-volumes","title":"Why You Need Volumes","text":"<p>Without volumes: <pre><code># Create database container\ndocker run --name mydb postgres\n\n# Add some data to database\n# ... work with database ...\n\n# Remove container\ndocker rm mydb\n\n# Data is GONE forever! \ud83d\ude31\n</code></pre></p> <p>With volumes: <pre><code># Create database with persistent storage\ndocker run --name mydb -v mydata:/var/lib/postgresql/data postgres\n\n# Remove container\ndocker rm mydb\n\n# Data is safe in the volume! \u2705\n# Start new container with same data\ndocker run --name newdb -v mydata:/var/lib/postgresql/data postgres\n</code></pre></p>"},{"location":"working-with-docker/volumes/#types-of-mounts","title":"Types of Mounts","text":"<p>Docker provides three ways to mount data:</p> Type Description Use Case Named Volumes Managed by Docker Database data, app files Bind Mounts Direct host path Development, configuration tmpfs Memory-only Temporary files, secrets"},{"location":"working-with-docker/volumes/#named-volumes","title":"Named Volumes","text":"<p>Docker manages these volumes completely. Best for production data.</p>"},{"location":"working-with-docker/volumes/#creating-and-using-named-volumes","title":"Creating and Using Named Volumes","text":"<pre><code># Create a named volume\ndocker volume create mydata\n</code></pre> <p>The <code>create</code> command makes a new volume that Docker will manage and store safely.</p> <pre><code># Use the volume in a container\ndocker run -d --name db -v mydata:/var/lib/postgresql/data postgres\n</code></pre> <p>Command breakdown: - <code>-v mydata:/var/lib/postgresql/data</code> mounts volume <code>mydata</code> to <code>/var/lib/postgresql/data</code> inside container - Format is always <code>volume_name:container_path</code></p>"},{"location":"working-with-docker/volumes/#volume-management-commands","title":"Volume Management Commands","text":"<pre><code># List all volumes\ndocker volume ls\n</code></pre> <p>Shows all volumes on your system with their names and drivers.</p> <pre><code># Inspect a volume (see details)\ndocker volume inspect mydata\n</code></pre> <p>This shows where Docker stores the volume on your computer and other metadata.</p> <pre><code># Remove unused volumes\ndocker volume prune\n</code></pre> <p>Removes volumes that aren't currently attached to any containers. Warning: This deletes data permanently!</p> <pre><code># Remove specific volume\ndocker volume rm mydata\n</code></pre> <p>Only works if no containers are using the volume.</p>"},{"location":"working-with-docker/volumes/#bind-mounts","title":"Bind Mounts","text":"<p>Mount a specific folder from your computer directly into the container.</p>"},{"location":"working-with-docker/volumes/#development-example","title":"Development Example","text":"<pre><code># Mount current directory to /app in container\ndocker run -it -v $(pwd):/app node:18 bash\n</code></pre> <p>Command explanation: - <code>$(pwd)</code> gets your current directory path - <code>$(pwd):/app</code> mounts your current folder to <code>/app</code> inside container - Changes in either location are reflected immediately in both</p>"},{"location":"working-with-docker/volumes/#practical-development-setup","title":"Practical Development Setup","text":"<pre><code># Create project directory\nmkdir my-node-app\ncd my-node-app\n\n# Create a simple app\necho 'console.log(\"Hello from Node!\");' &gt; app.js\n\n# Run with bind mount for live editing\ndocker run -it -v $(pwd):/app -w /app node:18 bash\n</code></pre> <p>What <code>-w /app</code> does: - Sets <code>/app</code> as the working directory inside container - Like running <code>cd /app</code> automatically when container starts</p> <p>Inside the container: <pre><code># Your files are available\nls -la\n# app.js\n\n# Run your app\nnode app.js\n# Hello from Node!\n\n# Install packages (saves to your computer too)\nnpm init -y\nnpm install express\n</code></pre></p> <p>All changes save to your computer and persist after container stops.</p>"},{"location":"working-with-docker/volumes/#practical-examples","title":"Practical Examples","text":""},{"location":"working-with-docker/volumes/#example-1-persistent-database","title":"Example 1: Persistent Database","text":"<pre><code># Create named volume for database\ndocker volume create postgres_data\n\n# Run PostgreSQL with persistent storage\ndocker run -d \\\n  --name mydb \\\n  -e POSTGRES_PASSWORD=secret123 \\\n  -e POSTGRES_DB=myapp \\\n  -v postgres_data:/var/lib/postgresql/data \\\n  postgres:13\n</code></pre> <p>Command breakdown: - <code>docker run -d</code> runs container in background (detached) - <code>--name mydb</code> gives container a memorable name - <code>-e</code> sets environment variables (password and database name) - <code>-v postgres_data:/var/lib/postgresql/data</code> mounts volume to database storage location</p> <p>Test persistence: <pre><code># Connect and create data\ndocker exec -it mydb psql -U postgres -d myapp\n# CREATE TABLE users (id INT, name TEXT);\n# INSERT INTO users VALUES (1, 'Alice');\n# \\q\n\n# Stop and remove container\ndocker stop mydb\ndocker rm mydb\n\n# Start new container with same volume\ndocker run -d --name mydb2 -e POSTGRES_PASSWORD=secret123 -v postgres_data:/var/lib/postgresql/data postgres:13\n\n# Data is still there!\ndocker exec -it mydb2 psql -U postgres -d myapp\n# SELECT * FROM users;\n# (shows Alice!)\n</code></pre></p>"},{"location":"working-with-docker/volumes/#example-2-development-environment","title":"Example 2: Development Environment","text":"<pre><code># Create React app directory\nmkdir my-react-app\ncd my-react-app\n\n# Create package.json\ncat &gt; package.json &lt;&lt; 'EOF'\n{\n  \"name\": \"my-react-app\",\n  \"version\": \"1.0.0\",\n  \"scripts\": {\n    \"start\": \"react-scripts start\"\n  },\n  \"dependencies\": {\n    \"react\": \"^18.0.0\",\n    \"react-dom\": \"^18.0.0\",\n    \"react-scripts\": \"5.0.1\"\n  }\n}\nEOF\n\n# Start development container with bind mount\ndocker run -it \\\n  -v $(pwd):/app \\\n  -v /app/node_modules \\\n  -w /app \\\n  -p 3000:3000 \\\n  node:18 bash\n</code></pre> <p>Special volume trick explained: - <code>-v $(pwd):/app</code> mounts your code - <code>-v /app/node_modules</code> creates anonymous volume for node_modules - This prevents your local node_modules (if any) from overriding container's installed packages</p>"},{"location":"working-with-docker/volumes/#volumes-in-docker-compose","title":"Volumes in Docker Compose","text":"<p>Much easier to manage volumes with Compose:</p> <pre><code>version: '3.8'\n\nservices:\n  db:\n    image: postgres:13\n    environment:\n      POSTGRES_PASSWORD: secret123\n      POSTGRES_DB: myapp\n    volumes:\n      - db_data:/var/lib/postgresql/data    # Named volume\n\n  web:\n    image: nginx\n    volumes:\n      - ./html:/usr/share/nginx/html        # Bind mount\n    ports:\n      - \"8080:80\"\n\nvolumes:\n  db_data:    # Declare named volume\n</code></pre> <p>Compose volume syntax: - <code>db_data:/var/lib/postgresql/data</code> uses named volume - <code>./html:/usr/share/nginx/html</code> uses bind mount (relative path) - Must declare named volumes in <code>volumes:</code> section</p>"},{"location":"working-with-docker/volumes/#development-compose-example","title":"Development Compose Example","text":"<pre><code>version: '3.8'\n\nservices:\n  app:\n    image: node:18\n    working_dir: /app\n    command: npm start\n    volumes:\n      - .:/app                    # Bind mount source code\n      - /app/node_modules         # Anonymous volume for dependencies\n    ports:\n      - \"3000:3000\"\n    environment:\n      - NODE_ENV=development\n</code></pre> <p>How this helps development: - Edit files on your computer, see changes instantly in container - <code>node_modules</code> stays in container (faster, cleaner) - Container restart preserves installed packages</p>"},{"location":"working-with-docker/volumes/#volume-backup-and-restore","title":"Volume Backup and Restore","text":""},{"location":"working-with-docker/volumes/#backup-a-volume","title":"Backup a Volume","text":"<pre><code># Create backup of named volume\ndocker run --rm \\\n  -v mydata:/data \\\n  -v $(pwd):/backup \\\n  alpine \\\n  tar czf /backup/mydata-backup.tar.gz -C /data .\n</code></pre> <p>Command breakdown: - <code>--rm</code> removes container after it finishes - <code>-v mydata:/data</code> mounts the volume you want to backup - <code>-v $(pwd):/backup</code> mounts current directory to save backup file - <code>alpine</code> is small Linux image perfect for utilities - <code>tar czf</code> creates compressed archive of all files in <code>/data</code></p>"},{"location":"working-with-docker/volumes/#restore-from-backup","title":"Restore from Backup","text":"<pre><code># Create new volume and restore data\ndocker volume create mydata_restored\n\ndocker run --rm \\\n  -v mydata_restored:/data \\\n  -v $(pwd):/backup \\\n  alpine \\\n  tar xzf /backup/mydata-backup.tar.gz -C /data\n</code></pre> <p>What <code>tar xzf</code> does: - <code>x</code> extracts files - <code>z</code> handles gzip compression - <code>f</code> specifies file to extract - <code>-C /data</code> extracts to <code>/data</code> directory</p>"},{"location":"working-with-docker/volumes/#troubleshooting-common-issues","title":"Troubleshooting Common Issues","text":""},{"location":"working-with-docker/volumes/#permission-problems","title":"Permission Problems","text":"<pre><code># Problem: Can't write to bind mounted directory\ndocker run -v $(pwd):/app ubuntu touch /app/test.txt\n# touch: cannot touch '/app/test.txt': Permission denied\n</code></pre> <p>Solution - Match user IDs: <pre><code># Check your user ID\nid -u\n# 1000\n\n# Run container with your user ID\ndocker run -u 1000:1000 -v $(pwd):/app ubuntu touch /app/test.txt\n</code></pre></p> <p>The <code>-u 1000:1000</code> makes the container process run as user 1000 (your user) instead of root.</p>"},{"location":"working-with-docker/volumes/#volume-not-mounting","title":"Volume Not Mounting","text":"<pre><code># Check if volume exists\ndocker volume ls | grep mydata\n\n# If not found, create it\ndocker volume create mydata\n\n# Check volume details\ndocker volume inspect mydata\n</code></pre>"},{"location":"working-with-docker/volumes/#data-not-persisting","title":"Data Not Persisting","text":"<p>Common mistake - using container paths instead of volumes:</p> <pre><code># Wrong: Data goes away with container\ndocker run postgres\n\n# Right: Data persists in volume\ndocker run -v postgres_data:/var/lib/postgresql/data postgres\n</code></pre> <p>Always mount volumes to the application's data directory (varies by application).</p>"},{"location":"working-with-docker/volumes/#file-system-types","title":"File System Types","text":""},{"location":"working-with-docker/volumes/#tmpfs-mounts-memory-storage","title":"tmpfs Mounts (Memory Storage)","text":"<p>For temporary files that shouldn't be written to disk:</p> <pre><code># Mount memory-based filesystem\ndocker run -it --tmpfs /tmp ubuntu bash\n</code></pre> <p>When to use tmpfs: - Sensitive temporary files - High-performance temporary storage - Files that should never persist</p> <p>Inside container: <pre><code># Files written to /tmp stay in memory only\necho \"secret data\" &gt; /tmp/secret.txt\n# This never touches your hard drive\n</code></pre></p>"},{"location":"working-with-docker/volumes/#best-practices","title":"Best Practices","text":""},{"location":"working-with-docker/volumes/#choose-the-right-mount-type","title":"Choose the Right Mount Type","text":"<pre><code># Named volumes - for application data\ndocker run -v db_data:/var/lib/mysql mysql\n\n# Bind mounts - for development and config\ndocker run -v $(pwd):/app -v ./config:/etc/myapp myapp\n\n# tmpfs - for sensitive temporary data\ndocker run --tmpfs /tmp myapp\n</code></pre>"},{"location":"working-with-docker/volumes/#development-vs-production","title":"Development vs Production","text":"<p>Development - Use bind mounts: <pre><code>services:\n  app:\n    volumes:\n      - .:/app                    # Live code editing\n      - ./config:/app/config      # Local config files\n</code></pre></p> <p>Production - Use named volumes: <pre><code>services:\n  app:\n    volumes:\n      - app_data:/app/data        # Managed by Docker\n      - config_data:/app/config   # Controlled storage\n</code></pre></p>"},{"location":"working-with-docker/volumes/#regular-backups","title":"Regular Backups","text":"<pre><code># Backup script for important volumes\n#!/bin/bash\nDATE=$(date +%Y%m%d)\ndocker run --rm -v important_data:/data -v $(pwd):/backup alpine \\\n  tar czf /backup/backup-$DATE.tar.gz -C /data .\n</code></pre>"},{"location":"working-with-docker/volumes/#volume-commands-reference","title":"Volume Commands Reference","text":"<pre><code># Volume management\ndocker volume create myvolume          # Create named volume\ndocker volume ls                       # List all volumes\ndocker volume inspect myvolume         # Show volume details\ndocker volume rm myvolume             # Delete volume\ndocker volume prune                   # Remove unused volumes\n\n# Using volumes in containers\ndocker run -v myvolume:/path image     # Mount named volume\ndocker run -v $(pwd):/path image      # Mount current directory\ndocker run --tmpfs /path image        # Mount memory filesystem\n\n# Volume info in running containers\ndocker inspect container_name          # Shows all mounts\ndocker exec container df -h           # Check disk usage inside container\n</code></pre>"},{"location":"working-with-docker/volumes/#whats-next","title":"What's Next?","text":"<p>Excellent! You now understand how to persist data and share files between containers and your host system.</p> <p>Next: Networks \u2192 - Learn to control how containers communicate with each other and the outside world.</p>"},{"location":"working-with-docker/volumes/#key-takeaways","title":"Key Takeaways","text":"<ul> <li>Named volumes are best for persistent application data - Docker manages them safely</li> <li>Bind mounts are perfect for development - edit files on your computer, see changes in container instantly  </li> <li>Always mount volumes to application data directories - varies by application (PostgreSQL uses <code>/var/lib/postgresql/data</code>)</li> <li>Use volume backups for important data - simple tar commands can save your data</li> <li>Match user permissions with <code>-u</code> flag to avoid file permission issues</li> <li>Anonymous volumes (like <code>/app/node_modules</code>) prevent local files from overriding container files</li> </ul>"}]}